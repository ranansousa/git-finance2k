unit uDMTransfCaixaBanco;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,uContaBancariaChequeModel,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB,udmConexao, uUtil, uDMOrganizacao,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client;

type
  TdmTransfCaixaBanco = class(TDataModule)
    qryObterContaBancaria: TFDQuery;
    qryObterTOB: TFDQuery;
    qryObterCBC: TFDQuery;
    qryObterTD: TFDQuery;
    qryUpdateCheque: TFDQuery;
    qryChequePorID: TFDQuery;
    qryDeletaTD: TFDQuery;
    qryDeletaCBC: TFDQuery;
    qryObterLoteDeposito: TFDQuery;
    procedure DataModuleCreate(Sender: TObject);
  private
    { Private declarations }
   pIdUsuario, pIdOrganizacao :string;


  public
    { Public declarations }
    function obterLote(pIdOrganizacao, pIDLote: string): Boolean;
    function alteraCheque(pIdOrganizacao, pContaBancaria,
      pIdCheque: string): Boolean;
    function deletarCBC(pIdOrganizacao, pIdCBC: string): Boolean;
    function deletarTD(pIdOrganizacao, pIdCBC, pIdTD: string): Boolean;

    function obterTD(pIdOrganizacao: string; pDataInicial,   pDataFinal: TDate): Boolean;
    function obterCBC(pIdOrganizacao, pIDCBC: string): Boolean;


    function obterCheque(pIdOrganizacao, pContaBancaria,   pIdCheque: string): TContaBancariaChequeModel;
    function obterTipoOperacaoBancaria(pIdOrganizacao,    pIdTOB: string): TFDQuery;
    function transfereEspecieCaixaBanco(pIdorganizacao, pIdConta, pIdResponsavel :string; pDataMovimento :TDate; pValor :Currency) :Boolean;


  end;

var
  dmTransfCaixaBanco: TdmTransfCaixaBanco;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

procedure TdmTransfCaixaBanco.DataModuleCreate(Sender: TObject);
begin
pIdOrganizacao := uutil.TOrgAtual.getId;
pIdUsuario := uutil.TUserAtual.getUserId;

end;


function TdmTransfCaixaBanco.transfereEspecieCaixaBanco(pIdorganizacao, pIdConta, pIdResponsavel: string; pDataMovimento: TDate;  pValor: Currency): Boolean;
  var
 identificadorTD, descricaoTD, cmdDB, cmdCR, idTD, idCBC,  idTOB, idCedente, idHistorico :string;
  qryDebitoCaixa, qryCreditoBanco :TFDQuery;


  begin
  Result :=False;
  dmConexao.conectarBanco;
  idCedente := uutil.TOrgAtual.getId;
  idHistorico := 'DEPOSITO TESOURARIA/BANCO';
  idTOB := 'DEPOSITO TESOURARIA/BANCO';
  idTD := dmConexao.obterNewID;
  identificadorTD := dmConexao.obterIdentificador('',pIdOrganizacao,'TD');
  pIdUsuario := uutil.TUserAtual.getUserId;



   try
     qryObterContaBancaria.Close;
     qryObterContaBancaria.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
     qryObterContaBancaria.ParamByName('PIDCONTA').AsString := pIdConta;
     qryObterContaBancaria.Open;
     descricaoTD :=  ' DEP DIN CTA ' + ' NC';

      if not qryObterContaBancaria.IsEmpty then begin
        descricaoTD :=  ' DEP DIN CTA ' + qryObterContaBancaria.FieldByName('CODIGO_BANCO').AsString +
                        ' - ' + qryObterContaBancaria.FieldByName('CONTA').AsString;
      end;

   except
   raise Exception.Create('Erro ao obter dados da conta bancária');

   end;

 if not dmConexao.conn.InTransaction then
         dmConexao.conn.StartTransaction;//abre a transação

  try

  //parte do credito no banco
   idCBC := dmConexao.obterNewID;

   cmdCR :=' INSERT INTO CONTA_BANCARIA_CREDITO (ID_CONTA_BANCARIA_CREDITO, ID_ORGANIZACAO, IDENTIFICACAO , ID_CONTA_BANCARIA, '+
           ' ID_TIPO_OPERACAO_BANCARIA, ID_RESPONSAVEL, ID_USUARIO, TIPO_LANCAMENTO, DESCRICAO, VALOR,  ' +
           ' DATA_REGISTRO, DATA_MOVIMENTO ) ' +
           ' VALUES (:PIDCBC, :PIDORGANIZACAO, :PIDENT, :PIDCONTABANCO,:PIDTOB, :PIDRESPONSAVEL, :PIDUSER, :PTIPO, :PDESCRICAO,'+
           ' :PVALOR, :PDTREGISTRO, :PDTMOVIMENTO   ) ' ;



    qryCreditoBanco := TFDQuery.Create(Self);
    qryCreditoBanco.Close;
    qryCreditoBanco.Connection := dmConexao.conn;
    qryCreditoBanco.SQL.Clear;
    qryCreditoBanco.SQL.Add(cmdCR);
    qryCreditoBanco.ParamByName('PIDCBC').AsString :=idCBC;
    qryCreditoBanco.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
    qryCreditoBanco.ParamByName('PIDENT').AsString := dmConexao.obterIdentificador('',pIdOrganizacao,'CBC');
    qryCreditoBanco.ParamByName('PIDCONTABANCO').AsString := pIdConta;
    qryCreditoBanco.ParamByName('PIDTOB').AsString := idTOB;
    qryCreditoBanco.ParamByName('PIDRESPONSAVEL').AsString := pIdResponsavel;
    qryCreditoBanco.ParamByName('PIDUSER').AsString := pIdUsuario;
    qryCreditoBanco.ParamByName('PTIPO').AsString :='C';
    qryCreditoBanco.ParamByName('PDESCRICAO').AsString := descricaoTD + ' ID CX  ' + identificadorTD ;
    qryCreditoBanco.ParamByName('PVALOR').AsCurrency := pValor;
    qryCreditoBanco.ParamByName('PDTREGISTRO').AsDate := Now;
    qryCreditoBanco.ParamByName('PDTMOVIMENTO').AsDate := pDataMovimento;
    qryCreditoBanco.ExecSQL;

    //parte do débito no caixa
     cmdDB := ' INSERT INTO TESOURARIA_DEBITO (ID_TESOURARIA_DEBITO, ID_ORGANIZACAO, ID_HISTORICO, ID_RESPONSAVEL, ID_CEDENTE, '+
              ' ID_USUARIO, NUMERO_DOCUMENTO, DESCRICAO, DATA_REGISTRO, DATA_CONTABIL, DATA_MOVIMENTO, VALOR_NOMINAL,  '+
              ' TIPO_LANCAMENTO, ID_CONTA_BANCARIA_CREDITO ) ' +
              ' VALUES (:PIDTD,:PIDORGANIZACAO,:PIDHIST,:PIDRESPONSAVEL,:PIDCEDENTE, '+
              ' :PIDUSER,:PNUMDOC, :PDESCRICAO, :PDTREGISTRO, :PDTCONTABIL, :PDTMOVIMENTO, :PVALOR, :PTIPO, :PIDCONTABANCO )';


    qryDebitoCaixa := TFDQuery.Create(Self);
    qryDebitoCaixa.Close;
    qryDebitoCaixa.Connection := dmConexao.conn;
    qryDebitoCaixa.SQL.Clear;
    qryDebitoCaixa.SQL.Add(cmdDB);
    qryDebitoCaixa.ParamByName('PIDTD').AsString :=idTD;
    qryDebitoCaixa.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
    qryDebitoCaixa.ParamByName('PIDHIST').AsString := idHistorico;
    qryDebitoCaixa.ParamByName('PIDRESPONSAVEL').AsString := pIdResponsavel;
    qryDebitoCaixa.ParamByName('PIDCEDENTE').AsString := idCedente;
    qryDebitoCaixa.ParamByName('PIDUSER').AsString := pIdUsuario;
    qryDebitoCaixa.ParamByName('PTIPO').AsString :='D';
    qryDebitoCaixa.ParamByName('PNUMDOC').AsString := identificadorTD;
    qryDebitoCaixa.ParamByName('PDESCRICAO').AsString := descricaoTD;
    qryDebitoCaixa.ParamByName('PDTREGISTRO').AsDate := Now;
    qryDebitoCaixa.ParamByName('PDTCONTABIL').AsDate := pDataMovimento;
    qryDebitoCaixa.ParamByName('PDTMOVIMENTO').AsDate := pDataMovimento;
    qryDebitoCaixa.ParamByName('PVALOR').AsCurrency := pValor;
    qryDebitoCaixa.ParamByName('PIDCONTABANCO').AsString := idCBC;

    qryDebitoCaixa.ExecSQL;

    if dmConexao.conn.InTransaction then
      dmConexao.conn.CommitRetaining;

  except
    if dmConexao.conn.InTransaction then
      dmConexao.conn.RollbackRetaining;

    Result := False;
    dmConexao.conn.RollbackRetaining;
    raise Exception.Create('Erro ao transferir da tesouraria para o banco.');
  end;

     Result := True;
end;



function TdmTransfCaixaBanco.obterTipoOperacaoBancaria(pIdOrganizacao, pIdTOB: string): TFDQuery;
begin
dmConexao.conectarBanco;
 try

    qryObterTOB.Close;
    qryObterTOB.Connection := dmConexao.Conn;
    qryObterTOB.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
    qryObterTOB.ParamByName('PIDTOB').AsString := pIdTOB;
    qryObterTOB.Open;


 except
 raise Exception.Create('Erro ao obter TOB');

 end;


 Result := qryObterTOB;


end;



function TdmTransfCaixaBanco.alteraCheque(pIdOrganizacao, pContaBancaria,
  pIdCheque: string): Boolean;
begin

   dmConexao.conectarBanco;
   if not dmConexao.conn.InTransaction then
         dmConexao.conn.StartTransaction;

   try

    qryUpdateCheque.Close;
    qryUpdateCheque.Connection := dmConexao.conn;
    qryUpdateCheque.ParamByName('PIDCONTA').AsString := pContaBancaria;
    qryUpdateCheque.ParamByName('PIDORGANIZACAO').AsString := pIDOrganizacao;
    qryUpdateCheque.ParamByName('PIDCHEQUE').AsString := pIdCheque;
    qryUpdateCheque.ExecSQL;


      if dmConexao.conn.InTransaction then
         dmConexao.conn.CommitRetaining;
    except
      if dmConexao.conn.InTransaction then
        dmConexao.conn.RollbackRetaining;

        Result :=False;
   raise Exception.Create('Erro alterar dados do cheque ');
   end;
   Result :=True;
end;

  {

function obterTD(pIdOrganizacao: string; pDataInicial,   pDataFinal: TDate): Boolean;
 function obterCBC(pIdOrganizacao, pIDCBC: string): Boolean;     }


function TdmTransfCaixaBanco.obterTD(pIdOrganizacao: string; pDataInicial,   pDataFinal: TDate): Boolean;
begin

  dmConexao.conectarBanco;
  try

    qryObterTD.Close;
    qryObterTD.Connection := dmConexao.conn;
    qryObterTD.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;  
    qryObterTD.ParamByName('PDTINICIAL').AsDate := pDataInicial;
    qryObterTD.ParamByName('PDTFINAL').AsDate := pDataFinal;
    qryObterTD.ParamByName('PIDHISTORICO').AsString := 'DEPOSITO TESOURARIA/BANCO';
    

    qryObterTD.Open;
  except
    raise Exception.Create('Erro ao obter TD');

  end;

  Result := not qryObterTD.IsEmpty;

end;


function TdmTransfCaixaBanco.deletarCBC(pIdOrganizacao,  pIdCBC: string): Boolean;
begin
  dmConexao.conectarBanco;
  if not dmConexao.conn.InTransaction then
    dmConexao.conn.StartTransaction;

  try

    qryDeletaCBC.Close;
    qryDeletaCBC.Connection := dmConexao.conn;
    qryDeletaCBC.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
    qryDeletaCBC.ParamByName('PIDCBC').AsString := pIdCBC;
    qryDeletaCBC.ExecSQL;

    if dmConexao.conn.InTransaction then
      dmConexao.conn.CommitRetaining;

  except
    if dmConexao.conn.InTransaction then
      dmConexao.conn.RollbackRetaining;
    Result := False;
    raise Exception.Create('Erro ao deletar CBD');

  end;
  Result := True;
end;




function TdmTransfCaixaBanco.deletarTD(pIdOrganizacao, pIdCBC,  pIdTD: string): Boolean;
begin
 dmConexao.conectarBanco;
 if not dmConexao.conn.InTransaction then
         dmConexao.conn.StartTransaction;

  try

    qryDeletaTD.Close;
    qryDeletaTD.Connection := dmConexao.conn;
    qryDeletaTD.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
    qryDeletaTD.ParamByName('PIDCBC').AsString := pIdCBC;
    qryDeletaTD.ParamByName('PIDTD').AsString := pIdTD;

    qryDeletaTD.ExecSQL;

    if dmConexao.conn.InTransaction then
         dmConexao.conn.CommitRetaining;

    except
      if dmConexao.conn.InTransaction then
        dmConexao.conn.RollbackRetaining;
    Result := False;
    raise Exception.Create('Erro ao deletar CBD');

  end;
  Result := True;


end;

function TdmTransfCaixaBanco.obterLote(pIdOrganizacao, pIDLote: string ): Boolean;
begin
   dmConexao.conectarBanco;

  try

    qryObterLoteDeposito.Close;
    qryObterLoteDeposito.Connection := dmConexao.conn;
    qryObterLoteDeposito.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
    qryObterLoteDeposito.ParamByName('PIDLOTEC').AsString := pIDLote;
    qryObterLoteDeposito.Open;


  except
  raise Exception.Create('Erro ao obter CBC');

  end;

  Result := not qryObterLoteDeposito.IsEmpty;


end;


function TdmTransfCaixaBanco.obterCBC(pIdOrganizacao, pIDCBC: string ): Boolean;
begin
 dmConexao.conectarBanco;

  try

    qryObterCBC.Close;
    qryObterCBC.Connection := dmConexao.conn;
    qryObterCBC.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
    qryObterCBC.ParamByName('PIDCBC').AsString := pIDCBC;
    qryObterCBC.Open;


  except
  raise Exception.Create('Erro ao obter CBC');

  end;

  Result := not qryObterCBC.IsEmpty;
end;

function TdmTransfCaixaBanco.obterCheque(pIdOrganizacao, pContaBancaria, pIdCheque: string): TContaBancariaChequeModel;
var
cheque : TContaBancariaChequeModel;

begin
   cheque :=TContaBancariaChequeModel.Create;
   dmConexao.conectarBanco;

   try

    qryChequePorID.Close;
    qryChequePorID.Connection := dmConexao.conn;
    qryChequePorID.ParamByName('PIDCONTA').AsString := pContaBancaria;
    qryChequePorID.ParamByName('PIDORGANIZACAO').AsString := pIDOrganizacao;
    qryChequePorID.ParamByName('PIDCHEQUE').AsString := pIdCheque;

    qryChequePorID.Open;

     if not  qryChequePorID.IsEmpty then begin
      cheque.FID                      := (qryChequePorID.FieldByName('id_conta_bancaria_cheque').AsString);
      cheque.FIdOrganizacao           := (qryChequePorID.FieldByName('id_organizacao').AsString);
      cheque.FIdContaBancaria         := (qryChequePorID.FieldByName('id_conta_bancaria').AsString);
      cheque.FIDresponsavel           := (qryChequePorID.FieldByName('id_funcionario').AsString);
      cheque.FIdTipoStatus            := (qryChequePorID.FieldByName('id_tipo_status').AsString);
      cheque.FNumero                   := (qryChequePorID.FieldByName('numero_cheque').AsString);
      cheque.FObservacao              := (qryChequePorID.FieldByName('observacao').AsString);
      cheque.FPortador                := (qryChequePorID.FieldByName('portador').AsString);
      cheque.FIdUsuario               := (qryChequePorID.FieldByName('id_usuario').AsString);
      cheque.FDataPrevisaoCompensacao := (qryChequePorID.FieldByName('data_previsao_compensacao').AsDateTime);
      cheque.FDataEstorno             := (qryChequePorID.FieldByName('data_estorno').AsDateTime);
      cheque.FDataRegistro            := (qryChequePorID.FieldByName('data_registro').AsDateTime);
      cheque.FDataEmissao             := (qryChequePorID.FieldByName('data_emissao').AsDateTime);
      cheque.FDataCompensacao         := (qryChequePorID.FieldByName('data_compensacao').AsDateTime);
      cheque.FValor                   := (qryChequePorID.FieldByName('valor').AsCurrency);
      cheque.FQtdImpressao            := (qryChequePorID.FieldByName('qtd_impressao').AsInteger);

     end;


   except
   raise Exception.Create('Erro ao obter cheque por ID');

   end;

   Result := cheque;
end;




end.
