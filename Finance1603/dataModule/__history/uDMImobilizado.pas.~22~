unit uDMImobilizado;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB, udmConexao, uUtil,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client;

type
  TdmImobilizado = class(TDataModule)
    qryCadastraBem: TFDQuery;
  private
    { Private declarations }

  public
    { Public declarations }
    function cadastrarBem(pEMPRESA, pGRUPO, pCODIGO : Integer; pDATAAQ: TDateTime; pVALORAQ :Currency;  pTIPO, pDESCRICAO, pCTDESTCM, pCTDESTDP, pCTPARTCM, pCTPARTDP, pCTDESTCM_LEI11638, pCTPARTCM_LEI11638, pCTDESTDP_LEI11638, pCTPARTDP_LEI11638 :string) :Boolean;
    function obterGrupoPermanente(pEMPRESA :Integer): TFDQuery;
    function obterCodigoBem(pEmpresa :Integer):Integer;
    function obterIDBem(pEmpresa :Integer):Integer;





      end;

var
  dmImobilizado: TdmImobilizado;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

{ TdmImobilizado }

function TdmImobilizado.cadastrarBem(pEMPRESA, pGRUPO, pCODIGO: Integer;
  pDATAAQ: TDateTime; pVALORAQ: Currency; pTIPO, pDESCRICAO, pCTDESTCM,
  pCTDESTDP, pCTPARTCM, pCTPARTDP, pCTDESTCM_LEI11638, pCTPARTCM_LEI11638,
  pCTDESTDP_LEI11638, pCTPARTDP_LEI11638: string): Boolean;
  var qryCadastro :TFDQuery;
sqlCmd :string;
begin
   dmConexao.conectarMega;
   try


      ' INSERT INTO CBENS_PERMANENTE (ID, EMPRESA, GRUPO, CODIGO, DATAAQ, VALORAQ, '+
      ' DESCRICAO, CTDESTCM, CTDESTDP, CTPARTCM, CTPARTDP, TIPO, CCUSTO, FILIAL, CTDESTCM_LEI11638, '+
      ' CTPARTCM_LEI11638, CTDESTDP_LEI11638, CTPARTDP_LEI11638) '+
      ' VALUES (  ) ' ;


    qryCadastro := TFDQuery.Create(Self);
    qryCadastro.Close;
    qryCadastro.Connection := dmConexao.ConnMega;
    qryCadastro.SQL.Clear;
    qryCadastro.SQL.Add(sqlCmd);

    qryCadastro.ParamByName('PEMPRESA').AsInteger := pEmpresa;
    qryCadastro.ParamByName('pGRUPO').AsInteger := pGRUPO;
    qryCadastro.ParamByName('pCODIGO').AsInteger := pCODIGO;

    qryCadastro.ParamByName('pDATAAQ').AsDate := pDATAAQ;

    qryCadastro.ParamByName('pVALORAQ').AsCurrency := pVALORAQ;

    qryCadastro.ParamByName('pTIPO').AsString := pTIPO;
    qryCadastro.ParamByName('pDESCRICAO').AsString := pDESCRICAO;
    qryCadastro.ParamByName('pCTDESTCM').AsString := pCTDESTCM;
    qryCadastro.ParamByName('pCTDESTDP').AsString := pCTDESTDP;
    qryCadastro.ParamByName('pCTPARTCM').AsString := pCTPARTCM;
    qryCadastro.ParamByName('pCTPARTDP').AsString := pCTPARTDP;
    qryCadastro.ParamByName('pCTDESTCM_LEI11638').AsString := pCTDESTCM_LEI11638;
    qryCadastro.ParamByName('pCTPARTCM_LEI11638').AsString := pCTPARTCM_LEI11638;
    qryCadastro.ParamByName('pCTDESTDP_LEI11638').AsString := pCTDESTDP_LEI11638;
    qryCadastro.ParamByName('pCTPARTDP_LEI11638').AsString := pCTPARTDP_LEI11638;

    qryCadastro.ExecSQL;

    dmConexao.ConnMega.CommitRetaining;


   except
   Result :=False;
     dmConexao.ConnMega.RollbackRetaining;
     raise Exception.Create('Erro ao tentar cadastrar o imobilizado.');

   end;

     Result :=True;
end;


function TdmImobilizado.obterCodigoBem(pEmpresa: Integer): Integer;
var qryObterCodigo :TFDQuery;
sqlCmd :string;

begin
 dmConexao.conectarMega;

 try
   sqlCmd := ' SELECT (MAX(CODIGO) + 1) as COD FROM CBENS_PERMANENTE WHERE (EMPRESA = :PEMPRESA)';
    qryObterCodigo := TFDQuery.Create(Self);
    qryObterCodigo.Close;
    qryObterCodigo.Connection := dmConexao.ConnMega;
    qryObterCodigo.SQL.Clear;
    qryObterCodigo.SQL.Add(sqlCmd);
    qryObterCodigo.ParamByName('PEMPRESA').AsInteger := pEmpresa;
    qryObterCodigo.Open;

 except
 Result := 0;
 raise Exception.Create('Erro ao tentar obter código do bem.');
 end;

 Result :=  qryObterCodigo.FieldByName('COD').AsInteger;

end;

function TdmImobilizado.obterIDBem(pEmpresa: Integer): Integer;
var qryObterID :TFDQuery;
sqlCmd :string;

begin
 dmConexao.conectarMega;

 try
   sqlCmd := ' SELECT (MAX(ID) + 1) as NID FROM CBENS_PERMANENTE WHERE (EMPRESA = :PEMPRESA)';
    qryObterID := TFDQuery.Create(Self);
    qryObterID.Close;
    qryObterID.Connection := dmConexao.ConnMega;
    qryObterID.SQL.Clear;
    qryObterID.SQL.Add(sqlCmd);
    qryObterID.ParamByName('PEMPRESA').AsInteger := pEmpresa;
    qryObterID.Open;

 except
 Result := 0;
 raise Exception.Create('Erro ao tentar obter código do bem.');
 end;

 Result :=  qryObterID.FieldByName('NID').AsInteger;

end;


function TdmImobilizado.obterGrupoPermanente(pEMPRESA: Integer): TFDQuery;
var qryGrupo :TFDQuery;
sqlCmd :string;
begin
  dmConexao.conectarMega;

 try

   sqlCmd := ' SELECT ID, EMPRESA, GRUPO, DESCRICAO FROM CGRUPOS_PERMANENTE WHERE EMPRESA = :PEMPRESA )';

    qryGrupo := TFDQuery.Create(Self);
    qryGrupo.Close;
    qryGrupo.Connection := dmConexao.ConnMega;
    qryGrupo.SQL.Clear;
    qryGrupo.SQL.Add(sqlCmd);
    qryGrupo.ParamByName('PEMPRESA').AsInteger := pEMPRESA;
    qryGrupo.Open;


 except
 raise Exception.Create('Erro ao obter grupo de permanente.');

 end;

 Result := qryGrupo;
end;

end.
