unit uFrmRelatoriosRecebimentos;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics, Vcl.Controls,
  Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ComCtrls, uDMRelatoriosRecebimentos,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB, FireDAC.Comp.DataSet, uOrganizacaoDAO,uOrganizacaoModel,
  FireDAC.Comp.Client, FireDAC.UI.Intf, FireDAC.Comp.ScriptCommands,  udmConexao, FireDAC.Stan.Util,
   FireDAC.Comp.Script, Vcl.Grids, Vcl.DBGrids, frxClass, frxDBSet, frxExportPDF, frxExportCSV, uUtil, Vcl.Buttons, ComObj,
  frxExportBaseDialog, dxSkinsCore, dxSkinsDefaultPainters, cxGraphics,
  cxControls, cxLookAndFeels, cxLookAndFeelPainters, dxRibbonSkins, uFrmBaixaFP, uTituloPagarModel,
  dxRibbonCustomizationForm, cxClasses, dxRibbon, dxBar, EMsgDlg,
  dxDateTimeWheelPicker, cxBarEditItem, dxBarExtItems, Vcl.ExtCtrls, dxStatusBar,
  frxExportXLSX;

  //uDM está aqui temporariamente

type
  TfrmRelatorioRecebimentos = class(TForm)
    DBGridMain: TDBGrid;
    frxRelContasReceber: TfrxReport;
    frxDBTitulos: TfrxDBDataset;
    frxDBCentroCusto: TfrxDBDataset;
    frxDBHistorico: TfrxDBDataset;
    frxDBTitulosExcel: TfrxDBDataset;
    frxReportExcel: TfrxReport;
    dsPreencheGrid: TDataSource;
    PempecMsg: TEvMsgDlg;
    dxBarManager1: TdxBarManager;
    dxRibbon1Tab1: TdxRibbonTab;
    dxRibbon1: TdxRibbon;
    dxBarManager1Bar1: TdxBar;
    dxBarManager1Bar2: TdxBar;
    dxBarManager1Bar3: TdxBar;
    dxBarManager1Bar4: TdxBar;
    dxBarManager1Bar5: TdxBar;
    dxBarManager1Bar6: TdxBar;
    dxBarBtnFecha: TdxBarLargeButton;
    dxBarDataInicial: TdxBarDateCombo;
    cxBarEditItem1: TcxBarEditItem;
    cxBarEditItem2: TcxBarEditItem;
    dxBarDataFinal: TdxBarDateCombo;
    dxBarCbxStatus: TdxBarCombo;
    dxBarCbxCentroCusto: TdxBarCombo;
    dxBarCbxOrdem: TdxBarCombo;
    dxBarCbxTipoRel: TdxBarCombo;
    dxBarBtnConsultar: TdxBarLargeButton;
    dxBarBtnImprimir: TdxBarLargeButton;
    dxBarBtnExport: TdxBarLargeButton;
    Panel1: TPanel;
    dxBarManager1Bar7: TdxBar;
    dxBtnPagar: TdxBarLargeButton;
    dxStatusBar: TdxStatusBar;
    cxBarEditItem3: TcxBarEditItem;
    cxBarEditItem4: TcxBarEditItem;
    cxBarPesquisaDocumento: TcxBarEditItem;
    dxBarManager1Bar8: TdxBar;
    cxBarPesquisaCedente: TcxBarEditItem;
    dxBarDateCombo1: TdxBarDateCombo;
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure btnImprimirClick(Sender: TObject);
    procedure btnConsultarClick(Sender: TObject);
    procedure btnExcelClick(Sender: TObject);
    procedure dsPreencheGridDataChange(Sender: TObject; Field: TField);
    procedure dxBarBtnFechaClick(Sender: TObject);
    procedure dxBarBtnConsultarClick(Sender: TObject);
    procedure dxBarBtnImprimirClick(Sender: TObject);
    procedure dxBarBtnExportClick(Sender: TObject);
    procedure cxBarPesquisaCedenteCurChange(Sender: TObject);
    procedure DBGridMainTitleClick(Column: TColumn);
    procedure dxBtnPagarClick(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure cxBarPesquisaDocumentoCurChange(Sender: TObject);
  private
    { Private declarations }
    FsListaIdOrganizacoes: TStringList;
    FsListaIdCentrosCusto: TStringList;
    idOrgzanizacao: string;
    organizacaoModel :TOrganizacaoModel;
    pTitulo : TTituloPagarModel;
    procedure inicializarDM(Sender: TObject);
    procedure freeAndNilDM(Sender: TObject);
    function carregarCentrosCusto: Boolean;
    procedure preencherListaCentrosCusto;
    function montarSQL: Boolean;
    function montarSQLForExcel: Boolean;

    function retornarCampoOrdenacao: string;
    procedure exibirRelatorio(tipo: Integer);
    procedure inicializarVariaveisRelatorio;
    function validarFormulario: boolean;
    function retornarCaminhoRelatorio(tipo: Integer): string;
    procedure exibirRelatorioExcel(tipo: Integer);
    procedure exibirValoresPanel;
    procedure limpaStatusBar;
    procedure msgStatusBar(pPosicao: Integer; msg: string);
  public
    { Public declarations }
    function carregarDadosPagamentos: boolean;

  end;

var
  frmRelatorioRecebimentos: TfrmRelatorioRecebimentos;

implementation

{$R *.dfm}

procedure TfrmRelatorioRecebimentos.btnConsultarClick(Sender: TObject);
begin
  if validarFormulario then
//  idStatus := QuotedStr(cbxStatus.Items[cbxStatus.ItemIndex]);

  begin
    //dmOrganizacao.carregarDadosOrganizacao(idOrgzanizacao);

    if not (carregarDadosPagamentos) then
    begin
      dxBarBtnExport.Enabled := false;
      dxBarBtnImprimir.Enabled := false;
      PempecMsg.MsgInformation('Consulta não retornou dados.');
       msgStatusBar(4, 'Consulta não retornou resultados');
       exibirValoresPanel;
    end
    else
    begin
      exibirValoresPanel;
      dxBarBtnImprimir.Enabled := True;
      dxBarBtnExport.Enabled := True;
    end;
  end;
end;

procedure TfrmRelatorioRecebimentos.btnExcelClick(Sender: TObject);
var
  linha, coluna: integer;
var
  planilha: variant;
var
  valorcampo: string;
begin
  //para excel foi informado que seriam todos os titulos. Considerando apenas periodo.
  if (montarSQLForExcel) then begin

    exibirRelatorioExcel(10); //10 inddica ser EXCEL
  end
  else
  begin
    ShowMessage('Não é possível gerar exportação.');
  end;

end;

procedure TfrmRelatorioRecebimentos.btnImprimirClick(Sender: TObject);
begin
  if validarFormulario then
  begin

    if (dxBarCbxTipoRel.ItemIndex > (-1)) then
    begin
      if not (dsPreencheGrid.DataSet.IsEmpty) then
      begin
        dxBarBtnExport.Enabled := true; //libera exporta excel
        exibirRelatorio(dxBarCbxTipoRel.ItemIndex);
      end
      else
      begin
        dxBarBtnExport.Enabled := false;
        PempecMsg.MsgWarning('Consulta não retornou dados');
      end;
    end;
  end;
end;

function TfrmRelatorioRecebimentos.carregarCentrosCusto: Boolean;
begin
  Result := dmRelRecebimentos.obterTodosCentroCustos(idOrgzanizacao);
end;


function TfrmRelatorioRecebimentos.carregarDadosPagamentos: Boolean;
begin
  Result := false;

  Result := montarSQL;

end;

procedure TfrmRelatorioRecebimentos.cxBarPesquisaCedenteCurChange(Sender: TObject);
begin
 DBGridMain.DataSource.DataSet.Locate('NOME_CEDENTE',UpperCase(cxBarPesquisaCedente.CurEditValue),[loPartialKey]);
end;

procedure TfrmRelatorioRecebimentos.cxBarPesquisaDocumentoCurChange(
  Sender: TObject);
begin
DBGridMain.DataSource.DataSet.Locate('NUMERO_DOCUMENTO',UpperCase(cxBarPesquisaDocumento.CurEditValue),[loPartialKey]);
end;

procedure TfrmRelatorioRecebimentos.DBGridMainTitleClick(Column: TColumn);
begin
(DBGridMain.DataSource.DataSet as TFDQuery).IndexFieldNames :=Column.FieldName;
end;

procedure TfrmRelatorioRecebimentos.dsPreencheGridDataChange(Sender: TObject;
  Field: TField);
  var
  idTituloPagar :string;
begin
// carrega os historicos
    idTituloPagar :=  TFDQuery(DBGridMain.DataSource.DataSet).FieldByName('ID_TITULO_RECEBER').AsString;
    dmRelRecebimentos.obterHistoricoPorTP(idOrgzanizacao, idTituloPagar);
    dmRelRecebimentos.obterCentroCustoPorTP(idOrgzanizacao,idTituloPagar);
    pTitulo := TTituloPagarModel.Create;
    pTitulo.FIDorganizacao := idOrgzanizacao;
    pTitulo.FID := idTituloPagar;
    pTitulo.FIDTipoStatus := TFDQuery(DBGridMain.DataSource.DataSet).FieldByName('STATUS').AsString;
    pTitulo.FnumeroDocumento := TFDQuery(DBGridMain.DataSource.DataSet).FieldByName('NUMERO_DOCUMENTO').AsString;
    pTitulo.Forganizacao := organizacaoModel;

end;

procedure TfrmRelatorioRecebimentos.dxBarBtnConsultarClick(Sender: TObject);
begin
 if validarFormulario then
//  idStatus := QuotedStr(cbxStatus.Items[cbxStatus.ItemIndex]);

  begin

    if not uUtil.Empty(organizacaoModel.FID) then
    begin

  //  dmOrganizacao.carregarDadosOrganizacao(idOrgzanizacao);


      if not (carregarDadosPagamentos) then
      begin
        dxBarBtnExport.Enabled := false;
        dxBarBtnImprimir.Enabled := false;
        cxBarPesquisaCedente.Enabled := False;
        cxBarPesquisaDocumento.Enabled := False;
        PempecMsg.MsgWarning('Consulta não retornou dados.');
        msgStatusBar(4, 'Consulta retonou vazia.');
        exibirValoresPanel;
      end
      else
      begin
        exibirValoresPanel;
        dxBarBtnImprimir.Enabled := True;
        dxBarBtnExport.Enabled := True;
        cxBarPesquisaCedente.Enabled := True;
        cxBarPesquisaDocumento.Enabled := True;
      end;
    end;
  end;


end;

procedure TfrmRelatorioRecebimentos.dxBarBtnExportClick(Sender: TObject);
var
  linha, coluna: integer;
var
  planilha: variant;
var
 arquivo, valorcampo: string;
begin
  // PempecMsg.MsgInformation('Lamentamos, não é possível exportar. ');
  //para excel foi informado que seriam todos os titulos. Considerando apenas periodo.

  if (montarSQLForExcel) then begin  //tira o NOT

   // exibirRelatorioExcel(10); //10 inddica ser EXCEL
    arquivo := uutil.ExpDataSetForTXT(dmRelRecebimentos.qryRelPagamentos, ExtractFilePath(Application.ExeName)+ 'REL\TR\FNC_REL_TR_ '+ SoNumeros(DateToStr(Now)) + '.CSV');

   PempecMsg.MsgInformation('Arquivo criado com sucesso '+#13#13 + arquivo );

   msgStatusBar(4, 'Arquivo :' );
   msgStatusBar(5, arquivo );


  end
  else
  begin
    PempecMsg.MsgError('Não é possível gerar exportação.');
  end;

    cxBarPesquisaCedente.Enabled := False;
    cxBarPesquisaDocumento.Enabled := False;

end;

procedure TfrmRelatorioRecebimentos.dxBarBtnFechaClick(Sender: TObject);
begin
 PostMessage(Self.Handle, WM_CLOSE, 0, 0);
end;

procedure TfrmRelatorioRecebimentos.dxBarBtnImprimirClick(Sender: TObject);
begin
 // PempecMsg.MsgInformation('Lamentamos, não é possível imprimir. ');

 if validarFormulario then //retirar o not p funcionar
  begin

    if (dxBarCbxTipoRel.ItemIndex > (-1)) then
    begin
      if not (dsPreencheGrid.DataSet.IsEmpty) then
      begin
        dxBarBtnExport.Enabled := true; //libera exporta excel
        exibirRelatorio(dxBarCbxTipoRel.ItemIndex);
      end
      else
      begin
        dxBarBtnExport.Enabled := false;
        PempecMsg.MsgWarning('Consulta não retornou dados');
      end;
    end;
  end;
    cxBarPesquisaCedente.Enabled := False;
    cxBarPesquisaDocumento.Enabled := False;
end;

procedure TfrmRelatorioRecebimentos.dxBtnPagarClick(Sender: TObject);
begin

  PempecMsg.MsgError('Não foi possível abrir a tela de baixa de título.');    //o botao está marcado para n ser visible.

  {
 DBGridMain.DataSource.DataSet.Close;

 try

   if pTitulo.FIDTipoStatus.Equals('ABERTO') then begin


    frmBaixa := TFrmBaixaFP.Create(Self,pTitulo);
    frmBaixa.ShowModal;
    FreeAndNil(frmBaixa);

   end else begin PempecMsg.MsgError('Não é possível efetuar a baixa do título ' + pTitulo.FnumeroDocumento); end;

  except
    on e: Exception do
      ShowMessage(e.Message + sLineBreak + 'Contate o suporte. Informe erro: ' + ' TfrmBaixaFP ' );
  end;    }

    dxBarBtnConsultar.Click;

end;

procedure TfrmRelatorioRecebimentos.exibirRelatorioExcel(tipo: Integer);
begin
// EXCEL TIPO 10

  frxReportExcel.Clear;
  if not (frxReportExcel.LoadFromFile(retornarCaminhoRelatorio(tipo))) then
  begin
    //Mensagem não encontrou o arquivo do relatorio. Fazer
    PempecMsg.MsgInformation('Arquivo não encontrado. Informe o erro ao suporte. EXP_EXCEL_FILE');

  end
  else
  begin

    { frxReportExcel.OldStyleProgress := True;
    frxReportExcel.ShowProgress := True;
    frxReportExcel.ShowReport;}

    frxReportExcel.Export(frxXLSXExport1);



  end;
end;

procedure TfrmRelatorioRecebimentos.exibirValoresPanel;

begin
  if (dxBarCbxStatus.ItemIndex > (-1)) then

  begin

   msgStatusBar(2,'Total a receber : ');
   msgStatusBar(3,(FormatCurr('R$ ###,##0.00',dmRelRecebimentos.obterTotalPorStatus(TOrgAtual.getId, 'ABERTO', dxBarDataInicial.Date, dxBarDataFinal.Date))));
   msgStatusBar(4,'Total recebido  : ');
   msgStatusBar(5,(FormatCurr('R$ ###,##0.00',dmRelRecebimentos.obterTotalPorStatus(TOrgAtual.getId, 'QUITADO', dxBarDataInicial.Date, dxBarDataFinal.Date))));

  end;

end;

procedure TfrmRelatorioRecebimentos.exibirRelatorio(tipo: Integer);
begin

     frxRelContasReceber.Clear;
  if not (frxRelContasReceber.LoadFromFile(retornarCaminhoRelatorio(tipo))) then
  begin
    //Mensagem não encontrou o arquivo do relatorio. Fazer
    PempecMsg.MsgWarning('Não é possível apresentar o relatório.');

  end
  else
  begin
    inicializarVariaveisRelatorio;
    frxRelContasReceber.OldStyleProgress := True;
    frxRelContasReceber.ShowProgress := True;
    frxRelContasReceber.ShowReport;
  end;
end;

procedure TfrmRelatorioRecebimentos.FormClose(Sender: TObject; var Action: TCloseAction);
begin

  if Assigned(dmRelRecebimentos) then
  begin
    FreeAndNil(dmRelRecebimentos);
  end;

  Action := cafree;

end;

procedure TfrmRelatorioRecebimentos.FormCreate(Sender: TObject);
begin
  inicializarDM(Self);

  dxBarBtnExport.Enabled := False;
  dxBarBtnImprimir.Enabled := false;
  dxRibbon1Tab1.Caption := 'Consulta de contas a receber';
  cxBarPesquisaCedente.Enabled := False;
  cxBarPesquisaDocumento.Enabled := False;
  limpaStatusBar;
end;

procedure TfrmRelatorioRecebimentos.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  case key of
    VK_F10: dxBtnPagar.Click;
  end;
end;

procedure TfrmRelatorioRecebimentos.freeAndNilDM(Sender: TObject);
begin
  if Assigned(dmRelRecebimentos) then begin

    FreeAndNil(dmRelRecebimentos);
  end;

end;

procedure TfrmRelatorioRecebimentos.inicializarDM(Sender: TObject);
begin
     dmConexao.conectarBanco;

    idOrgzanizacao              :=uUtil.TOrgAtual.getId;
    organizacaoModel := TOrganizacaoModel.Create;
    organizacaoModel.FID := idOrgzanizacao;
    organizacaoModel := TOrganizacaoDAO.obterPorID(organizacaoModel);


    dxBarDataInicial.Date          := now;
    dxBarDataFinal.Date            := now;
    dxBarCbxStatus.ItemIndex         := 0;
    dxBarCbxCentroCusto.ItemIndex   :=0;
    dxBarCbxOrdem.ItemIndex          :=0;
    dxBarCbxTipoRel.ItemIndex  :=0;


  if not (Assigned(dmRelRecebimentos)) then
  begin
    dmRelRecebimentos := TdmRelRecebimentos.Create(Self);
  end;

  if carregarCentrosCusto then
  begin
    preencherListaCentrosCusto;
  end;




end;

procedure TfrmRelatorioRecebimentos.inicializarVariaveisRelatorio;
var
sucesso : Boolean;
begin
  sucesso := False;

  if (organizacaoModel.Fvinculada) then
  begin
    sucesso := True;
  end
  else
  begin
    sucesso := False;
    organizacaoModel.FID := uutil.TOrgAtual.getId;
    organizacaoModel := TOrganizacaoDAO.obterPorID(organizacaoModel);
    sucesso := organizacaoModel.Fvinculada;

  end;



  if sucesso then
  begin


     with frxRelContasReceber.Variables do
    begin
      Variables['strRazaoSocial'] := QuotedStr(organizacaoModel.FRazaoSocial);
      Variables['strCNPJ'] := QuotedStr(organizacaoModel.FCNPJ);
      Variables['strEndereco'] := QuotedStr(organizacaoModel.FLOGRADOURO +' '+ organizacaoModel.FCOMPLEMENTO + ' ' + organizacaoModel.FBairro.Fbairro);
      Variables['strCEP'] := QuotedStr(organizacaoModel.FCEP);
      Variables['strCidade'] := QuotedStr(organizacaoModel.FCidade.Fcidade);
      Variables['strUF'] := QuotedStr(organizacaoModel.FIDESTADO);
      Variables['strTipoStatus'] := QuotedStr(dxBarCbxStatus.Items[dxBarCbxStatus.ItemIndex]);

    end;




  end;
end;

function TfrmRelatorioRecebimentos.montarSQL: Boolean;
var
  lsSQL: TStringList;
  tpStatus,  x: string;


begin
  dmConexao.conectarBanco;

  lsSQL := TStringList.Create;
  lsSQL.AddStrings(dmRelRecebimentos.sqlScriptContainer.SQLScripts.FindScript('sqlRelPagamentos').SQL);
  lsSQL.Add('WHERE');

   if (dxBarCbxStatus.ItemIndex = 0) then BEGIN //TODOS OS TITULOS COM DATA VENCIMENTO NO PERIODO
        lsSQL.Add(Format('  (TR.DATA_VENCIMENTO BETWEEN %s AND %s)', [QuotedStr(FormatDateTime('dd.mm.yyyy', dxBarDataInicial.Date)), QuotedStr(FormatDateTime('dd.mm.yyyy', dxBarDataFinal.Date))]));
        lsSQL.Add('OR');
        lsSQL.Add(Format('  (TR.DATA_PAGAMENTO BETWEEN %s AND %s)', [QuotedStr(FormatDateTime('dd.mm.yyyy', dxBarDataInicial.Date)), QuotedStr(FormatDateTime('dd.mm.yyyy', dxBarDataFinal.Date))]));
        lsSQL.Add('AND');
        lsSQL.Add(Format('  (TR.ID_TIPO_STATUS <> %s)', [QuotedStr('EXCLUIDO')]));
        lsSQL.Add('AND');
   END;

   if (dxBarCbxStatus.ItemIndex = 1) then BEGIN //TODOS OS TITULOS COM DATA VENCIMENTO NO PERIODO
        lsSQL.Add(Format('  (TR.DATA_VENCIMENTO BETWEEN %s AND %s)', [QuotedStr(FormatDateTime('dd.mm.yyyy', dxBarDataInicial.Date)), QuotedStr(FormatDateTime('dd.mm.yyyy', dxBarDataFinal.Date))]));
        lsSQL.Add('AND');
        lsSQL.Add(Format('  (TR.ID_TIPO_STATUS = %s)', [QuotedStr(dxBarCbxStatus.Items[dxBarCbxStatus.ItemIndex])]));
        lsSQL.Add('AND');

   END;

    if (dxBarCbxStatus.ItemIndex = 2) then BEGIN //TODOS OS TITULOS EXCLUIDOS NO PERIODO
        tpStatus := '(''EXCLUIDO'')';
        lsSQL.Add(Format('  (TR.DATA_EMISSAO BETWEEN %s AND %s)', [QuotedStr(FormatDateTime('dd.mm.yyyy', dxBarDataInicial.Date)), QuotedStr(FormatDateTime('dd.mm.yyyy', dxBarDataFinal.Date))]));
        lsSQL.Add('AND');
        //lsSQL.Add(Format('  (TR.ID_TIPO_STATUS IN %s)', [tpStatus]));
        lsSQL.Add(Format('  (TR.ID_TIPO_STATUS = %s)', [QuotedStr(dxBarCbxStatus.Items[dxBarCbxStatus.ItemIndex])]));
        lsSQL.Add('AND');

   END;

    if (dxBarCbxStatus.ItemIndex = 3) then BEGIN //TODOS OS TITULOS COM DATA PAGAMENTO NO PERIODO
        tpStatus := '(''QUITADO'',''PARCIAL'')';
        lsSQL.Add(Format('  (TR.DATA_PAGAMENTO BETWEEN %s AND %s)', [QuotedStr(FormatDateTime('dd.mm.yyyy', dxBarDataInicial.Date)), QuotedStr(FormatDateTime('dd.mm.yyyy', dxBarDataFinal.Date))]));
        lsSQL.Add('AND');
        lsSQL.Add(Format('  (TR.ID_TIPO_STATUS IN %s)', [tpStatus]));
        lsSQL.Add('AND');

   END;



  lsSQL.Add(Format('  (TR.ID_ORGANIZACAO = %s)', [QuotedStr(idOrgzanizacao)]));

  if (dxBarCbxCentroCusto.ItemIndex > 0) then
  begin
    lsSQL.Add('AND');
    lsSQL.Add(Format('  (TPC.ID_CENTRO_CUSTO = %s)', [QuotedStr(FsListaIdCentrosCusto[dxBarCbxCentroCusto.ItemIndex])]));
  end;

 { if (cbxStatus.ItemIndex > 0) then
  begin
    lsSQL.Add('AND');
    lsSQL.Add(Format('  (TR.ID_TIPO_STATUS = %s)', [QuotedStr(cbxStatus.Items[cbxStatus.ItemIndex])]));
  end; }

  lsSQL.Add('ORDER BY');
  lsSQL.Add('  ' + retornarCampoOrdenacao);

{  dmRelPagamentos.qryRelPagamentos.Close;
  dmRelPagamentos.qryRelPagamentos.SQL.Clear;
  dmRelPagamentos.qryRelPagamentos.SQL.Assign(lsSQL); }

  Result := dmRelRecebimentos.obterTodosRecebimentos(lsSQL,idOrgzanizacao,dxBarDataInicial.Date, dxBarDataFinal.Date );
  //Result := (lsSQL.Count > 0);
  lsSql := nil;
end;




function TfrmRelatorioRecebimentos.montarSQLForExcel: Boolean;
var
  lsSQL: TStringList;
  tpStatus,  x: string;


begin
  dmConexao.conectarBanco;

  lsSQL := TStringList.Create;
  lsSQL.AddStrings(dmRelRecebimentos.sqlScriptExcel.SQLScripts.FindScript('sqlTitulosExcel').SQL);
  lsSQL.Add('WHERE');

   if (dxBarCbxStatus.ItemIndex = 0) then BEGIN //TODOS OS TITULOS COM DATA VENCIMENTO NO PERIODO
        lsSQL.Add(Format('  (TR.DATA_VENCIMENTO BETWEEN %s AND %s)', [QuotedStr(FormatDateTime('dd.mm.yyyy', dxBarDataInicial.Date)), QuotedStr(FormatDateTime('dd.mm.yyyy', dxBarDataFinal.Date))]));
        lsSQL.Add('AND');
        lsSQL.Add(Format('  (TR.ID_TIPO_STATUS <> %s)', [QuotedStr('EXCLUIDO')]));
        lsSQL.Add('AND');
   END;

   if (dxBarCbxStatus.ItemIndex = 1) then BEGIN //TODOS OS TITULOS COM DATA VENCIMENTO NO PERIODO
        lsSQL.Add(Format('  (TR.DATA_VENCIMENTO BETWEEN %s AND %s)', [QuotedStr(FormatDateTime('dd.mm.yyyy', dxBarDataInicial.Date)), QuotedStr(FormatDateTime('dd.mm.yyyy', dxBarDataFinal.Date))]));
        lsSQL.Add('AND');
        lsSQL.Add(Format('  (TR.ID_TIPO_STATUS = %s)', [QuotedStr(dxBarCbxStatus.Items[dxBarCbxStatus.ItemIndex])]));
        lsSQL.Add('AND');

   END;

    if (dxBarCbxStatus.ItemIndex = 3) then BEGIN //TODOS OS TITULOS COM DATA PAGAMENTO NO PERIODO
         tpStatus := '(''QUITADO'',''PARCIAL'')';
        lsSQL.Add(Format('  (TR.DATA_PAGAMENTO BETWEEN %s AND %s)', [QuotedStr(FormatDateTime('dd.mm.yyyy', dxBarDataInicial.Date)), QuotedStr(FormatDateTime('dd.mm.yyyy', dxBarDataFinal.Date))]));
        lsSQL.Add('AND');
        lsSQL.Add(Format('  (TR.ID_TIPO_STATUS IN %s)', [tpStatus]));
        lsSQL.Add('AND');

   END;

  lsSQL.Add(Format('  (TR.ID_ORGANIZACAO = %s)', [QuotedStr(idOrgzanizacao)]));

  if (dxBarCbxCentroCusto.ItemIndex > 0) then
  begin
    lsSQL.Add('AND');
    lsSQL.Add(Format('  (TPC.ID_CENTRO_CUSTO = %s)', [QuotedStr(FsListaIdCentrosCusto[dxBarCbxCentroCusto.ItemIndex])]));
  end;

  lsSQL.Add('ORDER BY');
  lsSQL.Add('  ' + retornarCampoOrdenacao);

  Result := dmRelRecebimentos.obterTitulosExcel(lsSQL,idOrgzanizacao,dxBarDataInicial.Date, dxBarDataFinal.Date );
  //Result := (lsSQL.Count > 0);
  lsSql := nil;
end;

procedure TfrmRelatorioRecebimentos.preencherListaCentrosCusto;
begin
  FsListaIdCentrosCusto := TStringList.Create;
  FsListaIdCentrosCusto.Clear;
  FsListaIdCentrosCusto.Add('Sem ID'); //Linha adicionada somente para combatibilizar com os itens do ComboBox cbxCentrosCusto
  dxBarCbxCentroCusto.Items.Clear;
  dxBarCbxCentroCusto.Items.Add('TODOS');
  dmRelRecebimentos.qryCentroCusto.First;
  while not dmRelRecebimentos.qryCentroCusto.Eof do
  begin
    dxBarCbxCentroCusto.Items.Add(dmRelRecebimentos.qryCentroCusto.FieldByName('DESCRICAO').AsString);
    FsListaIdCentrosCusto.Add(dmRelRecebimentos.qryCentroCusto.FieldByName('ID_CENTRO_CUSTO').AsString);
    dmRelRecebimentos.qryCentroCusto.Next;
  end;
  dmRelRecebimentos.qryCentroCusto.Close;
  dxBarCbxCentroCusto.ItemIndex := 0;
end;

function TfrmRelatorioRecebimentos.retornarCaminhoRelatorio(tipo: Integer): string;
begin


  case tipo of
    0:
      Result := uUtil.TPathRelatorio.getContasReceberFiltro;
    1:
      Result :=  uUtil.TPathRelatorio.getContasReceberFiltroAnalitico ;
    10:
      Result :=  uUtil.TPathRelatorio.getContasReceberFiltroExcel;

  end;

end;

function TfrmRelatorioRecebimentos.retornarCampoOrdenacao: string;
begin
  case dxBarCbxOrdem.ItemIndex of
    0:
      Result := 'TR.VALOR_NOMINAL';
    1:
      Result := 'C.NOME';
    2:
      Result := 'CC.DESCRICAO';
    3:
      Result := 'TR.DATA_PAGAMENTO';
    4:
      Result := 'TR.DATA_VENCIMENTO';
    5:
      Result := 'H.DESCRICAO';
    6:
      Result := 'T.DESCRICAO';
  end;
end;

function TfrmRelatorioRecebimentos.validarFormulario: boolean;
begin
  Result := true;
end;



procedure TfrmRelatorioRecebimentos.msgStatusBar(pPosicao : Integer; msg :string);
begin
dxStatusBar.Panels[pPosicao].Text := msg;
Application.ProcessMessages;
end;

procedure TfrmRelatorioRecebimentos.limpaStatusBar;
begin
dxStatusBar.Panels[0].Text := 'Status ';
dxStatusBar.Panels[1].Text := 'Ativo. Teclas de atalho:  [F10] = Pagar ';
end;





end.


