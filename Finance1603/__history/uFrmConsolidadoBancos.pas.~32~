unit uFrmConsolidadoBancos;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics, Vcl.Controls, Vcl.Forms, Vcl.Dialogs,
  Vcl.StdCtrls, uUtil, udmConexao, uFrameContaBancaria, Data.DB, Vcl.Grids,
  Vcl.DBGrids, FireDAC.Stan.Intf, FireDAC.Stan.Option, System.DateUtils,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  System.StrUtils, FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt,
  FireDAC.Comp.DataSet, uDMOrganizacao, FireDAC.Comp.Client, uFramePeriodo,
  frxClass, frxDBSet, uFrmMostraProcesso, uFrmEnviaMail, uContaBancariaModel,
  uContaBancariaDAO, uContaBancariaCRModel, uContaBancariaCreditoDAO,
  uContaBancariaDBModel, uContaBancariaDebitoDAO, Vcl.ExtCtrls,
  frxExportBaseDialog, Vcl.Buttons, cxGraphics, cxControls, cxLookAndFeels,
  cxLookAndFeelPainters, dxSkinsCore, dxSkinsDefaultPainters, dxStatusBar,
  dxRibbonSkins, dxRibbonCustomizationForm, cxClasses, dxRibbon, dxBar, EMsgDlg,
  dxBarExtItems, cxRadioGroup, cxCheckGroup, cxCheckBox, cxBarEditItem,
  frxExportPDF, frxExportMail, frxExportImage;

type
  TfrmConsolidadoBancos = class(TForm)
    dbgrd1: TDBGrid;
    frxRelatorioSaldos: TfrxReport;
    frxDBSaldos: TfrxDBDataset;
    dxBarManager1: TdxBarManager;
    dxRibbon1Tab1: TdxRibbonTab;
    dxRibbon1: TdxRibbon;
    dxBarManager1Bar1: TdxBar;
    dxBarManager1Bar2: TdxBar;
    dxBarManager1Bar3: TdxBar;
    dxBtnProcessar: TdxBarLargeButton;
    dxBtnImprimir: TdxBarLargeButton;
    dxBtnFechar: TdxBarLargeButton;
    PempecMsg: TEvMsgDlg;
    dxBarManager1Bar4: TdxBar;
    dxBarDataInicial: TdxBarDateCombo;
    dxBarDataFinal: TdxBarDateCombo;
    dxBarLargeButton1: TdxBarLargeButton;
    dxBarCbxContas: TdxBarCombo;
    qryObterTodos: TFDQuery;
    Panel1: TPanel;
    dxStatusBar: TdxStatusBar;
    dxBarManager1Bar6: TdxBar;
    cxBarEditItem1: TcxBarEditItem;
    cxBarEditItem2: TcxBarEditItem;
    chkJPG: TcxBarEditItem;
    chkPDF: TcxBarEditItem;
    dxBarBtnEnviaMail: TdxBarLargeButton;
    dxBarEdit1: TdxBarEdit;
    cbxAnos: TdxBarCombo;
    qryAnos: TFDQuery;
    qryConsolidadoBancos: TFDQuery;
    dsConsolida: TDataSource;
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure dbgrd1DrawColumnCell(Sender: TObject; const Rect: TRect; DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure dxBtnImprimirClick(Sender: TObject);
    procedure dxBtnFecharClick(Sender: TObject);
    procedure dxBtnProcessarClick(Sender: TObject);
    procedure dxBarBtnEnviaMailClick(Sender: TObject);
  private
    { Private declarations }
   idOrganizacao: string;

    procedure preencheComboAno();
    procedure limpaPanel;
    procedure exibirRelatorioSaldos(dtInicial, dtFinal: TDate);
    procedure inicializarVariaveisRelatorio(dtInicial, dtFinal: TDate);
    function retornarCaminhoRelatorio: string;
    procedure alinharColsGrid(pDbGrid: TDBGrid; qtdCol: Integer);

    //usando
    procedure limpaStatusBar;
    procedure msgStatusBar(pPosicao: Integer; msg: string);

    procedure preencheComboAnos(pOrg: string);
    function obterTodosSaldosConsolidado(pIdOrganizacao: string;
      pAno: Integer): Boolean;
    function obterAnos(pIdOrganizacao: string): Boolean;
  public
    { Public declarations }
  end;

var
  frmConsolidadoBancos: TfrmConsolidadoBancos;

implementation

{$R *.dfm}

procedure TfrmConsolidadoBancos.alinharColsGrid(pDbGrid: TDBGrid; qtdCol: Integer);
var
  I: Integer;
begin
  //alinha apenas os titulos das colunas
  //recebe o DBGRID e a quantidade de colunas que ele possu


  for I := 0 to qtdCol - 1 do
  begin
    pDbGrid.Columns[I].Title.alignment := taCenter;
  end;

end;

procedure TfrmConsolidadoBancos.exibirRelatorioSaldos(dtInicial, dtFinal: TDate);
begin

  frxRelatorioSaldos.Clear;

  if not (frxRelatorioSaldos.LoadFromFile(retornarCaminhoRelatorio)) then
  begin

  end
  else
  begin
    inicializarVariaveisRelatorio(dtInicial, dtFinal);
    frxRelatorioSaldos.OldStyleProgress := True;
    frxRelatorioSaldos.ShowProgress := True;
    frxRelatorioSaldos.ShowReport;
  end;
end;

function TfrmConsolidadoBancos.retornarCaminhoRelatorio: string;
begin
  Result := uUtil.TPathRelatorio.getRelatorioSaldos;
end;

procedure TfrmConsolidadoBancos.inicializarVariaveisRelatorio(dtInicial, dtFinal: TDate);
begin

  with frxRelatorioSaldos.Variables do
  begin

    if dmOrganizacao.qryDadosEmpresa.RecordCount < 1 then
    begin

      dmOrganizacao.carregarDadosOrganizacaoFNC(idOrganizacao);

    end;

    Variables['strRazaoSocial'] := QuotedStr(dmOrganizacao.qryDadosEmpresa.FieldByName('RAZAO_SOCIAL').AsString);
    Variables['strCNPJ'] := QuotedStr(dmOrganizacao.qryDadosEmpresa.FieldByName('CNPJ').AsString);
    Variables['strEndereco'] := QuotedStr(dmOrganizacao.qryDadosEmpresa.FieldByName('ENDERECO').AsString);
    Variables['strCEP'] := QuotedStr(dmOrganizacao.qryDadosEmpresa.FieldByName('CEP').AsString);
    Variables['strCidade'] := QuotedStr(dmOrganizacao.qryDadosEmpresa.FieldByName('CIDADE').AsString);
    Variables['strUF'] := QuotedStr(dmOrganizacao.qryDadosEmpresa.FieldByName('UF').AsString);
    Variables['strPeriodo'] := QuotedStr(FormatDateTime('yyyy', pDataInicial));
  end;

end;


procedure TfrmConsolidadoBancos.dbgrd1DrawColumnCell(Sender: TObject; const Rect: TRect; DataCol: Integer; Column: TColumn; State: TGridDrawState);
var
  pValor: Currency;
begin

  pValor := qryConsolidadoBancos.FieldByName('JANEIRO').AsCurrency;

  if ((qryConsolidadoBancos.RecNo mod 2) = 0) then
  begin //se for linha par.. printa

    dbgrd1.Canvas.Brush.Color := clSilver;
  end;

  alinharColsGrid(dbgrd1, dbgrd1.Columns.Count);

  //  navega com setas e mantem efeito de linha selecionada

  if Rect.Top = TStringGrid(dbgrd1).CellRect(0, TStringGrid(dbgrd1).Row).Top then
  begin
    dbgrd1.Canvas.FillRect(Rect);
    dbgrd1.Canvas.Font.Color := clWhite;
    dbgrd1.Canvas.Brush.Color := clHighlight;
    dbgrd1.DefaultDrawDataCell(Rect, Column.Field, State)
  end;

  dbgrd1.DefaultDrawColumnCell(Rect, DataCol, Column, State);
end;

procedure TfrmConsolidadoBancos.dsSaldoDataChange(Sender: TObject; Field: TField);
begin
  {Remove barra horizontal do DBgrid1}
  ShowScrollBar(dbgrd1.handle, SB_VERT, False);

end;

procedure TfrmConsolidadoBancos.dxBarBtnEnviaMailClick(Sender: TObject);
var
  assunto, arquivo: string;
//frxPDFExport : TfrxPDFExport;
begin
 //frxPDFExport := TfrxPDFExport.Create(Self);
  Inc(qtdRel);
 //só enviar um tipo.
  chkPDF.EditValue := True;

  if chkJPG.EditValue then
  begin
    chkPDF.EditValue := False;
  end;

  pDataInicial := dxBarDataInicial.Date;
  pDataFinal := dxBarDataFinal.Date;

  if (qryConsolidadoBancos.RecordCount > 0) then
  begin

    {
    if chkJPG.EditValue then begin
      //enviar por PDF
      arquivo := 'SSD_CONTAS_' + FormatDateTime('dd.MM.yyyy_hh.mm.ss', now)  + '.JPG';

      uutil.GravarImagemJPGFormulario(arquivo, Self);


    end;   }


    if chkPDF.EditValue then
    begin

      frxRelatorioSaldos.Clear;
      frxRelatorioSaldos.LoadFromFile(retornarCaminhoRelatorio);
      //enviar por PDF
      arquivo := 'SD_CONTAS_' + FormatDateTime('dd.MM.yyyy_hh.mm', now) + '_' + IntToStr(qtdRel) + '.PDF';

      dmConexao.frxPDFExport := TfrxPDFexport.Create(Self);

      dmConexao.frxPDFExport.FileName := arquivo;
      dmconexao.frxPDFExport.DefaultPath := GetCurrentDir + '\rel\bancos\';
      dmconexao.frxPDFExport.ShowDialog := False;
      dmconexao.frxPDFExport.ShowProgress := False;
      dmconexao.frxPDFExport.OverwritePrompt := True;

      inicializarVariaveisRelatorio(Now, Now);

      frxRelatorioSaldos.OldStyleProgress := True;
      frxRelatorioSaldos.ShowProgress := True;
      frxRelatorioSaldos.PrepareReport(True);

      frxRelatorioSaldos.Export(dmconexao.frxPDFExport);

      if Assigned(dmConexao.frxPDFExport) then
      begin
        dmConexao.frxPDFExport.Free;
      end;

      assunto := arquivo;

      arquivo := GetCurrentDir + '\rel\bancos\' + arquivo;

    end;

    if chkJPG.EditValue then
    begin

      frxRelatorioSaldos.Clear;
      frxRelatorioSaldos.LoadFromFile(retornarCaminhoRelatorio);
      //enviar por PDF
      arquivo := 'SD_CONTAS_' + FormatDateTime('dd.MM.yyyy_hh.mm', now) + '_' + IntToStr(qtdRel) + '.JPG';

      dmConexao.frxJPEGExport := TfrxJPEGExport.Create(Self);

      dmConexao.frxJPEGExport.FileName := arquivo;
      dmconexao.frxJPEGExport.DefaultPath := GetCurrentDir + '\rel\bancos\';
      dmconexao.frxJPEGExport.ShowDialog := False;
      dmconexao.frxJPEGExport.ShowProgress := False;
      dmconexao.frxJPEGExport.OverwritePrompt := True;
      dmconexao.frxJPEGExport.SeparateFiles := False;

      inicializarVariaveisRelatorio(Now, Now);

      frxRelatorioSaldos.OldStyleProgress := True;
      frxRelatorioSaldos.ShowProgress := True;
      frxRelatorioSaldos.PrepareReport(True);

      frxRelatorioSaldos.Export(dmconexao.frxJPEGExport);

      if Assigned(dmConexao.frxJPEGExport) then
      begin
        dmConexao.frxJPEGExport.Free;
      end;

      assunto := arquivo;

      arquivo := GetCurrentDir + '\rel\bancos\' + arquivo;

    end;

    frmEnviaMail := TfrmEnviaMail.Create(Self, arquivo, assunto);
    frmEnviaMail.ShowModal;
    FreeAndNil(frmEnviaMail);

  end;

  msgStatusBar(1, 'Relatório sendo impresso.');

end;

procedure TfrmConsolidadoBancos.dxBarCbxContasChange(Sender: TObject);
begin

  if dxBarCbxContas.ItemIndex > (-2) then
  begin //a partir de TODAS
    dxBtnProcessar.Enabled := True;
  end;

end;

procedure TfrmConsolidadoBancos.dxBarDataFinalChange(Sender: TObject);
begin

  dxBtnProcessar.Enabled := True;

end;

procedure TfrmConsolidadoBancos.dxBarDataInicialChange(Sender: TObject);
begin
  dxBtnProcessar.Enabled := True;
end;

procedure TfrmConsolidadoBancos.dxBtnFecharClick(Sender: TObject);
begin
  PostMessage(Self.Handle, WM_CLOSE, 0, 0);
end;

procedure TfrmConsolidadoBancos.dxBtnImprimirClick(Sender: TObject);
begin
  pDataInicial := dxBarDataInicial.Date;
  pDataFinal := dxBarDataFinal.Date;

  if (qryConsolidadoBancos.RecordCount > 0) then
  begin
    exibirRelatorioSaldos(pDataInicial, pDataFinal);
    limpaPanel;
  end
  else
  begin
    dxBtnImprimir.Enabled := false;
    PempecMsg.MsgWarning('Não existem dados para imprimir.');
  end;

  msgStatusBar(1, 'Relatório sendo impresso.');

end;

procedure TfrmConsolidadoBancos.dxBtnProcessarClick(Sender: TObject);
var
  pAno, aux: Integer;
  idConta, itemPedido: string;


begin

  pAno := StrToInt(cbxAnos.Text);

  dbgrd1.DataSource.DataSet.Close;
  msgStatusBar(1, 'Processando...');

  //passou uma conta especifica
  if pAno > 0 then
  begin

     dxBarBtnEnviaMail.Enabled :=False;
     dxBtnImprimir.Enabled := False;

    if obterTodosSaldosConsolidado(idOrganizacao, pAno) then begin

      dxBtnImprimir.Enabled := True;
      dxBarBtnEnviaMail.Enabled :=True;

    end;



  end;

  FreeAndNil(frmMostraProcesso);
  msgStatusBar(1, 'Saldos processados. Prontos para impressão.');

end;

procedure TfrmConsolidadoBancos.FormClose(Sender: TObject; var Action: TCloseAction);
begin

  Action := caFree; // sempre como ultimo comando

end;

procedure TfrmConsolidadoBancos.FormCreate(Sender: TObject);
begin

  dmConexao.conectarBanco;

  if not uUtil.Empty(TOrgAtual.getId) then
  begin
    idOrganizacao := TOrgAtual.getId;
  end;

  if not Assigned(dmOrganizacao) then
  begin
    dmOrganizacao := TdmOrganizacao.Create(self);
  end;

  limpaPanel;



end;



procedure TfrmConsolidadoBancos.preencheComboAno;
var
  dataHoje: TDateTime;
  anoAtual: Integer;
  I: Integer;
begin
  dataHoje := uutil.getDataServer;
  anoAtual := YearOf(now); // StrToInt(FormatDateTime('yyyy', dataHoje));

end;

procedure TfrmConsolidadoBancos.limpaPanel;
begin

idOrganizacao := uutil.TOrgAtual.getId;

  preencheComboAnos(idOrganizacao);

  dxBtnImprimir.Enabled := False;
  limpaStatusBar;

  dxBtnProcessar.Enabled := True;

  chkPDF.EditValue := True;
  chkJPG.EditValue := False;


end;

function TfrmConsolidadoBancos.obterAnos(pIdOrganizacao: string): Boolean;
begin

  try
    qryAnos.Connection := dmConexao.Conn;
    qryAnos.Close;
    qryAnos.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
    qryAnos.Open;

  except
    raise(Exception).Create('Problemas ao consultar dados das contas débitos ');
  end;

  Result := not qryAnos.IsEmpty;

end;


function TfrmConsolidadoBancos.obterTodosSaldosConsolidado(pIdOrganizacao: string; pAno: Integer): Boolean;
var
  sucesso: Boolean;

begin
  sucesso := False;
  pAno := StrToInt(cbxAnos.Text);

  if pAno < 1900 then
  begin
    pAno := YearOf(now);
  end;

  qryConsolidadoBancos.Close;
  qryConsolidadoBancos.Connection := dmConexao.conn;
  qryConsolidadoBancos.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
  qryConsolidadoBancos.ParamByName('PANO').AsInteger := pAno;
  qryConsolidadoBancos.Open();

  sucesso := not qryConsolidadoBancos.IsEmpty;

  Result := sucesso;

end;


procedure TfrmConsolidadoBancos.limpaStatusBar;
begin
  dxStatusBar.Panels[0].Text := 'Status ';
  dxStatusBar.Panels[1].Text := 'Escolha uma conta bancária caso deseje ou clique em processar para todas! ';
end;

procedure TfrmConsolidadoBancos.msgStatusBar(pPosicao: Integer; msg: string);
begin
  dxStatusBar.Panels[pPosicao].Text := msg;
  Application.ProcessMessages;
end;

procedure TfrmConsolidadoBancos.preencheComboAnos(pOrg: string);
var
  menorAno, maiorAno: Integer;
begin

  menorAno := YearOf(now);
  maiorAno := YearOf(now);

  if obterAnos(idOrganizacao) then
  begin
    menorAno := qryAnos.FieldByName('MENOR').AsInteger;
    maiorAno := qryAnos.FieldByName('MAIOR').AsInteger;
  end;


  while menorAno <= maiorAno do
  begin

    cbxAnos.Items.Add(IntToStr(menorAno));
    Inc(menorAno);

  end;

  cbxAnos.ItemIndex := cbxAnos.Items.Count - 1;

end;

end.

