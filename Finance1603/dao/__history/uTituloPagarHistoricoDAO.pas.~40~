unit uTituloPagarHistoricoDAO;

interface
 {
CREATE TABLE TITULO_PAGAR_HISTORICO (
    ID_TITULO_PAGAR_HISTORICO  VARCHAR(36) NOT NULL,
    ID_ORGANIZACAO             VARCHAR(36) NOT NULL,
    ID_HISTORICO               VARCHAR(36) NOT NULL,
    ID_TITULO_PAGAR            VARCHAR(36) NOT NULL,
    VALOR                      NUMERIC(10,2) NOT NULL,
    ID_CONTA_CONTABIL_DEBITO   VARCHAR(36)
); }



uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, FireDAC.Stan.Intf, FireDAC.Stan.Option,
   FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, uTituloPagarHistoricoModel,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB, uHistoricoModel, uHistoricoDAO,
  uContaContabilModel, uContaContabilDAO, udmConexao, uUtil, FireDAC.Comp.DataSet, FireDAC.Comp.Client;


  const
   pTable : string = 'TITULO_PAGAR_HISTORICO';
type
 TTituloPagarHistoricoDAO = class
  private
    class function getModel (query :TFDQuery) : TTituloPagarHistoricoModel;
  public
    {métodos CRUD (Create, Read, Update e Delete)
    para manipulação dos dados}
    class function Insert(value :TTituloPagarHistoricoModel): Boolean;
    class function Update(value :TTituloPagarHistoricoModel): Boolean;

    class function obterPorID(value :TTituloPagarHistoricoModel): TTituloPagarHistoricoModel;
    class function Delete(value :TTituloPagarHistoricoModel): Boolean;
    class function DeletePorIDTP(pIDTP :TTituloPagarHistoricoModel): Boolean;

  end;

implementation

class function TTituloPagarHistoricoDAO.Delete(value: TTituloPagarHistoricoModel): Boolean;
var
qryDelete : TFDQuery;
xResp :Boolean;
begin

xResp := False;
 dmConexao.conectarBanco;
 try

  qryDelete := TFDQuery.Create(nil);
  qryDelete.Close;
  qryDelete.Connection := dmConexao.conn;
  qryDelete.SQL.Clear;
  qryDelete.SQL.Add('DELETE FROM '+pTable     );
  qryDelete.SQL.Add('WHERE ID_ORGANIZACAO = :PIDORGANIZACAO  AND  ID_'+pTable +  ' = :PID '  );
  qryDelete.ParamByName('PIDORGANIZACAO').AsString := value.FIDorganizacao;
  qryDelete.ParamByName('PID').AsString := value.FID;

  qryDelete.ExecSQL;
  xResp := True;
  dmConexao.conn.CommitRetaining;

 except
 xResp := False;
 raise Exception.Create('Erro ao tentar DELETAR ' + pTable);

 end;

  Result := xResp;
end;

class function TTituloPagarHistoricoDAO.DeletePorIDTP( pIDTP: TTituloPagarHistoricoModel): Boolean;
var
  qryDelete: TFDQuery;
  sucesso: Boolean;
begin
  sucesso := True;

  dmConexao.conectarBanco;
  qryDelete := TFDQuery.Create(nil);
  qryDelete.Close;
  qryDelete.Connection := dmConexao.conn;
  qryDelete.SQL.Clear;
  qryDelete.SQL.Add('DELETE FROM ' + pTable);
  qryDelete.SQL.Add('WHERE ID_ORGANIZACAO = :PIDORGANIZACAO  AND  ID_TITULO_PAGAR  = :PIDTP ');
  qryDelete.ParamByName('PIDORGANIZACAO').AsString := pIDTP.FIDorganizacao;
  qryDelete.ParamByName('PIDTP').AsString := pIDTP.FIDTP;

  qryDelete.ExecSQL;

  Result := sucesso;

end;


class function TTituloPagarHistoricoDAO.getModel(query: TFDQuery): TTituloPagarHistoricoModel;
var model :TTituloPagarHistoricoModel;
{contaDB   : TContaContabilModel;
historico : THistoricoModel;  }

begin
 model                         := TTituloPagarHistoricoModel.Create;
 model.FContaContabil                := TContaContabilModel.Create;
 model.FHistorico                    := THistoricoModel.Create;

  if not query.IsEmpty then begin

    try

      model.FID                     := query.FieldByName('ID_TITULO_PAGAR_HISTORICO').AsString;
      model.FIDorganizacao          := query.FieldByName('ID_ORGANIZACAO').AsString;
      model.FIDHistorico            := query.FieldByName('ID_HISTORICO').AsString;
      model.FIDContaContabilDebito  := query.FieldByName('ID_CONTA_CONTABIL_DEBITO').AsString;
      model.FIDTP                   := query.FieldByName('ID_TITULO_PAGAR').AsString;
      model.Fvalor                  := query.FieldByName('VALOR').AsCurrency;

        try


          model.FContaContabil.FID            := model.FIDContaContabilDebito;
          model.FContaContabil.FIDOrganizacao := model.FIDOrganizacao;
          model.FContaContabil                := TContaContabilDAO.obterPorID(model.FContaContabil);


        except
          raise Exception.Create('Erro ao tentar obter Conta Contabil por ' + pTable);

        end;

         try
          model.FHistorico.FID                := model.FIDHistorico;
          model.FHistorico.FIDOrganizacao     := model.FIDOrganizacao;
          model.FHistorico                    := THistoricoDAO.obterPorID(model.FHistorico);

        except
          raise Exception.Create('Erro ao tentar obter detalhes do Hitorico por ' + pTable);

        end;

    except
      raise Exception.Create('Erro ao tentar Converter ' + pTable);

    end;

  end;


   Result := model;

end;

class function TTituloPagarHistoricoDAO.Insert(value: TTituloPagarHistoricoModel): Boolean;
var
  qryInsert: TFDQuery;
  cmdDB: string;
  sucesso :Boolean;
begin
  dmConexao.conectarBanco;
  qryInsert := TFDQuery.Create(nil);


     cmdDB :=  ' INSERT INTO TITULO_PAGAR_HISTORICO '+
                ' (ID_TITULO_PAGAR_HISTORICO, ID_ORGANIZACAO, ID_HISTORICO,' +
                ' ID_TITULO_PAGAR, VALOR, ID_CONTA_CONTABIL_DEBITO) '+
                ' VALUES (:PID, :PIDORGANIZACAO,:PIDHIST, '+
                ' :PIDTP, :PVALOR, :PIDCONTA )' ;

    qryInsert.Close;
    qryInsert.Connection := dmConexao.conn;
    qryInsert.SQL.Clear;
    qryInsert.SQL.Add(cmdDB);
    qryInsert.ParamByName('PID').AsString             :=value.FID;
    qryInsert.ParamByName('PIDORGANIZACAO').AsString  := value.FIDorganizacao;
    qryInsert.ParamByName('PIDHIST').AsString         := value.FIDHistorico;
    qryInsert.ParamByName('PIDTP').AsString           := value.FIDTP;
    qryInsert.ParamByName('PIDCONTA').AsString        := value.FIDContaContabilDebito;
    qryInsert.ParamByName('PVALOR').AsCurrency        := value.Fvalor;


      qryInsert.ExecSQL;

    Result := sucesso;


  end;

   Result := System.True;


  finally
    if Assigned(qryInsert) then
    begin
      FreeAndNil(qryInsert);
    end;
  end;

          }

end;

class function TTituloPagarHistoricoDAO.obterPorID( value: TTituloPagarHistoricoModel): TTituloPagarHistoricoModel;
var
qryPesquisa : TFDQuery;
cmdSql:string;
model: TTituloPagarHistoricoModel;
begin
  dmConexao.conectarBanco;
  qryPesquisa := TFDQuery.Create(nil);
  model := TTituloPagarHistoricoModel.Create;

  try

    try

      qryPesquisa.Close;
      qryPesquisa.Connection := dmConexao.conn;
      qryPesquisa.SQL.Clear;
      qryPesquisa.SQL.Add('SELECT * ');
      qryPesquisa.SQL.Add('FROM ' + pTable);
      qryPesquisa.SQL.Add('WHERE (ID_ORGANIZACAO = :PIDORGANIZACAO ) AND  ID_' + pTable + ' = :PID ');

      qryPesquisa.ParamByName('PID').AsString := value.FID;
      qryPesquisa.ParamByName('PIDORGANIZACAO').AsString := value.FIDorganizacao;

      qryPesquisa.Open;

      if not qryPesquisa.IsEmpty then
       begin
        model := getModel(qryPesquisa);
      end;

    except
      raise Exception.Create('Erro ao tentar obter ' + pTable);

    end;

    Result := model;

  finally
    if Assigned(qryPesquisa) then
    begin
      FreeAndNil(qryPesquisa);
    end;
  end;

end;
class function TTituloPagarHistoricoDAO.Update(value: TTituloPagarHistoricoModel): Boolean;
var
  qry : TFDQuery;
  cmdDB: string;
begin
  dmConexao.conectarBanco;
  qry := TFDQuery.Create(nil);

    try

     cmdDB := ' UPDATE TITULO_PAGAR_HISTORICO '+
              ' SET ID_HISTORICO    = :PIDHIST, '+
              ' ID_TITULO_PAGAR     = :PIDTP, '+
              ' VALOR = :PVALOR, '+
              ' ID_CONTA_CONTABIL_DEBITO = :PIDCONTA '+
              ' WHERE (ID_TITULO_PAGAR_HISTORICO = :PID) AND (ID_ORGANIZACAO = :PIDORGANIZACAO) ';

    qry.Close;
    qry.Connection := dmConexao.conn;
    qry.SQL.Clear;
    qry.SQL.Add(cmdDB);
    qry.ParamByName('PID').AsString             := value.FID;
    qry.ParamByName('PIDORGANIZACAO').AsString  := value.FIDorganizacao;
    qry.ParamByName('PIDHIST').AsString         := value.FIDHistorico;
    qry.ParamByName('PIDTP').AsString           := value.FIDTP;
    qry.ParamByName('PIDCONTA').AsString        := value.FIDContaContabilDebito;
    qry.ParamByName('PVALOR').AsCurrency        := value.Fvalor;


     qry.ExecSQL;



   Result := System.True;


  finally
    if Assigned(qry) then
    begin
      FreeAndNil(qry);
    end;
  end;



end;

end.

