ORGANIZACAO
FLAG_HST SMALLINT




    if qryObterPlanoContas.Locate('CONTA',pConta,[]) Then begin
      Result  := True;


                               


   TLancamentoDebitoModel(TListaLancamentoDebito(listaCBT.ListaDebito[0]).FListaLancamentoDebito.Items[I]).Historico


TLancamentoCreditoModel(TListaLancamentoDebito(listaCBT.ListaDebito[0]).FListaLancamentoDebito.Items[0]).ContaDebito;

Count = TListaLancamentoDebito(listaCBT.ListaDebito[0]).FListaLancamentoDebito.Count






TLancamentoDebitoModel(TListaLancamentoDebito(plista.ListaDebito[0]).FListaLancamentoDebito.Items[I]).ContaDebito;
    TLancamentoDebitoModel(TListaLancamentoDebito(plista.ListaDebito[0]).FListaLancamentoDebito.Items[I]).CodReduz;



CREATE TABLE LANC_EXPORT_PEND (
    ID              VARCHAR(36) NOT NULL,
    ID_ORGANIZACAO  VARCHAR(36) NOT NULL,
    VALOR           NUMERIC(10,2) NOT NULL,
    TIPO            VARCHAR(100),
    IDENTIFICACAO   VARCHAR(100),
    PENDENCIA       VARCHAR(1000),
    DATA_REGISTRO   DATE
);


ALTER TABLE LANC_EXPORT_PEND ADD CONSTRAINT PK_LANC_EXPORT_PEND PRIMARY KEY (ID, ID_ORGANIZACAO);



 //limpando as pendencas existentes
  try

  qryLimparPendentes.Close ;
  if not qryLimparPendentes.Connection.Connected then
  begin
    qryLimparPendentes.Connection := dmConexao.Conn;
  end;

  qryLimparPendentes.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
   qryLimparPendentes.ExecSQL;

  except
    raise;

  end;


function TdmMegaContabil.existContaContabil(pIdEmpresa: Integer; pConta: string): Boolean;
var
  found: Boolean;
  cta: string;
begin

  found := False;

  if obterPlanoContas(pIdEmpresa) then
  begin
    qryObterPlanoContas.First;
    while not qryObterPlanoContas.Eof do
    begin
      cta := qryObterPlanoContas.FieldByName('CONTA').AsString;

      if cta = pConta then
      begin
        found := True;
      end;

    end;

    Result := found;
  end;
end;
