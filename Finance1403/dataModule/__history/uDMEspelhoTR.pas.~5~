unit uDMEspelhoTR;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,Vcl.Forms,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, uUtil,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB, udmConexao, uDMOrganizacao,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, frxClass, frxDBSet, frxExportImage,
  frxExportRTF, frxExportCSV, frxExportPDF, frxExportBaseDialog;

type
  TdmEspelhoTR = class(TDataModule)
    frxDBTitulos: TfrxDBDataset;
    frxTRROVDB: TfrxDBDataset;
    frxTPPROVCR: TfrxDBDataset;
    qryTPPROVCR: TFDQuery;
    qryTRPROVDB: TFDQuery;
    dsDetalhesTR: TDataSource;
    frxDBTPQuitados: TfrxDBDataset;
    frxDBTRBCaixa: TfrxDBDataset;
    frxTRBAcrescimo: TfrxDBDataset;
    frxTRBDeducao: TfrxDBDataset;
    frxDBTRB: TfrxDBDataset;
    frxTRBCheque: TfrxDBDataset;
    qryTPQuitados: TFDQuery;
    qryObterTRBaixaPorTitulo: TFDQuery;
    qryBaixaTRCaixa: TFDQuery;
    qryBaixaTRCheque: TFDQuery;
    qryTRBAcrescimos: TFDQuery;
    qryTRBDeducao: TFDQuery;
    qryTPBHistorico: TFDQuery;
    frxTPBHistorico: TfrxDBDataset;
    frxEspelhoTR: TfrxReport;
    qryObterTRBBanco: TFDQuery;
    qrySacado: TFDQuery;
    qryObterPorNumeroDocumento: TFDQuery;
    frxSacado: TfrxDBDataset;
    qryRateioCentroCustos: TFDQuery;
    frxCentroCustos: TfrxDBDataset;
    qryLoteRecebto: TFDQuery;
    frxLoteRcbto: TfrxDBDataset;
    frxTRBBanco: TfrxDBDataset;
    frxPDFExport1: TfrxPDFExport;
    frxCSVExport1: TfrxCSVExport;
    procedure dsDetalhesTRDataChange(Sender: TObject; Field: TField);
  private
    { Private declarations }

   dtInicial, dtFinal : TDate;

  public
    { Public declarations }
    procedure inicializarDM(Sender: TObject);
    function retornarCaminhoRelatorio: string;
    procedure inicializarVariaveisRelatorio(dtInicial, dtFinal: TDate);
    procedure exibirRelatorio(pDataInicial, pDataFinal: TDate);

    //TP PRovisionado
    function obterPorNumeroDocumento(pIdOrganizacao, pNumDoc: string): Boolean;
    function obterTPProvCR(pIdOrganizacao,pIdTituloPagar : string ): Boolean;
    function obterTPProvDB(pIdOrganizacao,pIdTituloPagar : string ): Boolean;
    function obterRateioCentroCusto(pIdOrganizacao,pIdTituloPagar : string ): Boolean;

    //TP BAIXA
    function obterTPQuitados(pIdOrganizacao, pIdStatus: string; pDataInicial, pDataFinal: TDate): Boolean;
    function obterTPBaixaPorTitulo(pIdOrganizacao, pIdtituloPagar: String): Boolean;
    function obterTPBAC(pIdOrganizacao, pIdTPB : String): Boolean;
    function obterTPBDE(pIdOrganizacao, pIdTPB : String): Boolean;

    function obterTPBCaixa(pIdOrganizacao, pIdTPB: String): Boolean;
    function obterTPBCheque(pIdOrganizacao, pIdTPB  : String): Boolean;
    function obterTPBBanco(pIdOrganizacao, pIdTPB  : String): Boolean;

    function obterTPBHistorico(pIdorganizacao, tituloPagarQuitado : string): Boolean;
    function obterCdentePorID(pIdorganizacao, idCedente : string): Boolean;
    function obterLotePagamento(pIdorganizacao, idLote : string): Boolean;

  end;

var
  dmEspelhoTR: TdmEspelhoTR;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}


function TdmEspelhoTR.retornarCaminhoRelatorio: string;
begin
   Result := uutil.TPathRelatorio.getContasReceberEspelho;
end;

procedure  TdmEspelhoTR.inicializarDM(Sender: TObject);
begin

  if not(Assigned(dmOrganizacao)) then
  begin
    dmOrganizacao := TdmOrganizacao.Create(Self);
  end ;

end;

procedure TdmEspelhoTR.inicializarVariaveisRelatorio(dtInicial, dtFinal: TDate);
begin

  with   frxEspelhoTP.Variables do
  begin

    Variables['strRazaoSocial'] :=
      QuotedStr(dmOrganizacao.qryDadosEmpresa.FieldByName('RAZAO_SOCIAL')
      .AsString);
    Variables['strCNPJ'] :=
      QuotedStr(dmOrganizacao.qryDadosEmpresa.FieldByName('CNPJ').AsString);
    Variables['strEndereco'] :=
      QuotedStr(dmOrganizacao.qryDadosEmpresa.FieldByName('ENDERECO').AsString);
    Variables['strCEP'] :=
      QuotedStr(dmOrganizacao.qryDadosEmpresa.FieldByName('CEP').AsString);
    Variables['strCidade'] :=
      QuotedStr(dmOrganizacao.qryDadosEmpresa.FieldByName('CIDADE').AsString);
    Variables['strUF'] :=
      QuotedStr(dmOrganizacao.qryDadosEmpresa.FieldByName('UF').AsString);
    Variables['strPeriodo'] :=QuotedStr( ' de  ' + DateToStr(dtInicial) + '  até  ' + DateToStr(dtFinal));



    // Variables['strTipo'] := QuotedStr(tipo); // muda a depender do lancamento

  end;

end;


procedure TdmEspelhoTR.dsDetalhesTRDataChange(Sender: TObject; Field: TField);
var
pIdOrganizacao, pIdCedente, pIdTituloPagar,pIdLote, pIdTPB :string;
begin
//pegar os dados dos detalhe
 pIdOrganizacao := qryObterPorNumeroDocumento.FieldByName('ID_ORGANIZACAO').AsString;
 pIdCedente     := qryObterPorNumeroDocumento.FieldByName('ID_CEDENTE').AsString;
 pIdTituloPagar := qryObterPorNumeroDocumento.FieldByName('ID_TITULO_PAGAR').AsString;
 dtInicial := qryObterPorNumeroDocumento.FieldByName('DATA_EMISSAO').AsDateTime;
 dtFinal   := dtInicial;


 obterTPProvDB(pIdOrganizacao,pIdTituloPagar);
 obterCdentePorID(pIdOrganizacao, pIdCedente);
 obterRateioCentroCusto(pIdOrganizacao,pIdTituloPagar);

  if obterTPBaixaPorTitulo(pIdOrganizacao,pIdTituloPagar) then begin
      pIdTPB  := qryObterTPBaixaPorTitulo.FieldByName('ID_TITULO_PAGAR_BAIXA').AsString;
      pIdLote := qryObterTPBaixaPorTitulo.FieldByName('ID_LOTE_PAGAMENTO').AsString;
      obterTPBAC(pIdOrganizacao,pIdTPB);
      obterTPBDE(pIdOrganizacao,pIdTPB);
      obterLotePagamento(pIdOrganizacao,pIdLote);
      obterTPBCaixa(pIdOrganizacao,pIdTPB);
      obterTPBCheque(pIdOrganizacao,pIdTPB);
      obterTPBBanco(pIdOrganizacao,pIdTPB);

  end;



end;

Procedure TdmEspelhoTR.exibirRelatorio(pDataInicial, pDataFinal: TDate);
begin

         frxEspelhoTP.Clear;
  if not(frxEspelhoTP.LoadFromFile(retornarCaminhoRelatorio)) then
  begin
    ///dasa
  end
  else
  begin
    inicializarVariaveisRelatorio(dtInicial, dtFinal); //verficar essa data
    frxEspelhoTP.OldStyleProgress := True;
    frxEspelhoTP.ShowProgress := True;
    frxEspelhoTP.ShowReport;

    end;
end;


function  TdmEspelhoTR.obterTPProvCR(pIdOrganizacao,pIdTituloPagar : string ): Boolean;
begin
  Result := false;

  qryTPPROVCR.Close;
  qryTPPROVCR.Connection := dmConexao.Conn;
  qryTPPROVCR.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
  qryTPPROVCR.ParamByName('PIDTITULOPAGAR').AsString := pIdTituloPagar;
  qryTPPROVCR.Open;

  Result := not qryTPPROVCR.IsEmpty;

end;



function TdmEspelhoTR.obterTPProvDB(pIdOrganizacao,pIdTituloPagar : string ): Boolean;
begin
  Result := false;

  qryTPPROVDB.Close;
  qryTPPROVDB.Connection := dmConexao.Conn;
  qryTPPROVDB.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
  qryTPPROVDB.ParamByName('PIDTITULOPAGAR').AsString := pIdTituloPagar;
  qryTPPROVDB.Open;


  Result := not qryTPPROVDB.IsEmpty;

end;



function TdmEspelhoTR.obterTPQuitados(pIdOrganizacao, pIdStatus: string; pDataInicial, pDataFinal: TDate): Boolean;
var auxSql :string;
begin
  Result := false;

  qryTPQuitados.Close;
  qryTPQuitados.Connection := dmConexao.Conn;
  qryTPQuitados.ParamByName('pIdOrganizacao').AsString := pIdOrganizacao;
  qryTPQuitados.ParamByName('pIdStatus').AsString := pIdStatus;
  qryTPQuitados.ParamByName('pDataInicial').AsDate := pDataInicial;
  qryTPQuitados.ParamByName('pDataFinal').AsDate := pDataFinal;
//  auxSql := QuotedStr(qry1.SQL.Text); SÓ PARA TESTE
  qryTPQuitados.Open;



  Result := not qryTPQuitados.IsEmpty;

end;

function TdmEspelhoTR.obterTPBCaixa(pIdOrganizacao, pIdTPB: String): Boolean;
begin
  Result := false;
  //obtem os TP pago pela tesouraria
  try
    qryBaixaTPCaixa.Close;
    qryBaixaTPCaixa.Connection := dmConexao.Conn;
    qryBaixaTPCaixa.ParamByName('PIDORGANIZACAO').AsString :=  pIdOrganizacao;
    qryBaixaTPCaixa.ParamByName('PIDTPB').AsString := pIdTPB;
    qryBaixaTPCaixa.Open;
  except
  raise(Exception).Create('Erro ao tentar consultar baixa tesouraria ' );
  end;

  Result := not qryBaixaTPCaixa.IsEmpty;

end;

function TdmEspelhoTR.obterTPBCheque(pIdOrganizacao, pIdTPB  : String): Boolean;
begin

  Result := false;
  try
    qryBaixaTPCheque.Close;
    qryBaixaTPCheque.Connection := dmConexao.Conn;
    qryBaixaTPCheque.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
    qryBaixaTPCheque.ParamByName('PIDTPB').AsString :=pIdTPB;
    qryBaixaTPCheque.Open;
  except
  raise(Exception).Create('Erro ao tentar consultar o Fornecedor ' );
  end;

  Result := not qryBaixaTPCheque.IsEmpty;
end;

function TdmEspelhoTR.obterTPBBanco(pIdOrganizacao, pIdTPB  : String): Boolean;

begin
  Result := false;

  TRY
    qryObterTPBBanco.Close;
    qryObterTPBBanco.Connection := dmConexao.Conn;
    qryObterTPBBanco.ParamByName('PIDORGANIZACAO').AsString :=   pIdOrganizacao;
    qryObterTPBBanco.ParamByName('PIDTPB').AsString := pIdTPB;
    qryObterTPBBanco.Open;
  except
  raise(Exception).Create('Erro ao tentar consultar o Fornecedor ' );
  end;

  Result := not qryObterTPBBanco.IsEmpty;

end;

function TdmEspelhoTR.obterCdentePorID(pIdorganizacao,
  idCedente: string): Boolean;
begin
try

      qryCedente.Close;
      qryCedente.Connection := dmConexao.Conn;
      qryCedente.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
      qryCedente.ParamByName('PIDCEDENTE').AsString := idCedente;

      qryCedente.Open;

  except
  raise(Exception).Create('Erro ao tentar consultar o Fornecedor ' );
  end;

  Result := not qryCedente.IsEmpty;
end;

function TdmEspelhoTR.obterLotePagamento(pIdorganizacao,
  idLote: string): Boolean;
begin
 try
      qryLotePagamento.Close;
      qryLotePagamento.Connection := dmConexao.Conn;
      qryLotePagamento.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
      qryLotePagamento.ParamByName('PIDLOTE').AsString := idLote;

      qryLotePagamento.Open;

 except

  raise(Exception).Create('Erro ao tentar consultar Lote Pagamento ' );

 end;

  Result := not qryLotePagamento.IsEmpty;


end;

function TdmEspelhoTR.obterPorNumeroDocumento(pIdOrganizacao,
  pNumDoc: string): Boolean;
begin
 try
      qryObterPorNumeroDocumento.Close;
      qryObterPorNumeroDocumento.Connection := dmConexao.Conn;
      qryObterPorNumeroDocumento.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
      qryObterPorNumeroDocumento.ParamByName('PNUMDOC').AsString := pNumDoc;

      qryObterPorNumeroDocumento.Open;
      dtInicial := qryObterPorNumeroDocumento.FieldByName('DATA_EMISSAO').AsDateTime;
      dtFinal := dtInicial;


  except

  raise(Exception).Create('Erro ao tentar consultar o TP DOC ' + pNumDoc );


  end;

  Result := not qryObterPorNumeroDocumento.IsEmpty;
end;

function TdmEspelhoTR.obterRateioCentroCusto(pIdOrganizacao,
  pIdTituloPagar: string): Boolean;
begin
 try

      qryRateioCentroCustos.Close;
      qryRateioCentroCustos.Connection := dmConexao.Conn;
      qryRateioCentroCustos.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
      qryRateioCentroCustos.ParamByName('PIDTITULOPAGAR').AsString := pIdTituloPagar;

      qryRateioCentroCustos.Open;

  except

  raise(Exception).Create('Erro ao tentar consultar o rateio de custos ....');


  end;

  Result := not qryRateioCentroCustos.IsEmpty;
end;

function TdmEspelhoTR.obterTPBAC(pIdOrganizacao, pIdTPB : String): Boolean;
begin

  Result := false;
  try
      qryTPBAcrescimos.Close;
      qryTPBAcrescimos.Connection := dmConexao.Conn;
      qryTPBAcrescimos.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
      qryTPBAcrescimos.ParamByName('PIDTPB').AsString := pIdTPB;
      qryTPBAcrescimos.Open;
  except

  raise(Exception).Create('Erro ao tentar obter os acréscimos ....');


  end;
  Result := not qryTPBAcrescimos.IsEmpty;
end;




function TdmEspelhoTR.obterTPBaixaPorTitulo(pIdOrganizacao, pIdtituloPagar: String): Boolean;
begin
 Result := false;

 try
      qryObterTPBaixaPorTitulo.Close;
      qryObterTPBaixaPorTitulo.Connection := dmConexao.Conn;
      qryObterTPBaixaPorTitulo.ParamByName('PIDORGANIZACAO').AsString :=  pIdOrganizacao;
      qryObterTPBaixaPorTitulo.ParamByName('PIDTITULOPAGAR').AsString :=  pIdtituloPagar;
      qryObterTPBaixaPorTitulo.Open;
 except

  raise(Exception).Create('Erro ao tentar obter baixa de titulos  ....');

 end;

  Result := not qryObterTPBaixaPorTitulo.IsEmpty;

end;


function TdmEspelhoTR.obterTPBDE(pIdOrganizacao, pIdTPB
  : String): Boolean;
begin

  Result := false;
  try
      qryTPBDeducao.Close;
      qryTPBDeducao.Connection := dmConexao.Conn;
      qryTPBDeducao.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
      qryTPBDeducao.ParamByName('PIDTPB').AsString :=
        pIdTPB;
      qryTPBDeducao.Open;
  except

  raise(Exception).Create('Erro ao tentar obter deduções  ....');

 end;

  Result := not qryTPBDeducao.IsEmpty;
end;


function TdmEspelhoTR.obterTPBHistorico(pIdorganizacao, tituloPagarQuitado :string): Boolean;
begin
  Result := false;

  if not qryTPBHistorico.Connection.Connected then
  begin
    qryTPBHistorico.Connection := dmConexao.Conn;
  end;

  qryTPBHistorico.Close;
  qryTPBHistorico.ParamByName('PIDTP').AsString := tituloPagarQuitado;
  qryTPBHistorico.ParamByName('pIdOrganizacao').AsString := pIdorganizacao;

  qryTPBHistorico.Open();

  Result := not qryTPBHistorico.IsEmpty;

end;



end.
