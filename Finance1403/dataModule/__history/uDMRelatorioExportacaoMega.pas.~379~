unit uDMRelatorioExportacaoMega;

interface

uses
  System.SysUtils, ShellApi, System.Classes, frxClass, frxDBSet,
  Winapi.Windows, Winapi.Messages, Vcl.Forms, System.Variants,
  uDMTituloPagarHistoricoConsulta, uDMTituloReceberHistoricoConsulta,
  udmConexao, uDMOrganizacao, FireDAC.Stan.Intf, uDMContaBancariaDebitoConsulta,
  uDMExportaFinanceTR, uDMTituloReceberCentroCustoConsulta, uDMExportaFinanceTP,
  uDMTituloPagarCentroCustoConsulta, uDMTesourariaDebitoConsulta,
  uDMTitulorReceberBaixaCheque, Uutil,
  FireDAC.Stan.Option, FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS,
  FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt,
  Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client, frxExportCSV,
  uDMExportaFinanceTPB,
  frxExportPDF, uDMTituloPagarBaixaDeducao, UDMTituloPagarBaixaAcrescimo,UDMTituloReceberBaixaAcrescimo,
  UDMTituloReceberBaixaDeducao, frxExportBaseDialog;

type
  TdmRelExportacaoMega = class(TDataModule)
    frxRelatorioExportacaoMega: TfrxReport;
    frxDBTitulos: TfrxDBDataset;
    frxTPROVDB: TfrxDBDataset;
    frxDBTRProv: TfrxDBDataset;
    frxTRPROVDB: TfrxDBDataset;
    frxPDFExport1: TfrxPDFExport;
    frxCSVExport1: TfrxCSVExport;
    frxDBTPQuitados: TfrxDBDataset;
    frxTPBBanco: TfrxDBDataset;
    frxDBTPBCaixa: TfrxDBDataset;
    frxTPBAcrescimo: TfrxDBDataset;
    frxTPBDeducao: TfrxDBDataset;
    frxDBTRQuitados: TfrxDBDataset;
    frxDBTRBaixa: TfrxDBDataset;
    frxDBTRQuitadoBanco: TfrxDBDataset;
    frxDBTRBCheque: TfrxDBDataset;
    frxDBTRBCaixa: TfrxDBDataset;
    frxDBTPB: TfrxDBDataset;
    frxTPBCheque: TfrxDBDataset;
    frxTRBDeducao: TfrxDBDataset;
    frxDBTRBAcrescimo: TfrxDBDataset;
    frxDBCBT: TfrxDBDataset;
    frxDBCBTC: TfrxDBDataset;
    frxDBCBTD: TfrxDBDataset;
    frxBCOCAIXA: TfrxDBDataset;
    frxdbdtstDBTRF_DO_Banco: TfrxDBDataset;
    frxTRFCaixaBanco: TfrxDBDataset;
    frxdbdtstDBTRF_TESBanco: TfrxDBDataset;
    qryTPPROVBASE: TFDQuery;
    frxTPPROVCR: TfrxDBDataset;
    qryTPPROVCR: TFDQuery;
    qryTPPROVDB: TFDQuery;
    dsDetalhesTP: TDataSource;
    qryTPQuitados: TFDQuery;
    dsDetalhesTPB: TDataSource;
    qryObterTPBaixaPorTitulo: TFDQuery;
    qryBaixaTPCaixa: TFDQuery;
    qryBaixaTPCheque: TFDQuery;
    qryObterTPBBancoOLD: TFDQuery;
    qryTPBAcrescimos: TFDQuery;
    qryTPBDeducao: TFDQuery;
    qryTPBHistorico: TFDQuery;
    frxTPBHistorico: TfrxDBDataset;
    qryObterTPBBanco: TFDQuery;
    qry1: TFDQuery;
    qryTRPROVBASE: TFDQuery;
    qryTRPROVCR: TFDQuery;
    qryTRPROVDB: TFDQuery;
    dsDetalhesTR: TDataSource;
    frxTRPROVCR: TfrxDBDataset;
    qryObterTRBaixaPorTitulo: TFDQuery;
    qryTRQuitados: TFDQuery;
    qryTRBAcrescimos: TFDQuery;
    qryTRBDeducao: TFDQuery;
    qryBaixaTRCaixa: TFDQuery;
    qryBaixaTRCheque: TFDQuery;
    qryBaixaTRBanco: TFDQuery;
    dsDetalhesTRB: TDataSource;
    qryTRFCAIXABANCO: TFDQuery;
    qryCBTBASE: TFDQuery;
    qryCBTCR: TFDQuery;
    qryCBTDB: TFDQuery;
    dsDetalhesCBT: TDataSource;
    qryBancoCaixa: TFDQuery;
    qryobterTPBContasDebito: TFDQuery;
    qryObterIDTPB: TFDQuery;
    qryObterRegistroProvisao: TFDQuery;
    procedure dsTPPROVCRDataChange(Sender: TObject; Field: TField);
    procedure dsDetalhesTPDataChange(Sender: TObject; Field: TField);
    procedure dsDetalhesTPBDataChange(Sender: TObject; Field: TField);
    procedure dsDetalhesTRDataChange(Sender: TObject; Field: TField);
    procedure dsDetalhesTRBDataChange(Sender: TObject; Field: TField);
    procedure dsDetalhesCBTDataChange(Sender: TObject; Field: TField);
  private


    { Private declarations }

  public
    { Public declarations }
    procedure inicializarDM(Sender: TObject);
    function retornarCaminhoRelatorio: string;
    procedure inicializarVariaveisRelatorio(dtInicial, dtFinal: TDate);
//    procedure exibirRelatorioExportacao;
    procedure exibirRelatorioExportacao(dtInicial, dtFinal: TDate);
//TP PRovisionado
    function obterTPProBase(pIdOrganizacao : string; pDataInicial, pDataFinal: TDate ): Boolean;
    function obterTPProvCR(pIdOrganizacao,pRegistroProvisao : string ): Boolean;
    function obterTPProvDB(pIdOrganizacao,pRegistroProvisao : string ): Boolean;
    function obterRegistroProvisao(pIdOrganizacao, pIdtituloPagar: String): string;

//TP BAIXA
    function obterTPQuitados(pIdOrganizacao, pIdStatus: string; pDataInicial, pDataFinal: TDate): Boolean;
    function obterTPBaixaPorTitulo(pRegistroProvisao,pIdOrganizacao, pIdtituloPagar: String): Boolean;
    function obterTPBCaixa(pIdOrganizacao, pIdTPB: String): Boolean;
    function obterTPBCheque(pIdOrganizacao, pIdTPB  : String): Boolean;
    function obterTPBBanco(pIdOrganizacao, pIdTPB  : String): Boolean;
    function obterTPBAC(pIdOrganizacao, pIdTPB : String): Boolean;
    function obterTPBDE(pIdOrganizacao, pIdTPB : String): Boolean;
    function obterTPBHistorico(pIdorganizacao, tituloPagarQuitado : string): Boolean;
    function obterIDTPB(pIdOrganizacao, pIdtituloPagar: String): string;


//TR Provisionado

function obterTRProBase(pIdOrganizacao : string; pDataInicial, pDataFinal: TDate ): Boolean;
function obterTRProvCR(pIdOrganizacao,pRegistroProvisao : string ): Boolean;
function obterTRProvDB(pIdOrganizacao,pRegistroProvisao : string ): Boolean;

 //TR BAIXA

       function obterTRQuitados(pIdOrganizacao, pIdStatus: String; pDataInicial, pDataFinal: TDateTime): Boolean;
       function obterTRPBaixaPorTitulo(pIdOrganizacao, pIdtituloReceber : String): Boolean;
       function obterTRBAC(pIdOrganizacao, pIdTRB: String): Boolean;
       function obterTRBDE(pIdOrganizacao, pIdTRB: String): Boolean;
       function obterTRBCaixa(pIdOrganizacao,pIdTRB: String): Boolean;
       function obterTRBCheque(pIdOrganizacao, pIdTRB : String): Boolean;
       function obterTRBBanco(pIdOrganizacao, pIdTituloReceber: String): Boolean;



//Trasnferencias da tesouraria para o banco
    function obterTRFCaixaBanco(pIdOrganizacao: String; dataInicial, dataFinal: TDate): Boolean;
// Transferencia do banco para a tesouraria
function obterTRFBancoCaixa(pIdOrganizacao: String;  dtDataInicial, dtDataFinal: TDate): Boolean;
//transferencias entre contas da mesma titularidade
function obterCBT(pIdOrganizacao: String;  dtDataInicial, dtDataFinal: TDate): Boolean;
function obterCBTCR(pIdOrganizacao, PIDCONTABANCARIACREDITO  : String): Boolean;
function obterCBTDB(pIdOrganizacao, PIDCONTABANCARIADEBITO  : String): Boolean;




  end;

var
  dmRelExportacaoMega: TdmRelExportacaoMega;

implementation

{ %CLASSGROUP 'Vcl.Controls.TControl' }

uses uDMExportaFinanceTRB, uDMTesourariaCreditoConsulta,
  uDMContaBancariaCreditoConsulta, uDMTituloPagarBaixaCheque,
  uDMTituloReceberBaixaFP, uDMContaBancariaTransferencia;

{$R *.dfm}

function TdmRelExportacaoMega.retornarCaminhoRelatorio: string;
begin
     Result := uUtil.TPathRelatorio.getRelatorioExportacao;
end;

procedure TdmRelExportacaoMega.inicializarDM(Sender: TObject);
begin



  if not(Assigned(dmConexao)) then
  begin
    dmConexao := TdmConexao.Create(Self);
  end
  else
  begin
    dmConexao.conectarBanco;
  end;


   if not (Assigned(dmOrganizacao)) then
  begin
    dmOrganizacao := TdmOrganizacao.Create(Self);
  end;

end;

procedure TdmRelExportacaoMega.inicializarVariaveisRelatorio(dtInicial, dtFinal: TDate);
begin

  with frxRelatorioExportacaoMega.Variables do
  begin

    Variables['strRazaoSocial'] :=
      QuotedStr(dmOrganizacao.qryDadosEmpresa.FieldByName('RAZAO_SOCIAL')
      .AsString);
    Variables['strCNPJ'] :=
      QuotedStr(dmOrganizacao.qryDadosEmpresa.FieldByName('CNPJ').AsString);
    Variables['strEndereco'] :=
      QuotedStr(dmOrganizacao.qryDadosEmpresa.FieldByName('ENDERECO').AsString);
    Variables['strCEP'] :=
      QuotedStr(dmOrganizacao.qryDadosEmpresa.FieldByName('CEP').AsString);
    Variables['strCidade'] :=
      QuotedStr(dmOrganizacao.qryDadosEmpresa.FieldByName('CIDADE').AsString);
    Variables['strUF'] :=
      QuotedStr(dmOrganizacao.qryDadosEmpresa.FieldByName('UF').AsString);
    Variables['strPeriodo'] :=QuotedStr( ' de  ' + DateToStr(dtInicial) + '  até  ' + DateToStr(dtFinal));



    // Variables['strTipo'] := QuotedStr(tipo); // muda a depender do lancamento

  end;

end;

procedure TdmRelExportacaoMega.dsDetalhesCBTDataChange(Sender: TObject;
  Field: TField);
  var
  cbtCR, idOrganizacao, cbtDB: String;
begin
idOrganizacao := qryCBTBASE.FieldByName('ID_ORGANIZACAO').AsString;
 cbtCR        := qryCBTBASE.FieldByName('ID_CONTA_BANCARIA_CREDITO').AsString;
 cbtDB        := qryCBTBASE.FieldByName('ID_CONTA_BANCARIA_DEBITO').AsString;

 //obter a conta bancaria credito
 obterCBTCR(idOrganizacao, cbtCR);
 //obter a conta bancaria debito
 obterCBTDB(idOrganizacao, cbtDB);

end;

procedure TdmRelExportacaoMega.dsDetalhesTPBDataChange(Sender: TObject;
  Field: TField);
var
 nDoc,  pRegistroProvisao, tituloPagarQuitado, idOrganizacao, tituloTPB: String;
 aux :Integer;

begin
  tituloPagarQuitado := qryTPQuitados.FieldByName('ID_TITULO_PAGAR').AsString;
  idOrganizacao      := qryTPQuitados.FieldByName('ID_ORGANIZACAO').AsString;
    tituloTPB := obterIDTPB(idOrganizacao, tituloPagarQuitado);

   pRegistroProvisao := obterRegistroProvisao(idOrganizacao, tituloPagarQuitado);
   obterTPBHistorico(idOrganizacao, tituloPagarQuitado);
   obterTPBaixaPorTitulo(pRegistroProvisao, idOrganizacao, tituloPagarQuitado);

      // baixa POR TEsouraria
  obterTPBCaixa(idOrganizacao, tituloTPB);
      //obter por Cheque
  obterTPBCheque(idOrganizacao, tituloTPB);
      // obter baixa por Banco
  obterTPBBanco(idOrganizacao, tituloTPB);
      // dts acrescimo
  obterTPBAC(idOrganizacao, tituloTPB);
      // dts deducao
  obterTPBDE(idOrganizacao, tituloTPB);

end;



function TdmRelExportacaoMega.obterRegistroProvisao(pIdOrganizacao, pIdtituloPagar: String): string;
var
registro : string;
begin
  registro :='';
 Result := '';
 dmConexao.conectarBanco;

  qryObterRegistroProvisao.Close;
  qryObterRegistroProvisao.Connection := dmConexao.Conn;

  qryObterRegistroProvisao.ParamByName('PIDORGANIZACAO').AsString :=  pIdOrganizacao;
  qryObterRegistroProvisao.ParamByName('pIdtituloPagar').AsString :=  pIdtituloPagar;
  qryObterRegistroProvisao.Open;

   if not qryObterRegistroProvisao.IsEmpty then
          registro := qryObterRegistroProvisao.FieldByName('REGISTRO_PROVISAO').AsString;


  Result := registro;

end;



function TdmRelExportacaoMega.obterIDTPB(pIdOrganizacao, pIdtituloPagar: String): string;
var
idTPB : string;
begin
  idTPB :='';
 Result := '';
 dmConexao.conectarBanco;

  qryObterIDTPB.Close;
  qryObterIDTPB.Connection := dmConexao.Conn;

  qryObterIDTPB.ParamByName('PIDORGANIZACAO').AsString :=  pIdOrganizacao;
  qryObterIDTPB.ParamByName('pIdtituloPagar').AsString :=  pIdtituloPagar;
  qryObterIDTPB.Open;

   if not qryObterIDTPB.IsEmpty then
          idTPB := qryObterIDTPB.FieldByName('ID_TITULO_PAGAR_BAIXA').AsString;


  Result := idTPB;

end;




function TdmRelExportacaoMega.obterTPBaixaPorTitulo(pRegistroProvisao, pIdOrganizacao, pIdtituloPagar: String): Boolean;
var
 cmdProvisao,   cmd : string;
begin
  Result := false;
 //se pIdtituloPagar foi provisionado conta débito fica em id_conta_contabil_credito
 // se pIdtituloPagar NAO foi provisionado a conta débito fica no rateio historico


 //se o titulo FOI PROVISIONADO

 cmdProvisao :=' SELECT TPB.id_organizacao, '+
       ' TPB.id_titulo_pagar_baixa,   '+
       ' TPB.id_titulo_pagar,         '+
       ' TPB.id_centro_custo,         '+
       ' TPB.valor_pago as VALOR,              '+
       ' TPB.tipo_baixa,              '+
       ' TP.DATA_EMISSAO,             '+
       ' TP.DATA_PAGAMENTO,           '+
       ' TP.NUMERO_DOCUMENTO,         '+
       ' TP.REGISTRO_PROVISAO,        '+
       ' TP.DESCRICAO,                '+
       ' TP.PARCELA,                  '+
       ' TP.VALOR_NOMINAL as VALOR_TP,   '+
       ' C.NOME,                      '+
       ' H.CODIGO AS HST_COD,         '+
       ' H.DESCRICAO as dsc_hist,     '+
       ' H.DESCRICAO_REDUZIDA,        '+
       ' CCD.DESCRICAO AS DSC_CDD,    '+
       ' CCD.CONTA AS CONTA_DB,       '+
       ' CCD.CODREDUZ AS COD_REDUZ_DB '+

' FROM TITULO_PAGAR_BAIXA TPB         '+

' LEFT OUTER JOIN titulo_pagar TP ON (TP.ID_TITULO_PAGAR = TPB.ID_TITULO_PAGAR) '+
' LEFT OUTER JOIN CEDENTE C ON (C.ID_CEDENTE = TP.ID_CEDENTE) AND (C.ID_ORGANIZACAO = TP.ID_ORGANIZACAO) '+
' LEFT OUTER JOIN HISTORICO H ON (H.ID_HISTORICO = TP.ID_HISTORICO) AND (H.ID_ORGANIZACAO = TP.ID_ORGANIZACAO) '+
' LEFT OUTER JOIN CONTA_CONTABIL CCD ON (CCD.ID_CONTA_CONTABIL = TP.ID_CONTA_CONTABIL_CREDITO ) AND (CCD.ID_ORGANIZACAO = TP.ID_ORGANIZACAO) '+

' WHERE (TPB.ID_ORGANIZACAO = :PIDORGANIZACAO) AND  '+
      ' (TPB.id_titulo_pagar =:pIdtituloPagar) AND  '+
      ' (TP.REGISTRO_PROVISAO IS NOT NULL) AND '+
      ' (TPB.ID_LOTE_CONTABIL IS NULL)              '+

' ORDER BY TP.DATA_PAGAMENTO ASC, TP.VALOR_NOMINAL DESC; ';


    if Uutil.Empty(pRegistroProvisao) then begin // se tem registro provisao indica que o TP foi provisinando

      //A ccd FICA NO HISTORICO

      cmd :=' SELECT TPB.id_organizacao, '+
       ' TPB.id_titulo_pagar_baixa,   '+
       ' TPB.id_titulo_pagar,         '+
       ' TPB.id_centro_custo,         '+
       ' TPB.valor_pago as VALOR,              '+
       ' TPB.tipo_baixa,              '+
       ' TP.DATA_EMISSAO,             '+
       ' TP.DATA_PAGAMENTO,           '+
       ' TP.NUMERO_DOCUMENTO,         '+
       ' TP.REGISTRO_PROVISAO,        '+
       ' TP.DESCRICAO,                '+
       ' TP.PARCELA,                  '+
       ' TP.VALOR_NOMINAL as VALOR_TP,   '+
       ' C.NOME,                      '+
       ' H.CODIGO AS HST_COD,         '+
       ' H.DESCRICAO AS DSC_HIST,     '+
       ' H.DESCRICAO_REDUZIDA,        '+
       ' CCD.DESCRICAO AS DSC_CDD,    '+
       ' CCD.CONTA AS CONTA_DB,       '+
       ' CCD.CODREDUZ AS COD_REDUZ_DB,'+
        QuotedStr('TPB')+ ' AS TIPO  '+

      ' FROM TITULO_PAGAR_BAIXA TPB         '+

      ' LEFT OUTER JOIN titulo_pagar TP ON (TP.ID_TITULO_PAGAR = TPB.ID_TITULO_PAGAR) AND (TP.ID_ORGANIZACAO = TPB.ID_ORGANIZACAO) '+
      ' LEFT OUTER JOIN CEDENTE C ON (C.ID_CEDENTE = TP.ID_CEDENTE) AND (C.ID_ORGANIZACAO = TPB.ID_ORGANIZACAO) '+
      ' LEFT OUTER JOIN HISTORICO H ON (H.ID_HISTORICO = TP.ID_HISTORICO) AND (H.ID_ORGANIZACAO = TPB.ID_ORGANIZACAO) '+
      ' LEFT OUTER JOIN CONTA_CONTABIL CCD ON (CCD.ID_CONTA_CONTABIL = H.ID_CONTA_CONTABIL ) AND (CCD.ID_ORGANIZACAO = TPB.ID_ORGANIZACAO) '+

      ' WHERE (TPB.ID_ORGANIZACAO = :PIDORGANIZACAO) AND  '+
            '(TPB.id_titulo_pagar = :pIdtituloPagar) AND  '+
            '(TP.REGISTRO_PROVISAO IS NULL) AND '+
            '(TPB.ID_LOTE_CONTABIL IS NULL)              '+

      ' ORDER BY TP.DATA_PAGAMENTO ASC, TP.VALOR_NOMINAL DESC; ';

    end;




  qryObterTPBaixaPorTitulo.Close;
  qryObterTPBaixaPorTitulo.Connection := dmConexao.Conn;
  qryObterTPBaixaPorTitulo.SQL.Clear;
  qryObterTPBaixaPorTitulo.SQL.Add(cmdProvisao);
  qryObterTPBaixaPorTitulo.ParamByName('PIDORGANIZACAO').AsString :=  pIdOrganizacao;
  qryObterTPBaixaPorTitulo.ParamByName('pIdtituloPagar').AsString :=  pIdtituloPagar;
  qryObterTPBaixaPorTitulo.Open;

  Result := not qryObterTPBaixaPorTitulo.IsEmpty;

end;




procedure TdmRelExportacaoMega.dsDetalhesTRBDataChange(Sender: TObject;
  Field: TField);
var
  tituloReceberQuitado, idOrganizacao, tituloTRPB: String;
begin
  tituloReceberQuitado := qryTRQuitados.FieldByName('ID_TITULO_RECEBER').AsString;
  idOrganizacao := qryTRQuitados.FieldByName('ID_ORGANIZACAO').AsString;


   // obter a baixa
  obterTRPBaixaPorTitulo(idOrganizacao, tituloReceberQuitado);
  tituloTRPB := qryObterTRBaixaPorTitulo.FieldByName('ID_TITULO_RECEBER_BAIXA').AsString;
  // dts do historico
//  obterTPBHistorico(idOrganizacao,tituloPagarQuitado);
  // baixa POR TEsouraria
  obterTRBCaixa(idOrganizacao, tituloTRPB);
  //obter por Cheque
  obterTRBCheque(idOrganizacao, tituloTRPB);
  // obter baixa por Banco
  obterTRBBanco(idOrganizacao, tituloReceberQuitado);
  // dts acrescimo
  obterTRBAC(idOrganizacao, tituloTRPB);
  // dts deducao
  obterTRBDE(idOrganizacao, tituloTRPB);
end;

procedure TdmRelExportacaoMega.dsDetalhesTRDataChange(Sender: TObject;
  Field: TField);
 var
  registroProvisao,idTitulo, idOrg: String;

begin

//detalhes do TITULO RECEBER PROV

    registroProvisao := qryTRPROVBASE.FieldByName('REGISTRO_PROVISAO').AsString;
    idOrg := qryTRPROVBASE.FieldByName('ID_ORGANIZACAO').AsString;
   //Obtendo os dados da conta debito
    obterTRProvDB(idOrg,registroProvisao);
    //Obtendo os dados da conta credito
    obterTRProvCR(idOrg,registroProvisao);

end;

procedure TdmRelExportacaoMega.dsTPPROVCRDataChange(Sender: TObject;
  Field: TField);
var
  registroProvisao, idOrg: String;
begin

//detalhes do TITULO A PAGAR PROV
   registroProvisao := qryTPPROVBASE.FieldByName('REGISTRO_PROVISAO').AsString;
   idOrg := qryTPPROVBASE.FieldByName('ID_ORGANIZACAO').AsString;
   //Obtendo os dados da conta credito
    obterTPProvCR(idOrg,registroProvisao);
    //Obtendo os dados da conta debito
    obterTPProvDB(idOrg,registroProvisao);

end;

procedure TdmRelExportacaoMega.dsDetalhesTPDataChange(Sender: TObject;
  Field: TField);
  var
  registroProvisao,idTitulo, idOrg: String;

begin
    registroProvisao := qryTPPROVBASE.FieldByName('REGISTRO_PROVISAO').AsString;
    idOrg := qryTPPROVBASE.FieldByName('ID_ORGANIZACAO').AsString;
   //Obtendo os dados da conta debito
    obterTPProvDB(idOrg,registroProvisao);
    //Obtendo os dados da conta CREDITO
    obterTPProvCR(idOrg,registroProvisao);


end;

procedure TdmRelExportacaoMega.exibirRelatorioExportacao ( dtInicial, dtFinal: TDate);
begin

  frxRelatorioExportacaoMega.Clear;
  if not(frxRelatorioExportacaoMega.LoadFromFile(retornarCaminhoRelatorio)) then
  begin

  end
  else
  begin
    inicializarVariaveisRelatorio(dtInicial, dtFinal);
    frxRelatorioExportacaoMega.OldStyleProgress := True;
    frxRelatorioExportacaoMega.ShowProgress := True;
    frxRelatorioExportacaoMega.ShowReport;
  end;
end;


function TdmRelExportacaoMega.obterTPProvCR(pIdOrganizacao,pRegistroProvisao : string ): Boolean;
begin
  Result := false;
  dmConexao.conectarBanco;

  qryTPPROVCR.Close;
  qryTPPROVCR.Connection := dmConexao.Conn;
  qryTPPROVCR.ParamByName('pIdOrganizacao').AsString := pIdOrganizacao;
  qryTPPROVCR.ParamByName('pregistro').AsString := pRegistroProvisao;
  qryTPPROVCR.Open;

  Result := not qryTPPROVCR.IsEmpty;

end;



function TdmRelExportacaoMega.obterTPProvDB(pIdOrganizacao,pRegistroProvisao : string ): Boolean;
begin
   Result := false;
   dmConexao.conectarBanco;

  qryTPPROVDB.Close;
  qryTPPROVDB.Connection := dmConexao.Conn;
  qryTPPROVDB.ParamByName('pIdOrganizacao').AsString := pIdOrganizacao;
  qryTPPROVDB.ParamByName('pregistro').AsString := pRegistroProvisao;
  qryTPPROVDB.Open;

  Result := not qryTPPROVDB.IsEmpty;

end;


function TdmRelExportacaoMega.obterTPProBase(pIdOrganizacao : string; pDataInicial, pDataFinal: TDate ): Boolean;
var
aux :Integer;
begin
  Result := false;

 dmConexao.conectarBanco;

  qryTPPROVBASE.Close;
  qryTPPROVBASE.Connection := dmConexao.Conn;
  qryTPPROVBASE.ParamByName('pIdOrganizacao').AsString := pIdOrganizacao;
  qryTPPROVBASE.ParamByName('pDataInicial').AsDate := pDataInicial;
  qryTPPROVBASE.ParamByName('pDataFinal').AsDate := pDataFinal;
  qryTPPROVBASE.Open;


  Result := not qryTPPROVBASE.IsEmpty;

end;

function TdmRelExportacaoMega.obterTPQuitados(pIdOrganizacao, pIdStatus: string; pDataInicial, pDataFinal: TDate): Boolean;
var auxSql :string;
begin
  Result := false;
  dmConexao.conectarBanco;

  qryTPQuitados.Close;
  qryTPQuitados.Connection := dmConexao.Conn;
  qryTPQuitados.ParamByName('pIdOrganizacao').AsString := pIdOrganizacao;
 // qryTPQuitados.ParamByName('pIdStatus').AsString := pIdStatus; A QRY VAI TRAZER QUITADO E PARCIAL
  qryTPQuitados.ParamByName('pDataInicial').AsDate := pDataInicial;
  qryTPQuitados.ParamByName('pDataFinal').AsDate := pDataFinal;
//  auxSql := QuotedStr(qry1.SQL.Text); SÓ PARA TESTE
  qryTPQuitados.Open;



  Result := not qryTPQuitados.IsEmpty;

end;

function TdmRelExportacaoMega.obterTPBCaixa(pIdOrganizacao, pIdTPB: String): Boolean;
begin
  Result := false;
  //obtem os TP pago pela tesouraria

 dmConexao.conectarBanco;


  qryBaixaTPCaixa.Close;
  qryBaixaTPCaixa.Connection := dmConexao.Conn;
  qryBaixaTPCaixa.ParamByName('PIDORGANIZACAO').AsString :=
    pIdOrganizacao;
  qryBaixaTPCaixa.ParamByName('PIDTITULOPAGARBAIXA').AsString :=
    pIdTPB;
  qryBaixaTPCaixa.Open;

  Result := not qryBaixaTPCaixa.IsEmpty;

end;

function TdmRelExportacaoMega.obterTPBCheque(pIdOrganizacao, pIdTPB  : String): Boolean;
begin

  Result := false;

 dmConexao.conectarBanco;

  qryBaixaTPCheque.Close;
  qryBaixaTPCheque.Connection := dmConexao.Conn;
  qryBaixaTPCheque.ParamByName('pIdOrganizacao').AsString := pIdOrganizacao;
  qryBaixaTPCheque.ParamByName('PIDTITULOPAGARBAIXA').AsString :=pIdTPB;
  qryBaixaTPCheque.Open;

  Result := not qryBaixaTPCheque.IsEmpty;
end;

function TdmRelExportacaoMega.obterTPBBanco(pIdOrganizacao, pIdTPB  : String): Boolean;

begin
  Result := false;

  dmConexao.conectarBanco;

  qryObterTPBBanco.Close;
  qryObterTPBBanco.Connection := dmConexao.Conn;
  qryObterTPBBanco.ParamByName('pIdOrganizacao').AsString :=   pIdOrganizacao;
  qryObterTPBBanco.ParamByName('PIDTPB').AsString := pIdTPB;

  qryObterTPBBanco.Open;

  Result := not qryObterTPBBanco.IsEmpty;

end;

function TdmRelExportacaoMega.obterTPBAC(pIdOrganizacao, pIdTPB : String): Boolean;
begin

  Result := false;

  dmConexao.conectarBanco;

  qryTPBAcrescimos.Close;
  qryTPBAcrescimos.Connection := dmConexao.Conn;
  qryTPBAcrescimos.ParamByName('pIdOrganizacao').AsString := pIdOrganizacao;
  qryTPBAcrescimos.ParamByName('pIdTitutloPagarBaixa').AsString :=
    pIdTPB;
  qryTPBAcrescimos.Open;

  Result := not qryTPBAcrescimos.IsEmpty;
end;




function TdmRelExportacaoMega.obterTPBDE(pIdOrganizacao, pIdTPB
  : String): Boolean;
begin

  Result := false;

 dmConexao.conectarBanco;

  qryTPBDeducao.Close;
  qryTPBDeducao.Connection := dmConexao.Conn;
  qryTPBDeducao.ParamByName('pIdOrganizacao').AsString := pIdOrganizacao;
  qryTPBDeducao.ParamByName('pIdTitutloPagarBaixa').AsString :=
    pIdTPB;
  qryTPBDeducao.Open;

  Result := not qryTPBDeducao.IsEmpty;
end;


function TdmRelExportacaoMega.obterTPBHistorico(pIdorganizacao, tituloPagarQuitado :string): Boolean;
begin
  Result := false;
  dmConexao.conectarBanco;

  qryTPBHistorico.Close;
  qryTPBHistorico.Connection := dmConexao.Conn;
  qryTPBHistorico.ParamByName('PIDTP').AsString := tituloPagarQuitado;
  qryTPBHistorico.ParamByName('pIdOrganizacao').AsString := pIdorganizacao;

  qryTPBHistorico.Open();

  Result := not qryTPBHistorico.IsEmpty;

end;



//TITULOS A RECEBER PROVISIONADOS

function TdmRelExportacaoMega.obterTRProvCR(pIdOrganizacao,pRegistroProvisao : string ): Boolean;
begin
  Result := false;

   dmConexao.conectarBanco;

  qryTRPROVCR.Close;
  qryTRPROVCR.Connection := dmConexao.Conn;
  qryTRPROVCR.ParamByName('pIdOrganizacao').AsString := pIdOrganizacao;
  qryTRPROVCR.ParamByName('pregistro').AsString := pRegistroProvisao;
  qryTRPROVCR.Open;

  Result := not qryTRPROVCR.IsEmpty;

end;



function TdmRelExportacaoMega.obterTRProvDB(pIdOrganizacao,pRegistroProvisao : string ): Boolean;
begin
  Result := false;
   dmConexao.conectarBanco;

  qryTRPROVDB.Close;
  qryTRPROVDB.Connection := dmConexao.Conn;
  qryTRPROVDB.ParamByName('pIdOrganizacao').AsString := pIdOrganizacao;
  qryTRPROVDB.ParamByName('pregistro').AsString := pRegistroProvisao;
  qryTRPROVDB.Open;

  Result := not qryTRPROVDB.IsEmpty;

end;


function TdmRelExportacaoMega.obterTRProBase(pIdOrganizacao : string; pDataInicial, pDataFinal: TDate ): Boolean;
var
aux :Integer;
begin
  Result := false;

 dmConexao.conectarBanco;

  qryTRPROVBASE.Close;
  qryTRPROVBASE.Connection := dmConexao.Conn;
  qryTRPROVBASE.ParamByName('pIdOrganizacao').AsString := pIdOrganizacao;
  qryTRPROVBASE.ParamByName('pDataInicial').AsDate := pDataInicial;
  qryTRPROVBASE.ParamByName('pDataFinal').AsDate := pDataFinal;
  qryTRPROVBASE.Open;


  Result := not qryTRPROVBASE.IsEmpty;

end;


//TITULOS A RECEBER QUITADOS

function TdmRelExportacaoMega.obterTRQuitados(pIdOrganizacao, pIdStatus: String; pDataInicial, pDataFinal: TDateTime): Boolean;
begin

  Result := false;
  dmConexao.conectarBanco;

  qryTRQuitados.Close;
  qryTRQuitados.Connection := dmConexao.Conn;
  qryTRQuitados.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
  qryTRQuitados.ParamByName('pIdStatus').AsString := pIdStatus;
  qryTRQuitados.ParamByName('pDataInicial').AsDate := pDataInicial;
  qryTRQuitados.ParamByName('pDataFinal').AsDate := pDataFinal;
  qryTRQuitados.Open;
  qryTRQuitados.Last;


  Result := not qryTRQuitados.IsEmpty;
end;


function TdmRelExportacaoMega.obterTRPBaixaPorTitulo(pIdOrganizacao, pIdtituloReceber : String): Boolean;
begin
  Result := false;
   dmConexao.conectarBanco;


  qryObterTRBaixaPorTitulo.Close;
  qryObterTRBaixaPorTitulo.Connection := dmConexao.Conn;
  qryObterTRBaixaPorTitulo.ParamByName('PIDORGANIZACAO').AsString :=
    pIdOrganizacao;
  qryObterTRBaixaPorTitulo.ParamByName('pIdtituloReceber').AsString :=
    pIdtituloReceber;
  qryObterTRBaixaPorTitulo.Open;

  Result := not qryObterTRBaixaPorTitulo.IsEmpty;

end;


function TdmRelExportacaoMega.obterTRBAC(pIdOrganizacao, pIdTRB : String): Boolean;
begin

  Result := false;

 dmConexao.conectarBanco;


  qryTRBAcrescimos.Close;
  qryTRBAcrescimos.Connection := dmConexao.Conn;

  qryTRBAcrescimos.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
  qryTRBAcrescimos.ParamByName('PIDTITULORECEBERBAIXA').AsString :=pIdTRB;
  qryTRBAcrescimos.Open;

  Result := not qryTRBAcrescimos.IsEmpty;
end;



function TdmRelExportacaoMega.obterTRBDE(pIdOrganizacao, pIdTRB: String): Boolean;
begin

  Result := false;

  dmConexao.conectarBanco;

  qryTRBDeducao.Close;
  qryTRBDeducao.Connection := dmConexao.Conn;

  qryTRBDeducao.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
  qryTRBDeducao.ParamByName('PIDTITULORECEBERBAIXA').AsString :=pIdTRB;
  qryTRBDeducao.Open;

  Result := not qryTRBDeducao.IsEmpty;
end;


function TdmRelExportacaoMega.obterTRBCaixa(pIdOrganizacao,pIdTRB: String): Boolean;
begin
  Result := false;

   dmConexao.conectarBanco;

  qryBaixaTRCaixa.Close;
  qryBaixaTRCaixa.Connection := dmConexao.Conn;

  qryBaixaTRCaixa.ParamByName('PIDORGANIZACAO').AsString :=pIdOrganizacao;
  qryBaixaTRCaixa.ParamByName('PIDTITULORECEBERBAIXA').AsString :=pIdTRB;
  qryBaixaTRCaixa.Open;

  Result := not qryBaixaTRCaixa.IsEmpty;

end;


function TdmRelExportacaoMega.obterTRBCheque(pIdOrganizacao, pIdTRB : String): Boolean;
begin

  Result := false;
  dmConexao.conectarBanco;

  qryBaixaTRCheque.Close;
  qryBaixaTRCheque.Connection := dmConexao.Conn;
  qryBaixaTRCheque.ParamByName('pIdOrganizacao').AsString := pIdOrganizacao;
  qryBaixaTRCheque.ParamByName('PIDTITULORECEBERBAIXA').AsString :=pIdTRB;
  qryBaixaTRCheque.Open;

  Result := not qryBaixaTRCheque.IsEmpty;
end;


function TdmRelExportacaoMega.obterTRBBanco(pIdOrganizacao, pIdTituloReceber: String): Boolean;

begin
  Result := false;

  dmConexao.conectarBanco;

  qryBaixaTRBanco.Close;
  qryBaixaTRBanco.Connection := dmConexao.Conn;

  qryBaixaTRBanco.ParamByName('pIdOrganizacao').AsString :=  pIdOrganizacao;
  qryBaixaTRBanco.ParamByName('PIDTITULORECEBER').AsString := pIdTituloReceber;
  qryBaixaTRBanco.Open;

  Result := not qryBaixaTRBanco.IsEmpty;

end;

function TdmRelExportacaoMega.obterTRFCaixaBanco(pIdOrganizacao: String; dataInicial, dataFinal: TDate): Boolean;

begin
  Result := false;

 dmConexao.conectarBanco;

  qryTRFCAIXABANCO.Close;
  qryTRFCAIXABANCO.Connection := dmConexao.Conn;

  qryTRFCAIXABANCO.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
  qryTRFCAIXABANCO.ParamByName('DTDATAINICIAL').AsDate    := dataInicial;
  qryTRFCAIXABANCO.ParamByName('DTDATAFINAL').AsDate      := dataFinal;
  qryTRFCAIXABANCO.Open;


  Result := not qryTRFCAIXABANCO.IsEmpty;

end;

//parte das transferencias entre contas

function TdmRelExportacaoMega.obterCBT(pIdOrganizacao: String;  dtDataInicial, dtDataFinal: TDate): Boolean;
begin

  Result := false;

  dmConexao.conectarBanco;


  qryCBTBASE.Close;
  qryCBTBASE.Connection := dmConexao.Conn;

  qryCBTBASE.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
  qryCBTBASE.ParamByName('DTDATAINICIAL').AsDate := dtDataInicial;
  qryCBTBASE.ParamByName('DTDATAFINAL').AsDate := dtDataFinal;
  qryCBTBASE.Open;

  Result := not qryCBTBASE.IsEmpty;

end;


function TdmRelExportacaoMega.obterCBTCR(pIdOrganizacao, PIDCONTABANCARIACREDITO  : String): Boolean;

begin
  Result := false;
  dmConexao.conectarBanco;


  qryCBTCR.Close;
  qryCBTCR.Connection := dmConexao.Conn;
  qryCBTCR.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
  qryCBTCR.ParamByName('PIDCONTABANCARIACREDITO').AsString := PIDCONTABANCARIACREDITO;
  qryCBTCR.Open;

  Result := not qryCBTCR.IsEmpty;

end;


function TdmRelExportacaoMega.obterCBTDB(pIdOrganizacao, PIDCONTABANCARIADEBITO : String): Boolean;

begin
  Result := false;

  dmConexao.conectarBanco;

  qryCBTDB.Close;
  qryCBTDB.Connection := dmConexao.Conn;

  qryCBTDB.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
  qryCBTDB.ParamByName('PIDCONTABANCARIADEBITO').AsString := PIDCONTABANCARIADEBITO;
  qryCBTDB.Open;

  Result := not qryCBTDB.IsEmpty;

end;

//Transferencia do banco para a tesouraria
function TdmRelExportacaoMega.obterTRFBancoCaixa(pIdOrganizacao: String;  dtDataInicial, dtDataFinal: TDate): Boolean;
     var
     aux :string;
begin
  Result := false;
  dmConexao.conectarBanco;
  qryBancoCaixa.Close;
  qryBancoCaixa.Connection := dmConexao.Conn;
  qryBancoCaixa.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
  qryBancoCaixa.ParamByName('DTDATAINICIAL').AsDate    := dtDataInicial;
  qryBancoCaixa.ParamByName('DTDATAFINAL').AsDate      := dtDataFinal;
  qryBancoCaixa.Open;

  Result := not qryBancoCaixa.IsEmpty;

end;





end.
