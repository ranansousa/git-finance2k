unit uDMExportaFinanceManter;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client,udmConexao;

type
  TDataModule3 = class(TDataModule)
    qryGravarLote: TFDQuery;
  private
    { Private declarations }
     procedure inicializarDM(Sender: TObject);
    procedure freeAndNilDM(Sender: TObject);
    function gravaLoteContabil (pId,pIdOrganizacao,pLote,pStatus,pIdUsuario:string;pDataRegistro,pDataAtualizacao,pDataInicial,pDataFinal :TDateTime):Boolean;


  public
    { Public declarations }
  end;

var
  DataModule3: TDataModule3;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

{ TDataModule3 }

procedure TDataModule3.freeAndNilDM(Sender: TObject);
begin
if not(Assigned(dmConexao)) then
  begin
    dmConexao := TdmConexao.Create(Self);
  end;

  dmConexao.conectarBanco;


end;

function TDataModule3.gravaLoteContabil(pId, pIdOrganizacao, pLote, pStatus,
  pIdUsuario: string; pDataRegistro, pDataAtualizacao, pDataInicial,
  pDataFinal: TDateTime): Boolean;
  var
  comando :string;
begin
//

{
        QTD_TIT_PAG       NUMERIC(5,0),
        QTD_TIT_REC       NUMERIC(5,0),
        QTD_TIT_PAG_BX    NUMERIC(5,0),
        QTD_TIT_REC_BX    NUMERIC(5,0),
        QTD_TES_CRED      NUMERIC(5,0),
        QTD_CTA_DEB       NUMERIC(5,0),
        QTD_CTA_TRA       NUMERIC(5,0),
        QTD_CTA_CRE       NUMERIC(5,0),
        QTD_TES_DEB       NUMERIC(5,0),

}
{
   ID_LOTE_CONTABIL  VARCHAR(36) NOT NULL, //trigger faz isso
        ID_ORGANIZACAO    VARCHAR(36) NOT NULL,
        LOTE              VARCHAR(30),
        STATUS            VARCHAR(30),
        ID_USUARIO        NUMERIC(5,0),
        DATA_REGISTRO     DATE,
        DATA_ATUALIZACAO  DATE NOT NULL,
        PERIODO_INICIAL   DATE,
        PERIODO_FINAL     DATE }

        {

        INSERT INTO LOTE_CONTABIL (ID_LOTE_CONTABIL, ID_ORGANIZACAO, LOTE, STATUS, ID_USUARIO, DATA_REGISTRO, DATA_ATUALIZACAO, PERIODO_INICIAL, PERIODO_FINAL)
                   VALUES ('b93dc520-cef5-11e4-9574-e7225c7cc26c', 'imap', '20032015', 'EXPORTADO', 1, '2015-03-20', '2015-03-20', NULL, NULL);

        }

        comando := ' INSERT INTO LOTE_CONTABIL (ID_LOTE_CONTABIL, ID_ORGANIZACAO, LOTE, STATUS, ID_USUARIO, PERIODO_INICIAL, PERIODO_FINAL) '+
                   ' VALUES (:pId, :pIdOrganizacao, :pLote, :pStatus, :pIdUsuario, :pDataInicial,:pDataFinal)';

  try

    qryGravarLote.Close;
    qryGravarLote.Connection := dmConexao.Conn;
    qryGravarLote.SQL.Clear;
    qryGravarLote.SQL.Add(comando);
    qryGravarLote.ParamByName('pId').AsInteger := pId;
    qryGravarLote.ParamByName('pIdOrganizacao').AsString := pIdOrganizacao;
    qryGravarLote.ParamByName('pLote').AsString := pLote;
    qryGravarLote.ParamByName('pStatus').AsString := UpperCase(pStatus);
    qryGravarLote.ParamByName('pIdUsuario').AsString := '1' ;// pIdUsuario;
    qryGravarLote.ParamByName('pDataRegistro').AsDateTime := pDataRegistro;
    qryGravarLote.ParamByName('pDataAtualizacao').AsDateTime := pDataAtualizacao;
    qryGravarLote.ParamByName('pDataInicial').AsDateTime := pDataInicial;
    qryGravarLote.ParamByName('pDataFinal').AsDateTime := pDataFinal;

    qryGravarLote.ExecSQL;

    dmConexao.Conn.Commit;

    Result := System.True;

  except
    raise;
  end;


end;

procedure TDataModule3.inicializarDM(Sender: TObject);
begin

end;

end.
