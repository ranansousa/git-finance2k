unit uFrameContaContabil;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes,
  uContaContabilModel, udmConexao, uUtil, uContaContabilDAO,
  Vcl.Graphics, Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  FireDAC.Stan.Async, FireDAC.DApt, Data.DB, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client;

type
  TfrmContaContabil = class(TFrame)
    cbbContaContabil: TComboBox;
    lbl1: TLabel;
  private
    { Private declarations }
    pIdOrganizacao : string;
    FsListaIdCC : TStringList;
    function obterPorCodigoQuery(pIdOrganizacao,
      pCodigoReduzido: string): TContaContabilModel;

  public
    { Public declarations }

function obterTodos(pIdOrganizacao: string; var combo: TComboBox; var listaID: TStringList): boolean;
function obterLista(pIdOrganizacao: string): TFDQuery;

function obterPorCodigo(pIdOrganizacao, pCodigoReduzido: string ) : TContaContabilModel;
function obterPorID (pIdOrganizacao, pIdConta: string ) : TContaContabilModel;

  end;

implementation

{$R *.dfm}

function TfrmContaContabil.obterLista(pIdOrganizacao: string): TFDQuery;
var
lista :TFDQuery;
cmd :string;
begin

  dmConexao.conectarBanco;
  try
    cmd := ' SELECT CC.ID_CONTA_CONTABIL   ' +
           ' CC.ID_ORGANIZACAO ' +
           ' CC.DESCRICAO      ' +
           ' CC.CONTA          ' +
           ' CC.DGVER          ' +
           ' CC.CODREDUZ       ' +
           ' CC.DGREDUZ        ' +
           ' CC.INSCMF         ' +
           ' CC.TIPO           ' +
           ' CC.GRAU           ' +
           ' CC.ORDEM_DIPJ     ' +
           ' CC.RELACIONAMENTO ' +
           ' CC.NATUREZA       ' +
           ' CC.DATA_REGISTRO  ' +
           ' FROM CONTA_CONTABIL CC ' +
           ' WHERE ( CC.ID_ORGANIZACAO = :PIDORGANIZACAO )';

   lista := TFDQuery.Create(Self);
   lista.Close;
   lista.Connection := dmConexao.conn;
   lista.SQL.Clear;
   lista.SQL.Add(cmd);
   lista.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
   lista.Open;
   lista.Last;

  except
  raise Exception.Create('Erro ao obter lista de contas');

  end;

  Result := lista;

end;

function TfrmContaContabil.obterPorCodigo(pIdOrganizacao, pCodigoReduzido: string): TContaContabilModel;
var
conta :TContaContabilModel;
begin
  try
   conta := TContaContabilModel.Create;
   conta.FCodigoReduzido  := pCodigoReduzido;
   conta.FIdOrganizacao   := pIdOrganizacao;

   conta := TContaContabilDAO.obterPorID(conta);

  except
    on e: Exception do
      MessageDlg('Problemas ao obter conta por codigo reduzido', mtWarning, [mbOK], 0);
  end;


  Result := conta;
end;
function TfrmContaContabil.obterPorCodigoQuery(pIdOrganizacao,  pCodigoReduzido: string): TContaContabilModel;
var
conta :TContaContabilModel;
qryObterContaContabil :TFDQuery;
cmd :string;
begin

  dmConexao.conectarBanco;
  try
     cmd := ' SELECT CC.ID_CONTA_CONTABIL,   ' +
           ' CC.ID_ORGANIZACAO, ' +
           ' CC.DESCRICAO,      ' +
           ' CC.CONTA ,         ' +
           ' CC.DGVER,          ' +
           ' CC.CODREDUZ,       ' +
           ' CC.DGREDUZ ,       ' +
           ' CC.INSCMF ,        ' +
           ' CC.TIPO  ,         ' +
           ' CC.GRAU  ,         ' +
           ' CC.ORDEM_DIPJ,     ' +
           ' CC.RELACIONAMENTO, ' +
           ' CC.NATUREZA   ,    ' +
           ' CC.DATA_REGISTRO  ' +
           ' FROM CONTA_CONTABIL CC ' +
           ' WHERE ( CC.ID_ORGANIZACAO = :PIDORGANIZACAO ) AND (CC.CODREDUZ = :PCODIGO)';

   qryObterContaContabil := TFDQuery.Create(Self);
   qryObterContaContabil.Close;
   qryObterContaContabil.Connection := dmConexao.conn;
   qryObterContaContabil.SQL.Clear;
   qryObterContaContabil.SQL.Add(cmd);
   qryObterContaContabil.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
   qryObterContaContabil.ParamByName('PCODIGO').AsString := pCodigoReduzido;
   qryObterContaContabil.Open;

   if not qryObterContaContabil.IsEmpty then begin

   conta := TContaContabilModel.Create;

          conta.FCodigoReduzido := (qryObterContaContabil.FieldByName('CODREDUZ').AsString);
          conta.FConta := (qryObterContaContabil.FieldByName('CONTA').AsString);
          conta.FDescricao := (qryObterContaContabil.FieldByName('DESCRICAO').AsString);
          conta.FDgReduz := (qryObterContaContabil.FieldByName('DGREDUZ').AsString);
          conta.FDgVer := (qryObterContaContabil.FieldByName('DGVER').AsString);
          conta.FID := (qryObterContaContabil.FieldByName('ID_CONTA_CONTABIL').AsString);
          conta.FIdOrganizacao := (qryObterContaContabil.FieldByName('ID_ORGANIZACAO').AsString);

          conta := TContaContabilDAO.obterPorID(conta);


   end;



  except
  raise Exception.Create('Erro ao obter CC por Codigo');

  end;

  Result := conta;
end;

function TfrmContaContabil.obterPorID(pIdOrganizacao,  pIdConta: string): TContaContabilModel;
var
conta :TContaContabilModel;
qryObterContaContabil :TFDQuery;
cmd :string;
begin

  dmConexao.conectarBanco;
  try
    cmd := ' SELECT CC.ID_CONTA_CONTABIL,   ' +
           ' CC.ID_ORGANIZACAO, ' +
           ' CC.DESCRICAO,      ' +
           ' CC.CONTA ,         ' +
           ' CC.DGVER,          ' +
           ' CC.CODREDUZ,       ' +
           ' CC.DGREDUZ ,       ' +
           ' CC.INSCMF ,        ' +
           ' CC.TIPO  ,         ' +
           ' CC.GRAU  ,         ' +
           ' CC.ORDEM_DIPJ,     ' +
           ' CC.RELACIONAMENTO, ' +
           ' CC.NATUREZA   ,    ' +
           ' CC.DATA_REGISTRO  ' +
           ' FROM CONTA_CONTABIL CC ' +
           ' WHERE ( CC.ID_ORGANIZACAO = :PIDORGANIZACAO ) AND (CC.ID_CONTA_CONTABIL = :PID)';

   qryObterContaContabil := TFDQuery.Create(Self);
   qryObterContaContabil.Close;
   qryObterContaContabil.Connection := dmConexao.conn;
   qryObterContaContabil.SQL.Clear;
   qryObterContaContabil.SQL.Add(cmd);
   qryObterContaContabil.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
   qryObterContaContabil.ParamByName('PID').AsString := pIdConta;
   qryObterContaContabil.Open;

   if not qryObterContaContabil.IsEmpty then begin

          conta.FCodigoReduzido := (qryObterContaContabil.FieldByName('CODREDUZ').AsString);
          conta.FConta := (qryObterContaContabil.FieldByName('CONTA').AsString);
          conta.FDescricao := (qryObterContaContabil.FieldByName('DESCRICAO').AsString);
          conta.FDgReduz := (qryObterContaContabil.FieldByName('DGREDUZ').AsString);
          conta.FDgVer := (qryObterContaContabil.FieldByName('DGVER').AsString);
          conta.FIdContaContabil := (qryObterContaContabil.FieldByName('ID_CONTA_CONTABIL').AsString);
          conta.FIdOrganizacao := (qryObterContaContabil.FieldByName('ID_ORGANIZACAO').AsString);

   end;

    qryObterContaContabil.Close;

  except
  raise Exception.Create('Erro ao obter CC por ID');

  end;


  Result := conta;

end;

function TfrmContaContabil.obterTodos(pIdOrganizacao: string; var combo: TComboBox; var listaID: TStringList): boolean;
var
qryObterTodos :TFDQuery;
 cmd :string;
begin

   cmd := ' SELECT (CC.DESCRICAO ||'' - '' ||  CC.CODREDUZ ) AS DSC, CC.ID_CONTA_CONTABIL '+
          ' FROM CONTA_CONTABIL CC WHERE (CC.ID_ORGANIZACAO = :PIDORGANIZACAO)';


  dmConexao.conectarBanco;
  pIdOrganizacao := uUtil.TOrgAtual.getId;

  listaID := TStringList.Create;
  listaID.Clear;
  listaID.Add('Sem ID');
   combo.Clear;
   combo.Items.Add('<<< Selecione uma Conta  >>>');

   qryObterTodos := TFDQuery.Create(Self);
   qryObterTodos.Close;
   qryObterTodos.Connection := dmConexao.conn;
   qryObterTodos.SQL.Clear;
   qryObterTodos.SQL.Add(cmd);

   qryObterTodos.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
   qryObterTodos.Open;

   if not qryObterTodos.IsEmpty then begin
          qryObterTodos.First;

      while not qryObterTodos.Eof do
        begin
          combo.Items.Add(qryObterTodos.FieldByName('DSC').AsString);
          listaID.Add(qryObterTodos.FieldByName('ID_CONTA_CONTABIL').AsString);
          qryObterTodos.Next;
        end;
      qryObterTodos.Close;
      combo.ItemIndex := 0;

   end;

end;


end.
