unit uContaContabilDAO;
interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, uContaContabilModel,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB, udmConexao, uUtil,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client;

type
 TContaContabilDAO = class
  private
    class function getConta (query :TFDQuery) : TContaContabilModel;
  public
    {métodos CRUD (Create, Read, Update e Delete)
    para manipulação dos dados}

    class function Insert(value :TContaContabilModel): Boolean;
    class function obterPorCodigoReduzido(value :TContaContabilModel): TContaContabilModel;
    class function obterPorID (value :TContaContabilModel): TContaContabilModel;
    class function Delete(value :TContaContabilModel): Boolean;
    class function Update(value : TContaContabilModel): Boolean;

  end;




implementation

{ TContaContabilDAO }

class function TContaContabilDAO.Delete(value: TContaContabilModel): Boolean;
var
qryDelete : TFDQuery;
xResp :Boolean;
begin
xResp := False;
 dmConexao.conectarBanco;
 try

  qryDelete := TFDQuery.Create(nil);
  qryDelete.Close;
  qryDelete.Connection := dmConexao.conn;
  qryDelete.SQL.Clear;
  qryDelete.SQL.Add('DELETE FROM CONTA_CONTABIL  '  );
  qryDelete.SQL.Add('WHERE ID_ORGANIZACAO = :PIDORGANIZACAO  AND  ID_CONTA_CONTABIL = :PID '  );
  qryDelete.ParamByName('PIDORGANIZACAO').AsString := value.FIDorganizacao;
  qryDelete.ParamByName('PID').AsString := value.FID;

  qryDelete.ExecSQL;
  xResp := True;
    //o comit fica na transacao

 except
 xResp := False;
 raise Exception.Create('Erro ao tentar DELETAR CONTA_CONTABIL');

 end;

  Result := xResp;
end;

class function TContaContabilDAO.getConta(query: TFDQuery): TContaContabilModel;
var
cContabil :TContaContabilModel;
begin
     cContabil :=TContaContabilModel.Create;
 try
  if not query.IsEmpty then begin

      cContabil.FID               := query.FieldByName('ID_CONTA_CONTABIL').AsString;
      cContabil.FIDorganizacao    := query.FieldByName('ID_ORGANIZACAO').AsString;
      cContabil.Fdescricao        := query.FieldByName('DESCRICAO').AsString;
      cContabil.Fconta            := query.FieldByName('CONTA').AsString;
      cContabil.FdgVer            := query.FieldByName('DGVER').AsString;
      cContabil.FcodigoReduzido   := query.FieldByName('CODREDUZ').AsString;
      cContabil.FdgReduz          := query.FieldByName('DGREDUZ').AsString;
      cContabil.FinscMF           := query.FieldByName('INSCMF').AsString;
      cContabil.Ftipo             := query.FieldByName('TIPO').AsString;
      cContabil.Fgrau             := query.FieldByName('GRAU').AsString;
      cContabil.Frelacionamento   := query.FieldByName('RELACIONAMENTO').AsString;
      cContabil.Fnatureza         := query.FieldByName('NATUREZA').AsString;
      cContabil.FdataRegistro     := query.FieldByName('DATA_REGISTRO').AsDateTime;
      cContabil.FordemDIPJ        := query.FieldByName('ORDEM_DIPJ').AsInteger;

  end;

 except
 raise Exception.Create('Erro ao converter CONTA_CONTABIL');

 end;
  Result := cContabil

end;

class function TContaContabilDAO.Insert(value: TContaContabilModel): Boolean;
var
qryInsert : TFDQuery;
cmdSql :string;
begin
dmConexao.conectarBanco;
try
 cmdSql :=  ' INSERT INTO CONTA_CONTABIL '+
            ' (ID_CONTA_CONTABIL, ID_ORGANIZACAO, DESCRICAO, '+
            ' CONTA, DGVER, CODREDUZ, DGREDUZ, INSCMF, TIPO, GRAU, '+
            ' ORDEM_DIPJ, RELACIONAMENTO, NATUREZA, DATA_REGISTRO) '+
            ' VALUES (:PID,:PIDORGANIZACAO,:PDESCRICAO, '+
            ' :PCONTA, :PDGVER, :PCODREDUZ, :PDGREDUZ, :PINSCMF, :PTIPO, :PGRAU, '+
            ' :PORDEM_DIPJ, :PRELACIONAMENTO, :PNATUREZA, :PDATA_REGISTRO ) ' ;

    qryInsert := TFDQuery.Create(nil);
    qryInsert.Close;
    qryInsert.Connection := dmConexao.conn;
    qryInsert.SQL.Clear;
    qryInsert.SQL.Add(cmdSql);
    qryInsert.ParamByName('PID').AsString               := value.FID;
    qryInsert.ParamByName('PIDORGANIZACAO').AsString    := value.FIDorganizacao;
    qryInsert.ParamByName('PCONTA').AsString            := value.FConta;
    qryInsert.ParamByName('PDESCRICAO').AsString        := value.FDescricao;
    qryInsert.ParamByName('PDGVER').AsString            := value.FDgVer;
    qryInsert.ParamByName('PCODREDUZ').AsString         := value.FCodigoReduzido;
    qryInsert.ParamByName('PDGREDUZ').AsString          := value.FDgReduz;

    qryInsert.ParamByName('PINSCMF').AsString           := value.FinscMF;
    qryInsert.ParamByName('PTIPO').AsString             := value.Ftipo;
    qryInsert.ParamByName('PGRAU').AsString             := value.Fgrau;

    qryInsert.ParamByName('PRELACIONAMENTO').AsString   := value.Frelacionamento;
    qryInsert.ParamByName('PNATUREZA').AsString         := value.Fnatureza;
    qryInsert.ParamByName('PDATA_REGISTRO').AsDateTime  := value.FdataRegistro;
    qryInsert.ParamByName('PORDEM_DIPJ').AsInteger      := value.FordemDIPJ;


    qryInsert.ExecSQL;


except
Result :=False;

raise Exception.Create('Erro ao tentar inserir TITULO_PAGAR_BAIXA_FP');

end;

 Result := System.True;
end;

class function TContaContabilDAO.obterPorCodigoReduzido(value: TContaContabilModel): TContaContabilModel;

var
qryPesquisa : TFDQuery;
cContabilModel :TContaContabilModel;

begin
dmConexao.conectarBanco;
try
  qryPesquisa := TFDQuery.Create(nil);
  qryPesquisa.Close;
  qryPesquisa.Connection := dmConexao.conn;
  qryPesquisa.SQL.Clear;
  qryPesquisa.SQL.Add('SELECT * '  );
  qryPesquisa.SQL.Add('FROM CONTA_CONTABIL  '  );
  qryPesquisa.SQL.Add('WHERE ID_ORGANIZACAO = :PIDORGANIZACAO  AND  CODREDUZ = :PCODREDUZ '  );

  qryPesquisa.ParamByName('PIDORGANIZACAO').AsString := value.FIDorganizacao;
  qryPesquisa.ParamByName('PCODREDUZ').AsString := value.FcodigoReduzido;
  qryPesquisa.Open;

  if not qryPesquisa.IsEmpty then begin

      cContabilModel := TContaContabilModel.Create;
      cContabilModel := getConta(qryPesquisa);

  end;


except
raise Exception.Create('Erro ao tentar obter CONTA_CONTABIL POR CODREDUZ');

end;

 Result := cContabilModel;
end;

class function TContaContabilDAO.obterPorID(value: TContaContabilModel): TContaContabilModel;
var
qryPesquisa : TFDQuery;
cContabilModel :TContaContabilModel;

begin
dmConexao.conectarBanco;
try
  qryPesquisa := TFDQuery.Create(nil);
  qryPesquisa.Close;
  qryPesquisa.Connection := dmConexao.conn;
  qryPesquisa.SQL.Clear;
  qryPesquisa.SQL.Add('SELECT * '  );
  qryPesquisa.SQL.Add('FROM CONTA_CONTABIL  '  );
  qryPesquisa.SQL.Add('WHERE ID_ORGANIZACAO = :PIDORGANIZACAO  AND  ID_CONTA_CONTABIL = :PID '  );

  qryPesquisa.ParamByName('PIDORGANIZACAO').AsString := value.FIDorganizacao;
  qryPesquisa.ParamByName('PID').AsString := value.FID;
  qryPesquisa.Open;

  if not qryPesquisa.IsEmpty then begin

      cContabilModel := TContaContabilModel.Create;
      cContabilModel := getConta(qryPesquisa);

  end;


except
raise Exception.Create('Erro ao tentar obter CONTA_CONTABIL POR ID');

end;

 Result := cContabilModel;
end;

class function TContaContabilDAO.Update(value: TContaContabilModel): Boolean;
var
qryUpdate : TFDQuery;
cmdSql :string;
begin
dmConexao.conectarBanco;
try

cmdSql := ' UPDATE TITULO_PAGAR '+
            ' SET ID_HISTORICO                = :PIDHISTORICO, '+
            ' ID_CEDENTE                      = :PIDCEDENTE, '+
            ' ID_TIPO_COBRANCA                = :PIDTIPO_COBRANCA, '+
            ' ID_RESPONSAVEL                  = :PIDRESPONSAVEL, '+
            ' ID_LOCAL_PAGAMENTO              = :PIDLOCAL_PAGAMENTO,'+
            ' ID_TIPO_STATUS                  = :PIDTIPO_STATUS, '+
            ' ID_CENTRO_CUSTO                 = :PIDCENTRO_CUSTO,'+
            ' ID_TITULO_GERADOR               = :PIDTITULO_GERADOR,'+
            ' ID_NOTA_FISCAL_ENTRADA          = :PIDNOTA_FISCAL_ENTRADA,'+
            ' NUMERO_DOCUMENTO                = :PNUMERO_DOCUMENTO, '+
            ' DESCRICAO                       = :PDESCRICAO, '+
            ' DATA_REGISTRO                   = :PDATA_REGISTRO, '+
            ' DATA_EMISSAO                    = :PDATA_EMISSAO, '+
            ' DATA_PROTOCOLO                  = :PDATA_PROTOCOLO,'+
            ' DATA_VENCIMENTO                 = :PDATA_VENCIMENTO,'+
            ' DATA_PAGAMENTO                  = :PDATA_PAGAMENTO,'+
            ' PREVISAO_CARTORIO               = :PPREVISAO_CARTORIO,'+
            ' VALOR_NOMINAL                   = :PVALOR_NOMINAL, '+
            ' MOEDA                           = :PMOEDA, '+
            ' CARTEIRA                        = :PCARTEIRA, '+
            ' CODIGO_BARRAS                   = :PCODIGO_BARRAS, '+
            ' CONTRATO                        = :PCONTRATO, '+
            ' PARCELA                         = :PPARCELA, '+
            ' OBSERVACAO                      = :POBSERVACAO, '+
            ' VALOR_ANTECIPADO                = :PVALOR_ANTECIPADO, '+
            ' ID_LOTE_CONTABIL                = :PIDLOTE_CONTABIL, '+
            ' ID_USUARIO                      = :PIDUSUARIO, '+
            ' ID_LOTE_PAGAMENTO               = :PIDLOTE_PAGAMENTO, '+
            ' DATA_ULTIMA_ATUALIZACAO         = :PDATA_ULTIMA_ATUALIZACAO, '+
            ' ID_CONTA_CONTABIL_CREDITO       = :PIDCONTA_CONTABIL_CREDITO, '+
            ' ID_CONTA_CONTABIL_DEBITO        = :PIDCONTA_CONTABIL_DEBITO, '+
            ' REGISTRO_PROVISAO               = :PREGISTRO_PROVISAO, '+
            ' ID_CONTA_BANCARIA_CHEQUE        = :PID_CONTA_BANCARIA_CHEQUE, '+
            ' ID_LOTE_TPB                     = :PIDLOTE_TPB '+

         ' WHERE (ID_TITULO_PAGAR = :PID ) AND (ID_ORGANIZACAO = :PIDORGANIZACAO ) ' ;


    qryUpdate := TFDQuery.Create(nil);
    qryUpdate.Close;
    qryUpdate.Connection := dmConexao.conn;
    qryUpdate.SQL.Clear;
    qryUpdate.SQL.Add(cmdSql);
    qryUpdate.ParamByName('PID').AsString                         := value.FID;
    qryUpdate.ParamByName('PIDORGANIZACAO').AsString              := value.FIDorganizacao;
    qryUpdate.ParamByName('PIDUSUARIO').AsString                  := value.FIDUsuario;
    qryUpdate.ParamByName('PIDRESPONSAVEL').AsString              := value.FIDResponsavel;
    qryUpdate.ParamByName('PIDLOTE_CONTABIL').AsString            := value.FIDLoteContabil;
    qryUpdate.ParamByName('PIDHISTORICO').AsString                := value.FIDHistorico;
    qryUpdate.ParamByName('PIDCEDENTE').AsString                  := value.FIDCedente;
    qryUpdate.ParamByName('PIDLOTE_TPB').AsString                 := value.FIDLoteTPB;
    qryUpdate.ParamByName('PIDTIPO_COBRANCA').AsString            := value.FIDTipoCobranca;
    qryUpdate.ParamByName('PIDLOCAL_PAGAMENTO').AsString          := value.FIDLocalPagamento;
    qryUpdate.ParamByName('PIDTIPO_STATUS').AsString              := value.FIDTipoStatus;
    qryUpdate.ParamByName('PIDCENTRO_CUSTO').AsString             := value.FIDCentroCusto;
    qryUpdate.ParamByName('PIDNOTA_FISCAL_ENTRADA').AsString      := value.FIDNotaFiscalEntrada;
    qryUpdate.ParamByName('PIDTITULO_GERADOR').AsString           := value.FIDTituloPagarAnterior;
    qryUpdate.ParamByName('PIDLOTE_PAGAMENTO').AsString           := value.FIDLotePagamento;
    qryUpdate.ParamByName('PIDCONTA_CONTABIL_DEBITO').AsString    := value.FIDContaContabilDebito;
    qryUpdate.ParamByName('PIDCONTA_CONTABIL_CREDITO').AsString   := value.FIDContaContabilCredito;
    qryUpdate.ParamByName('PIDCONTA_BANCARIA_CHEQUE').AsString    := value.FIDCBChequeVinculado;
    qryUpdate.ParamByName('PDESCRICAO').AsString                  := value.Fdescricao;
    qryUpdate.ParamByName('POBSERVACAO').AsString                 := value.Fobservacao;
    qryUpdate.ParamByName('PPARCELA').AsString                    := value.Fparcela;
    qryUpdate.ParamByName('PCONTRATO').AsString                   := value.Fcontrato;
    qryUpdate.ParamByName('PCODIGO_BARRAS').AsString              := value.FcodigoBarras;
    qryUpdate.ParamByName('PCARTEIRA').AsString                   := value.Fcarteira;
    qryUpdate.ParamByName('PMOEDA').AsString                      := value.Fmoeda;
    qryUpdate.ParamByName('PREGISTRO_PROVISAO').AsString          := value.FregistroProvisao;
    qryUpdate.ParamByName('PNUMERO_DOCUMENTO').AsString           := value.FnumeroDocumento;

    qryUpdate.ParamByName('PDATA_REGISTRO').AsDateTime            := value.FdataRegistro;
    qryUpdate.ParamByName('PDATA_ULTIMA_ATUALIZACAO').AsDateTime  := value.FdataUltimaAtualizacao;
    qryUpdate.ParamByName('PPREVISAO_CARTORIO').AsDateTime        := value.FprevisaoCartorio;
    qryUpdate.ParamByName('PDATA_PAGAMENTO').AsDateTime           := value.FdataPagamento;
    qryUpdate.ParamByName('PDATA_VENCIMENTO').AsDateTime          := value.FdataVencimento;
    qryUpdate.ParamByName('PDATA_PROTOCOLO').AsDateTime           := value.FdataProtocolo;
    qryUpdate.ParamByName('PDATA_EMISSAO').AsDateTime             := value.FdataEmissao;

    qryUpdate.ParamByName('PVALOR_NOMINAL').AsCurrency            := value.FvalorNominal;
    qryUpdate.ParamByName('PVALOR_ANTECIPADO').AsCurrency         := value.FvalorAntecipado;

    qryUpdate.ExecSQL;


except
Result :=False;

raise Exception.Create('Erro ao tentar alterar TITULO');

end;

 Result := System.True;
end;

end.
