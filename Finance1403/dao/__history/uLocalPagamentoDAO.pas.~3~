unit uLocalPagamentoDAO;

interface
{
CREATE TABLE LOCAL_PAGAMENTO (
    ID_LOCAL_PAGAMENTO  VARCHAR(36) NOT NULL,
    ID_ORGANIZACAO      VARCHAR(36) NOT NULL,
    DESCRICAO           VARCHAR(60)
);
}
uses
  Winapi.Windows, Winapi.Messages, System.DateUtils, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, FireDAC.Stan.Intf, FireDAC.Stan.Option,uLocalPagamentoModel,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB, udmConexao, uUtil,
uOrganizacaoDAO, uOrganizacaoModel, FireDAC.Comp.DataSet, FireDAC.Comp.Client;

  const
   pTable : string = 'LOCAL_PAGAMENTO';

type
 TLocalPagamentoDAO = class
  private
   class function getLocal (query :TFDQuery) : TLocalPagamentoModel;
  public
    {métodos CRUD (Create, Read, Update e Delete)
    para manipulação dos dados}

    class function Insert(value :TLocalPagamentoModel): Boolean;
    class function obterPorID(value :TLocalPagamentoModel): TLocalPagamentoModel;
    class function obterPorLocal(value :TLocalPagamentoModel): TLocalPagamentoModel;
    class function Delete(value :TLocalPagamentoModel): Boolean;



  end;


implementation

{ TLocalPagamentoDAO }

class function TLocalPagamentoDAO.Delete(value: TLocalPagamentoModel): Boolean;
var
qryDelete : TFDQuery;
xResp :Boolean;
begin

  xResp := False;
  dmConexao.conectarBanco;
  qryDelete := TFDQuery.Create(nil);
  try
    try

      qryDelete.Close;
      qryDelete.Connection := dmConexao.conn;
      qryDelete.SQL.Clear;
      qryDelete.SQL.Add('DELETE FROM LOCAL_PAGAMENTO  ');
      qryDelete.SQL.Add('WHERE ID_ORGANIZACAO = :PIDORGANIZACAO  AND  ID_LOCAL_PAGAMENTO = :PID ');
      qryDelete.ParamByName('PIDORGANIZACAO').AsString := value.FIDorganizacao;
      qryDelete.ParamByName('PID').AsString := value.FID;

      qryDelete.ExecSQL;
      xResp := True;

    except
      xResp := False;
      raise Exception.Create('Erro ao tentar DELETAR ' + pTable);

    end;

    Result := xResp;

  finally
    if Assigned(qryDelete) then
    begin
      FreeAndNil(qryDelete);
    end;
  end;

end;


class function TLocalPagamentoDAO.getLocal (query: TFDQuery): TLocalPagamentoModel;
var cConta :TContaBancariaModel;
local : TLocalPagamentoModel;
begin

       local                  := TLocalPagamentoModel.Create;

    if not query.IsEmpty then begin

       if not  query.IsEmpty then begin
        local.FID                      := (query.FieldByName('ID_LOCAL_PAGAMENTO').AsString);
        local.FIDorganizacao           := (query.FieldByName('ID_ORGANIZACAO').AsString);
        local.FIDcontaBancaria         := (query.FieldByName('ID_CONTA_BANCARIA').AsString);
        local.FIDresponsavel           := (query.FieldByName('ID_FUNCIONARIO').AsString);
        local.FIDusuario               := (query.FieldByName('ID_USUARIO').AsInteger);
        local.FIDcheque                := (query.FieldByName('ID_CONTA_BANCARIA_CHEQUE').AsString);
        local.FIDformaPagamento        := (query.FieldByName('ID_FORMA_PAGAMENTO').AsString);
        local.FIDTOB                   := (query.FieldByName('ID_TIPO_OPERACAO_BANCARIA').AsString);
        local.Fstatus                  := (query.FieldByName('STATUS').AsString);
        local.FdataRegistro            := (query.FieldByName('DATA_REGISTRO').AsDateTime);
        local.FdataPagamento           := (query.FieldByName('DATA_PAGAMENTO').AsDateTime);
        local.Flocal                    := (query.FieldByName('LOCAL').AsString);
        local.Fvalor                   := (query.FieldByName('VALOR').AsCurrency);
        local.FqtdTitPag               := (query.FieldByName('QTD_TIT_PAG').AsInteger);

       end;


        try
         local.FcontaBancaria  := TContaBancariaModel.Create;
         local.FcontaBancaria.FID            := local.FIDcontaBancaria;
         local.FcontaBancaria.FIDorganizacao := local.FIDorganizacao;
         local.FcontaBancaria  := TContaBancariaDAO.obterPorID(local.FcontaBancaria);


         local.Fusuario  := TUsuarioModel.Create;
         local.Fusuario.FID            := local.FIDusuario;
         local.Fusuario.FIDorganizacao := local.FIDorganizacao;
         local.Fusuario  := TUsuarioDAO.obterPorID(local.Fusuario);


         local.Fcheque  := TContaBancariaChequeModel.Create;
         local.Fcheque.FID            := local.FIDcheque;
         local.Fcheque.FIDorganizacao := local.FIDorganizacao;
         local.Fcheque  := TContaBancariaChequeDAO.obterPorID(local.Fcheque);

         local.FFOrmaPagamento  := TFormaPagamentoModel.Create;
         local.FFOrmaPagamento.FID            := local.FIDformaPagamento;
         local.FFOrmaPagamento.FIDorganizacao := local.FIDorganizacao;
         local.FFOrmaPagamento  := TFormaPagamentoDAO.obterPorID(local.FFOrmaPagamento);


         local.FTOB  := TTipoOperacaoBancariaModel.Create;
         local.FTOB.FID            := local.FIDTOB;
         local.FTOB.FIDorganizacao := local.FIDorganizacao;
         local.FTOB  := TTipoOperacaoBancariaDAO.obterPorID(local.FTOB);

        except
          raise Exception.Create('Erro ao tentar obter detalhes do local.');

        end;


  end;


   Result := local;

end;

class function TLocalPagamentoDAO.Insert(value: TLocalPagamentoModel): Boolean;
var
  qryInsert: TFDQuery;
  cmdSql: string;
begin
  dmConexao.conectarBanco;
  qryInsert := TFDQuery.Create(nil);
  try
    try
      cmdSql := ' INSERT INTO LOCAL_PAGAMENTO '+
                ' (ID_LOCAL_PAGAMENTO, ID_ORGANIZACAO, ID_USUARIO,' +
                ' ID_CONTA_BANCARIA, ID_FUNCIONARIO, ID_CONTA_BANCARIA_CHEQUE,'+
                ' ID_TIPO_OPERACAO_BANCARIA, ID_FORMA_PAGAMENTO, LOCAL, STATUS, '+
                ' DATA_REGISTRO, DATA_PAGAMENTO, QTD_TIT_PAG, VALOR)'+
                ' VALUES (:PID, :PIDORGANIZACAO, :PID_USUARIO, '+
                ' :PIDCONTA_BANCARIA, :PIDFUNCIONARIO, :PIDCHEQUE, '+
                ' :PIDTOB, :PIDFP, :PLOCAL, :PSTATUS, '+
                ' :PDT_REGISTRO, :PDT_PAGAMENTO, :PQTD, :PVALOR); ';

      qryInsert.Close;
      qryInsert.Connection := dmConexao.conn;
      qryInsert.SQL.Clear;
      qryInsert.SQL.Add(cmdSql);
      qryInsert.ParamByName('PID').AsString                 := value.FID;
      qryInsert.ParamByName('PIDORGANIZACAO').AsString      := value.FIDorganizacao;
      qryInsert.ParamByName('PID_USUARIO').AsInteger        := value.FIDusuario;
      qryInsert.ParamByName('PIDCONTA_BANCARIA').AsString   := value.FIDcontaBancaria;
      qryInsert.ParamByName('PIDFUNCIONARIO').AsString      := value.FIDresponsavel;
      qryInsert.ParamByName('PIDCHEQUE').AsString           := value.FIDcheque;
      qryInsert.ParamByName('PIDTOB').AsString              := value.FIDTOB;
      qryInsert.ParamByName('PIDFP').AsString               := value.FIDformaPagamento;
      qryInsert.ParamByName('PLOCAL').AsString               := value.Flocal;
      qryInsert.ParamByName('PSTATUS').AsString             := value.Fstatus;
      qryInsert.ParamByName('PVALOR').AsCurrency            := value.Fvalor;
      qryInsert.ParamByName('PQTD').AsInteger               := value.FqtdTitPag;
      qryInsert.ParamByName('PDT_REGISTRO').AsDateTime      := value.FdataRegistro;
      qryInsert.ParamByName('PDT_PAGAMENTO').AsDateTime     := value.FdataPagamento;


      qryInsert.ExecSQL;

    except
      Result := False;

      raise Exception.Create('Erro ao tentar inserir ' + pTable);

    end;

    Result := System.True;

  finally
    if Assigned(qryInsert) then
    begin
      FreeAndNil(qryInsert);
    end;
  end;
end;

class function TLocalPagamentoDAO.obterPorID(value: TLocalPagamentoModel): TLocalPagamentoModel;
var
 local : TLocalPagamentoModel;
 qryPesquisa : TFDQuery;
 cmdSql : string;
begin
   local := TLocalPagamentoModel.Create;
   dmConexao.conectarBanco;

   try
    cmdSql := ' SELECT * FROM LOCAL_PAGAMENTO CBC '+
              ' WHERE (CBC.ID_ORGANIZACAO =:PIDORGANIZACAO)AND (CBC.ID_LOCAL_PAGAMENTO = :PID) ';

    qryPesquisa := TFDQuery.Create(nil);
    qryPesquisa.Close;
    qryPesquisa.Connection := dmConexao.conn;
    qryPesquisa.SQL.Clear;
    qryPesquisa.SQL.Add(cmdSql);
    qryPesquisa.ParamByName('PIDORGANIZACAO').AsString := value.FIDorganizacao;
    qryPesquisa.ParamByName('PID').AsString := value.FID;

    qryPesquisa.Open;

     if not  qryPesquisa.IsEmpty then begin

      local := getLocal(qryPesquisa);

     end;


   except
   raise Exception.Create('Erro ao obter local por ID');

   end;

   Result := local;
end;


class function TLocalPagamentoDAO.obterPorLocal(value: TLocalPagamentoModel): TLocalPagamentoModel;
var
local : TLocalPagamentoModel;
 qryPesquisa : TFDQuery;
 cmdSql : string;
begin
   local :=TLocalPagamentoModel.Create;
   dmConexao.conectarBanco;

   try
    cmdSql := ' SELECT * FROM LOCAL_PAGAMENTO TB '+
              ' WHERE (TB.ID_ORGANIZACAO   = :PIDORGANIZACAO) '+
              ' AND   (TB.LOCAL  = :PLOCAL) ';



    qryPesquisa := TFDQuery.Create(nil);
    qryPesquisa.Close;
    qryPesquisa.Connection := dmConexao.conn;
    qryPesquisa.SQL.Clear;
    qryPesquisa.SQL.Add(cmdSql);
    qryPesquisa.ParamByName('PLOCAL').AsString := value.Flocal;
    qryPesquisa.ParamByName('PIDORGANIZACAO').AsString := value.FIDorganizacao;


     qryPesquisa.Open;
     if not  qryPesquisa.IsEmpty then begin

      local := getLocal(qryPesquisa);

     end;


   except
   raise Exception.Create('Erro ao obter '+ pTable + ' local ');

   end;

   Result := local;
end;



end.
