unit uFormaPagamentoDAO;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,uContaContabilModel,uContaContabilDAO,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB, uFormaPagamentoModel, udmConexao, uUtil,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client;

type
TFormaPagamentoDAO = class
  private
    //class function ComandoSql(AReceber: TReceber): Boolean;
    class function getFP (query :TFDQuery) : TFormaPagamentoModel;

  public
    {métodos CRUD (Create, Read, Update e Delete)
    para manipulação dos dados}
    class function Insert(value :TFormaPagamentoModel): Boolean;
    class function obterPorID(value :TFormaPagamentoModel): TFormaPagamentoModel;
    class function Update(value :TFormaPagamentoModel): Boolean;
    class function Delete(value :TFormaPagamentoModel): Boolean;

  end;


implementation

{ TFormaPagamentoDAO }

class function TFormaPagamentoDAO.getFP(query: TFDQuery): TFormaPagamentoModel;
var
  fp: TFormaPagamentoModel;
  cContabil: TContaContabilModel;
begin
  fp := TFormaPagamentoModel.Create;
  cContabil := TContaContabilModel.Create;
  try
    if not query.IsEmpty then
    begin

      fp.FID              := query.FieldByName('ID_FORMA_PAGAMENTO').AsString;
      fp.FIDorganizacao   := query.FieldByName('ID_ORGANIZACAO').AsString;
      fp.FDescricao       := query.FieldByName('DESCRICAO').AsString;
      fp.FIDcontaContabil := query.FieldByName('ID_CONTA_CONTABIL').AsString;

      cContabil.FID             := fp.FIDcontaContabil;
      cContabil.FIdOrganizacao  := fp.FIDorganizacao;

      try
        fp.FContaContabil       := TContaContabilDAO.obterPorID(cContabil);
      except
        raise Exception.Create('Erro ao tentar converter CONTA CONTABIL EM FP');

      end;

    end;

  except
    raise Exception.Create('Erro ao obter FORMA_PAGAMENTO');

  end;
  Result := fp

end;

class function TFormaPagamentoDAO.obterPorID( value: TFormaPagamentoModel): TFormaPagamentoModel;
var
  qryPesquisa: TFDQuery;
  cmdSql: string;
  tFormaPagto: TFormaPagamentoModel;
begin
  dmConexao.conectarBanco;
  try
    qryPesquisa := TFDQuery.Create(nil);
    qryPesquisa.Close;
    qryPesquisa.Connection := dmConexao.conn;
    qryPesquisa.SQL.Clear;
    qryPesquisa.SQL.Add('SELECT ID_FORMA_PAGAMENTO, ID_ORGANIZACAO, ');
    qryPesquisa.SQL.Add('DESCRICAO, ID_CONTA_CONTABIL ');
    qryPesquisa.SQL.Add('FROM FORMA_PAGAMENTO  ');
    qryPesquisa.SQL.Add('WHERE ID_ORGANIZACAO = :PIDORGANIZACAO  AND  ID_FORMA_PAGAMENTO = :PID ');

    qryPesquisa.ParamByName('PIDORGANIZACAO').AsString := value.FIDorganizacao;
    qryPesquisa.ParamByName('PID').AsString := value.FID;
    qryPesquisa.Open;

    if not qryPesquisa.IsEmpty then
    begin

      tFormaPagto := TFormaPagamentoModel.Create;
      tFormaPagto := getFP(qryPesquisa);
    end;

  except
    raise Exception.Create('Erro ao tentar obter forma de pagamento ');

  end;

  Result := tFormaPagto;
end;

class function TFormaPagamentoDAO.Update(value: TFormaPagamentoModel): Boolean;
var
qryUpdate : TFDQuery;
cmdSql :string;
begin
dmConexao.conectarBanco;
try

cmdSql := ' UPDATE FORMA_PAGAMENTO  '+
          ' SET DESCRICAO = :PDESCRICAO, '+
          ' ID_CONTA_CONTABIL = :PCONTA '+
          ' WHERE (ID_FORMA_PAGAMENTO = :PID ) AND (ID_ORGANIZACAO = :PIDORGANIZACAO) ' ;


    qryUpdate := TFDQuery.Create(nil);
    qryUpdate.Close;
    qryUpdate.Connection := dmConexao.conn;
    qryUpdate.SQL.Clear;
    qryUpdate.SQL.Add(cmdSql);
    qryUpdate.ParamByName('PID').AsString               := value.FID;
    qryUpdate.ParamByName('PIDORGANIZACAO').AsString    := value.FIDorganizacao;
    qryUpdate.ParamByName('PDESCRICAO').AsString        := value.Fdescricao;
    qryUpdate.ParamByName('PCONTA').AsString            := value.FIDcontaContabil;

    qryUpdate.ExecSQL;


except
Result :=False;

raise Exception.Create('Erro ao tentar alterar FORMA_PAGAMENTO');

end;

 Result := System.True;
end;

class function TFormaPagamentoDAO.Delete(value: TFormaPagamentoModel): Boolean;
var
  qryDelete: TFDQuery;
  xResp: Boolean;
begin
  xResp := False;
  dmConexao.conectarBanco;
  try

    qryDelete := TFDQuery.Create(nil);
    qryDelete.Close;
    qryDelete.Connection := dmConexao.conn;
    qryDelete.SQL.Clear;
    qryDelete.SQL.Add('DELETE FROM FORMA_PAGAMENTO  ');
    qryDelete.SQL.Add('WHERE ID_ORGANIZACAO = :PIDORGANIZACAO  AND  ID_FORMA_PAGAMENTO = :PID ');
    qryDelete.ParamByName('PIDORGANIZACAO').AsString := value.FIDorganizacao;
    qryDelete.ParamByName('PID').AsString := value.FID;

    qryDelete.ExecSQL;
    xResp := True;
    //o comit fica na transacao

  except
    xResp := False;
    raise Exception.Create('Erro ao tentar DELETAR FORMA_PAGAMENTO');

  end;

  Result := xResp;
end;


class function TFormaPagamentoDAO.Insert(value: TFormaPagamentoModel): Boolean;
var
  qryInsert: TFDQuery;
  cmdSql: string;
begin
  dmConexao.conectarBanco;
  try

    cmdSql := ' INSERT INTO FORMA_PAGAMENTO ' + ' (ID_FORMA_PAGAMENTO, ID_ORGANIZACAO, ID_CONTA_CONTABIL,  DESCRICAO ) ' + ' VALUES (:PID, :PIDORGANIZACAO, :PIDCONTA, :PDESCRICAO  )';

    qryInsert := TFDQuery.Create(nil);
    qryInsert.Close;
    qryInsert.Connection := dmConexao.conn;
    qryInsert.SQL.Clear;
    qryInsert.SQL.Add(cmdSql);
    qryInsert.ParamByName('PID').AsString := value.FID;
    qryInsert.ParamByName('PIDCONTA').AsString := value.FIDcontaContabil;
    qryInsert.ParamByName('PIDORGANIZACAO').AsString := value.FIDorganizacao;
    qryInsert.ParamByName('PDESCRICAO').AsString := value.FDescricao;

    qryInsert.ExecSQL;

  except

    Result := False;
    raise Exception.Create('Erro ao tentar inserir FORMA_PAGAMENTO');

  end;

  Result := System.True;
end;



end.
