unit UMostraErros;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  ComCtrls, StdCtrls, Buttons, uVarGlobais, IdBaseComponent, IdComponent,
  IdTCPConnection, IdTCPClient, IdHTTP, uUtil, EMsgDlg, cxGraphics, cxControls,
  cxLookAndFeels, cxLookAndFeelPainters, dxSkinsCore, dxSkinsDefaultPainters,
  dxStatusBar;

type
  TFMostraErros = class(TForm)
    BtnImprimir: TBitBtn;
    BtnFechar: TBitBtn;
//  RDprint1: TRDprint;
    RichEditErros: TRichEdit;
    btnEmail: TBitBtn;
    PempecMsg: TEvMsgDlg;
    IdHTTP1: TIdHTTP;
    dxStatusBar: TdxStatusBar;
    procedure FormCreate(Sender: TObject);
    procedure BtnFecharClick(Sender: TObject);//
    procedure BtnImprimirClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormShow(Sender: TObject);
    procedure btnEmailClick(Sender: TObject);
  private
    { Private declarations }
    FiLin: Integer;
    FsTitulo: string;
    function obterConteudoMemo(Linhas: TStrings): string;
    procedure msgStatusBar(pPosicao: Integer; msg: string);
    function obterConteudoMemoLista(Linhas: TStrings): TStrings;
  public
    { Public declarations }
    function Add(const S: String;
      pbAdicionaLinhaBranco: Boolean = false;
      pbPermiteDuplicidade: Boolean = false): Integer;
    procedure Append(const S: String;
      pbAdicionaLinhaBranco: Boolean = false;
      pbPermiteDuplicidade: Boolean = false);
    procedure Insert(Index: Integer; Const S: String;
      pbAdicionaLinhaBranco: Boolean = false;
      pbPermiteDuplicidade: Boolean = false);
    procedure Clear;
    function Count: Integer;

    property MostraErros: TRichEdit read RichEditErros;
    property Titulo: string write FsTitulo;
  end;

var
  FMostraErros: TFMostraErros;

implementation

{$R *.DFM}

{O vetor aErros, declarado na unit uVarGlobais, foi mantido
 por questão de compatibilidade com a forma utilizada no
 MegaContabil.}

procedure TFMostraErros.FormCreate(Sender: TObject);
begin

  RichEditErros.ReadOnly := True;
  RichEditErros.Lines.Clear;
  BtnImprimir.Visible := False;//em 22/07 - Ranan. Aguardando criar funcao.

  msgStatusBar(0,'Status :');
  msgStatusBar(1,'Ativo');
  msgStatusBar(2,'Obs:');
  msgStatusBar(3,'Caso deseje, poderá enviar e-mail para o suporte.');

end;

procedure TFMostraErros.BtnFecharClick(Sender: TObject);
begin
  Close;
end;



procedure TFMostraErros.BtnImprimirClick(Sender: TObject);
var
  iFor : integer;
begin
//  BtnImprimir.Enabled := false;
//  RdPrint1.OpcoesPreview.Preview := true;
//  FiLin := 0;
//  RdPrint1.abrir;
//  if RdPrint1.setup then begin
//    for iFor := 0 to RichEditErros.Lines.Count-1 do begin
//      RdPrint1.impf(FiLin,01,RichEditErros.Lines[iFor],[Comp12]);
//      inc(FiLin);
//      if FiLin >= 57 then begin
//        RdPrint1.Novapagina;
//      end;
//    end;
//    RdPrint1.Fechar;
//  end;
//  BtnImprimir.Enabled := true;
end;

procedure TFMostraErros.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
//SetLength(aErros,0);
end;

function TFMostraErros.Add(const S: String;
  pbAdicionaLinhaBranco: Boolean = False;
  pbPermiteDuplicidade: Boolean = false): Integer;
begin
  if (Trim(S) = '') or (pbPermiteDuplicidade) or (RichEditErros.FindText(S,0,Length(RichEditErros.Text),[stWholeWord]) < 0) then begin
    Result := RichEditErros.Lines.Add(S);
    if pbAdicionaLinhaBranco then begin
      RichEditErros.Lines.Add(' ');
    end;
  end;
end;

procedure TFMostraErros.Insert(Index: Integer; const S: String;
  pbAdicionaLinhaBranco: Boolean = false;
  pbPermiteDuplicidade: Boolean = false);
begin
  if (Trim(S) = '') or (pbPermiteDuplicidade) or (RichEditErros.FindText(S,0,Length(RichEditErros.Text),[stWholeWord]) < 0) then begin
    RichEditErros.Lines.Insert(Index,S);
    if pbAdicionaLinhaBranco then begin
      RichEditErros.Lines.Insert(Index+1,' ');
    end;
  end;
end;

procedure TFMostraErros.Append(const S: String;
  pbAdicionaLinhaBranco: Boolean = false;
  pbPermiteDuplicidade: Boolean = false);
begin
  if (Trim(S) = '') or (pbPermiteDuplicidade) or (RichEditErros.FindText(S,0,Length(RichEditErros.Text),[stWholeWord]) < 0) then begin
    RichEditErros.Lines.Append(S);
    if pbAdicionaLinhaBranco then begin
      RichEditErros.Lines.Append(' ');
    end;
  end;
end;

procedure TFMostraErros.btnEmailClick(Sender: TObject);
var
msgMail,destino : string;
linhas :TStrings;
begin
  if uutil.IsInternetConected then
  begin

    btnEmail.Caption := 'Enviando...';

    if not (uVarGlobais.rHost.isEnable) then
    begin
      PempecMsg.MsgError('Lamentamos! O servidor de e-mail não está ativo. Contate o suporte por outo meio. ');
    end;

    destino := 'suporte@pempec.com.br';

    if uVarGlobais.rHost.isEnable then
    begin
      msgStatusBar(3, 'O email está sendo enviado. Aguarde. ');
            //msgMail := 'ZIP FILE ' + #13 + 'ANEXO :   ' + arquivoZip + #13 +  DateTimeToStr(Now);
      msgMail := obterConteudoMemo(RichEditErros.Lines);
     
       EnviarEmailGen(uutil.TUserAtual.getNameUser, msgMail, Self.ClassName + ' ' + uUtil.TOrgAtual.getFantasia, destino, '', '');
     // if  uutil.EnviarEmail('Titulos Pendentes',destino,'',RichEditErros.Lines) then begin PempecMsg.MsgInformation('Email enviado com sucesso.'); end;


    end;

    btnEmail.Caption := 'E-mail';
    msgStatusBar(3, 'O email enviado com sucesso. A tela será fechada. ');

  end
  else
  begin
    PempecMsg.MsgError('Lamentamos! Não foi possível conectar ao servidor de e-mail. Verifique sua conexão com a internet. ');
  end;
  Sleep(5000);
  BtnFechar.Click;


end;

function TFMostraErros.obterConteudoMemo(Linhas: TStrings): string;
  var
    i: integer;
  begin

    Result := EmptyStr; //tudo separadinho
    with TStringList.Create do
      try
        Text := StringReplace(Linhas.Text, '"', '', [rfReplaceAll]);
        for i := 0 to Count - 1 do
          if Strings[i] <> EmptyStr then
          begin
            if Result <> EmptyStr then
              Result := Result + ', ';
            Result := Result + QuotedStr(Trim(Strings[i])) + #13;
          end;

      finally
        Free;
      end;
  end;

  function TFMostraErros.obterConteudoMemoLista(Linhas: TStrings): TStrings;
  var
    i: integer;
  begin

    Result := EmptyStr; //tudo separadinho
    with TStringList.Create do
      try
        Text := StringReplace(Linhas.Text, '"', '', [rfReplaceAll]);
        for i := 0 to Count - 1 do
          if Strings[i] <> EmptyStr then
          begin
            if Result <> EmptyStr then
              Result := Result + ', ';
            Result := Result + QuotedStr(Trim(Strings[i])) + #13;
          end;

      finally
        Free;
      end;
  end;

procedure TFMostraErros.Clear;
begin
  RichEditErros.Lines.Clear;
//SetLength(aErros,0);
end;

function TFMostraErros.Count: Integer;
var
  liFor: Integer;
begin
//  for liFor := 0 to length(aErros)-1 do begin
//    RichEditErros.Lines.Append(aErros[liFor]);
//  end;
//  SetLength(aErros,0);
  Result := RichEditErros.Lines.Count;
end;

procedure TFMostraErros.FormShow(Sender: TObject);
var
  liFor: Integer;
begin
//  for liFor := 0 to length(aErros)-1 do begin
//    RichEditErros.Lines.Append(aErros[liFor]);
//  end;
//  SetLength(aErros,0);
end;


procedure TFMostraErros.msgStatusBar(pPosicao : Integer; msg :string);
begin
dxStatusBar.Panels[pPosicao].Text := msg;
Application.ProcessMessages;
end;


end.
