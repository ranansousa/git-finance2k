unit uFrmExtratoBancario;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.DateUtils,
  System.Classes, Vcl.Graphics, uDMExtratoBancario, uUtil, udmConexao, uDMOrganizacao,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uFramePeriodo, uFrameContaBancaria, MDDAO,
  uContaBancariaModel, uContaBancariaDAO, uContaBancariaCRModel, uContaBancariaCreditoDAO,uContaBancariaDBModel, uContaBancariaDebitoDAO,
  Vcl.StdCtrls, frxClass, frxDBSet, Data.DB, uFrmEnviaMail,
  Vcl.Grids, Vcl.DBGrids, Vcl.Buttons, frxExportBaseDialog, EMsgDlg, cxGraphics,
  cxControls, cxLookAndFeels, cxLookAndFeelPainters, dxSkinsCore,
  dxSkinsDefaultPainters, dxStatusBar, dxRibbonSkins, dxRibbonCustomizationForm,
  cxClasses, dxRibbon, dxBar, cxCalendar, cxBarEditItem, cxCheckBox,
  dxBarExtItems, FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, frxExportPDF, FireDAC.Stan.Async,
  FireDAC.DApt, Vcl.ExtCtrls;

type
  TfrmExtratoBancario = class(TForm)
    frxExtratoBancario: TfrxReport;
    frxExtrato: TfrxDBDataset;
    PempecMsg: TEvMsgDlg;
    dxStatusBar: TdxStatusBar;
    dxBarManager1: TdxBarManager;
    dxRibbon1Tab1: TdxRibbonTab;
    dxRibbon1: TdxRibbon;
    dtInicial: TcxBarEditItem;
    dtFinal: TcxBarEditItem;
    dxBtnConsulta: TdxBarButton;
    dxBarManager1Bar2: TdxBar;
    chkTipo: TcxBarEditItem;
    chkCheque: TcxBarEditItem;
    cxBarEditItem1: TcxBarEditItem;
    dxBarSubItem1: TdxBarSubItem;
    dxBarManager1Bar1: TdxBar;
    dxBarManager1Bar3: TdxBar;
    dxBtnImprimir: TdxBarLargeButton;
    dxBtnFechar: TdxBarLargeButton;
    dxBarManager1Bar4: TdxBar;
    cxBarEditItem2: TcxBarEditItem;
    cxBarEditItem3: TcxBarEditItem;
    chkPDF: TcxBarEditItem;
    dxBarBtnEnviarEmail: TdxBarLargeButton;
    dxBarManager1Bar5: TdxBar;
    dxBarManager1Bar6: TdxBar;
    dxBarDataInicial: TdxBarDateCombo;
    dxBarDataFinal: TdxBarDateCombo;
    dxBarCbxContas: TdxBarCombo;
    gridExtrato: TDBGrid;
    dtsExtrato: TDataSource;
    qryObterTodos: TFDQuery;
    dxBarBtnConsultar: TdxBarButton;
    pnSaldoConta: TPanel;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure btnFecharClick(Sender: TObject);
    procedure dxBtnFecharClick(Sender: TObject);
    procedure dxBtnImprimirClick(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure dxBarBtnEnviarEmailClick(Sender: TObject);
    procedure dxBarCbxContasChange(Sender: TObject);
    procedure dxBarBtnConsultarClick(Sender: TObject);
    procedure gridExtratoTitleClick(Column: TColumn);


  private

    FsListaIdContas: TStringList;
    idConta, idOrganizacao: string;
    indiceConta: integer;
    saldoAnteriorRelatorio: Currency;
    pDataInicial, pDataFinal :TDate;
    contaBancaria : TContaBancariaModel;
    procedure atualizaSaldoConta();
    procedure inicializarDM(Sender: TObject);
    procedure freeAndNilDM(Sender: TObject);
    procedure limpaPanel();
    function retornarCaminhoRelatorio: string;
    procedure inicializarVariaveisRelatorio(dtInicial, dtFinal: TDate);
    procedure exibirRelatorio(dtInicial, dtFinal: TDate);
    function obterSaldoAnterior(pIdOrganizacao, pIDConta: string; pDataInicial, pDataFinal: TDate): Currency;
    procedure registraMovimentacao(pOrg, pTable, pAcao, pDsc, pStatus: string);
    procedure msgStatusBar(pPosicao: Integer; msg: string);
    procedure limpaStatusBar;
    function validarForm(): Boolean;
  //  procedure preencheGrid;
    function obterTodos(pIdValue: string; var combo: TdxBarCombo;
      var listaID: TStringList): boolean;
    function limpaTabelaTemp: Boolean;


    { Private declarations }

  public
    { Public declarations }
  end;

var
  frmExtratoBancario: TfrmExtratoBancario;

implementation

{$R *.dfm}


procedure TfrmExtratoBancario.atualizaSaldoConta;
var
saldo : string;
pSaldo :Currency;
begin
  pSaldo := 0;

   if  dmExtratoBancario.qryExtrato.RecordCount >0 then begin

      while not dmExtratoBancario.qryExtrato.Eof do begin

       pSaldo := pSaldo + dmExtratoBancario.qryExtrato.FieldByName('VALOR').AsCurrency;

       dmExtratoBancario.qryExtrato.Next;

      end;


   end;

    saldo := ' Saldo final da conta no período : ' + uutil.TFormat.formatCurToReal(pSaldo);

   if pSaldo < 0 then begin

    saldo := ' Saldo final da conta no período : ( ' + uutil.TFormat.formatCurToReal(pSaldo) + ' )';
   end;



 pnSaldoConta.Caption := saldo;

end;

procedure TfrmExtratoBancario.btnFecharClick(Sender: TObject);
begin
   PostMessage(Self.Handle, WM_CLOSE, 0, 0);
end;


procedure TfrmExtratoBancario.dxBarBtnConsultarClick(Sender: TObject);
var vlrSaldoAnterior, vlrCr, vlrDb : Currency;
liberaRelatorio : Integer;
descConta,tipoSaldo :String;

begin
 gridExtrato.DataSource.DataSet.Close;


if dmConexao.conectarBanco then begin
   liberaRelatorio :=0;
   tipoSaldo :='D';

  if validarForm then begin
      //   pDataInicial :=  StrToDate('01/01/1990');
       //  pDataFinal   := IncDay(frmPeriodo1.getDataInicial, -1); //pega o saldo até o dia de ontem

    pDataInicial := dxBarDataInicial.Date;
    pDataFinal := dxBarDataFinal.Date;

    if dxBarCbxContas.ItemIndex > 0 then
    begin
      indiceConta := dxBarCbxContas.ItemIndex;
      idConta := FsListaIdContas[indiceConta];
      contaBancaria := TContaBancariaModel.Create;
      contaBancaria.FIDorganizacao := idOrganizacao;
      contaBancaria.FID := idConta;
      contaBancaria := TContaBancariaDAO.obterPorID(contaBancaria);

      registraMovimentacao(idOrganizacao, 'CONTA_BANCARIA', 'EXTRATO BANCARIO', uutil.TUserAtual.getNameUser + ' solicitou EXTRATO DA CONTA ' + contaBancaria.Fconta, 'SOLICITADO');


//      descConta := frmContaBancaria1.cbbConta.Items[frmContaBancaria1.cbbConta.ItemIndex];
      descConta := contaBancaria.Fconta;

      vlrSaldoAnterior := obterSaldoAnterior(idOrganizacao, idConta, pDataInicial, pDataFinal);
      liberaRelatorio := Trunc(vlrSaldoAnterior);

      if vlrSaldoAnterior > 0 then
      begin
        tipoSaldo := 'C';
      end;

      liberaRelatorio := liberaRelatorio + dmExtratoBancario.obterLancamentosCredito(idOrganizacao, idConta, pDataInicial, pDataFinal);
      liberaRelatorio := liberaRelatorio + dmExtratoBancario.obterLancamentosDebito(idOrganizacao, idConta, pDataInicial, pDataFinal);

      liberaRelatorio := 1; //ver como fazer .. pq nao estava exibindo o relatorio

    end;

    if dmExtratoBancario.montarTabelaTemp(IncDay(pDataInicial, -1), 'SALDO ANTERIOR DA CONTA ' + descConta, tipoSaldo, vlrSaldoAnterior) then
    begin
      dmExtratoBancario.qryExtrato.Close;
      dmExtratoBancario.qryExtrato.Open;


      atualizaSaldoConta; //soma o campo valor da qry e coloca no panel

    end
    else
    begin
      PempecMsg.MsgWarning('Não foi possível exibir o extrato bancário ...');
    end;

  end;
end else begin PempecMsg.MsgError('Não foi possível conectar com o servidor de dados. '); end;


end;

procedure TfrmExtratoBancario.dxBarBtnEnviarEmailClick(Sender: TObject);
var
assunto, arquivo :string;
//frxPDFExport : TfrxPDFExport;
begin
 //frxPDFExport := TfrxPDFExport.Create(Self);
 //só enviar um tipo.
  chkPDF.EditValue := True;

  pDataInicial := dxBarDataInicial.Date;
  pDataFinal := dxBarDataFinal.Date;


  if (dmExtratoBancario.qryExtrato.RecordCount > 0) then
  begin


    if chkPDF.EditValue then begin

      frxExtratoBancario.Clear;
      frxExtratoBancario.LoadFromFile(retornarCaminhoRelatorio);
      //enviar por PDF
      arquivo := 'EXTRATO_CONTA_' + contaBancaria.Fconta +'_'+ FormatDateTime('dd.MM.yyyy_hh.mm.ss', now)  + '.PDF';

      dmConexao.frxPDFExport := TfrxPDFexport.Create(Self);

      dmConexao.frxPDFExport.FileName := arquivo;
      dmconexao.frxPDFExport.DefaultPath := GetCurrentDir + '\rel\bancos\';
      dmconexao.frxPDFExport.ShowDialog := False;
      dmconexao.frxPDFExport.ShowProgress := False;
      dmconexao.frxPDFExport.OverwritePrompt := True;


      inicializarVariaveisRelatorio(Now, Now);

      frxExtratoBancario.OldStyleProgress := True;
      frxExtratoBancario.ShowProgress := True;
      frxExtratoBancario.PrepareReport(True);

      frxExtratoBancario.Export(dmconexao.frxPDFExport);

      if Assigned(dmConexao.frxPDFExport) then
      begin
        dmConexao.frxPDFExport.Free;
      end;
    end;

      assunto := arquivo;
      arquivo := GetCurrentDir + '\rel\bancos\'+arquivo;

     frmEnviaMail := TfrmEnviaMail.Create(Self, arquivo, assunto);
     frmEnviaMail.ShowModal;
     FreeAndNil(frmEnviaMail);




  end;

  msgStatusBar(1, 'Relatório sendo impresso.');

end;

procedure TfrmExtratoBancario.dxBarCbxContasChange(Sender: TObject);
var
idconta :string;
pDataInicial, pDataFinal :TDate;
sucesso : Boolean;
begin
  sucesso := True;

  if sucesso then
  begin

    if dxBarCbxContas.ItemIndex > 0 then
    begin

      indiceConta := dxBarCbxContas.ItemIndex;

      dxBtnImprimir.Enabled := True;

    end
    else
    begin
      dxBtnImprimir.Enabled := False;
    end;
  end;



end;

procedure TfrmExtratoBancario.dxBtnFecharClick(Sender: TObject);
begin
   PostMessage(Self.Handle, WM_CLOSE, 0, 0);
end;

procedure TfrmExtratoBancario.dxBtnImprimirClick(Sender: TObject);
var vlrSaldoAnterior, vlrCr, vlrDb : Currency;
liberaRelatorio : Integer;
descConta,tipoSaldo :String;

begin

   liberaRelatorio :=0;
   tipoSaldo :='D';
   if dmConexao.conectarBanco then begin


  if validarForm then begin
      //   pDataInicial :=  StrToDate('01/01/1990');
       //  pDataFinal   := IncDay(frmPeriodo1.getDataInicial, -1); //pega o saldo até o dia de ontem

         pDataInicial := dxBarDataInicial.Date;
         pDataFinal   := dxBarDataFinal.Date;



     if dxBarCbxContas.ItemIndex >0  then begin
       indiceConta := dxBarCbxContas.ItemIndex;
       idConta := FsListaIdContas[indiceConta];
       contaBancaria := TContaBancariaModel.Create;
       contaBancaria.FIDorganizacao := idOrganizacao;
       contaBancaria.FID := idConta;
       contaBancaria := TContaBancariaDAO.obterPorID(contaBancaria);

       registraMovimentacao(idOrganizacao, 'CONTA_BANCARIA', 'EXTRATO BANCARIO', uutil.TUserAtual.getNameUser + ' solicitou EXTRATO DA CONTA '+ contaBancaria.Fconta  , 'SOLICITADO');


//      descConta := frmContaBancaria1.cbbConta.Items[frmContaBancaria1.cbbConta.ItemIndex];
      descConta := contaBancaria.Fconta;

      vlrSaldoAnterior := obterSaldoAnterior(idOrganizacao, idConta, pDataInicial, pDataFinal);
      liberaRelatorio :=  Trunc(vlrSaldoAnterior);

      if vlrSaldoAnterior > 0 then
      begin
        tipoSaldo := 'C';
      end;



       liberaRelatorio := liberaRelatorio + dmExtratoBancario.obterLancamentosCredito(idOrganizacao,idConta, pDataInicial, pDataFinal);
       liberaRelatorio := liberaRelatorio + dmExtratoBancario.obterLancamentosDebito(idOrganizacao,idConta, pDataInicial, pDataFinal );

       liberaRelatorio := 1; //ver como fazer .. pq nao estava exibindo o relatorio

      end;
    end;
    if ((liberaRelatorio) > 0) then
    begin

      if dmExtratoBancario.montarTabelaTemp(IncDay(pDataInicial, -1), 'SALDO ANTERIOR DA CONTA ' + descConta, tipoSaldo, vlrSaldoAnterior) then
      begin
        dmExtratoBancario.qryExtrato.Close;
        dmExtratoBancario.qryExtrato.Open;
       //ver como fazer com procedure
        exibirRelatorio(pDataInicial, pDataFinal);

      end
      else
      begin
        PempecMsg.MsgWarning('Não foi possível exibir o extrato bancário ...');
      end;

    end
    else
    begin
      PempecMsg.MsgWarning('Não existem dados para imprimir.');
    end
  end
 else begin PempecMsg.MsgError('Não foi possível conectar com o servidor de dados. '); end;
end;

procedure TfrmExtratoBancario.exibirRelatorio(dtInicial, dtFinal: TDate);
begin
  frxExtratoBancario.Clear;

  try
    if not (frxExtratoBancario.LoadFromFile(retornarCaminhoRelatorio)) then
    begin
      PempecMsg.MsgError('Relatório interno não localizado...');
    end
    else
    begin
      inicializarVariaveisRelatorio(dtInicial, dtFinal);
      frxExtratoBancario.OldStyleProgress := True;
      frxExtratoBancario.ShowProgress := True;
      frxExtratoBancario.ShowReport;
    end;

  finally
    FreeAndNil(dmExtratoBancario.qryDeletaTemp);
  end;

 limpaPanel;



end;

procedure TfrmExtratoBancario.FormClose(Sender: TObject; var Action: TCloseAction);
begin
 freeAndNilDM(Self);
 Action := caFree;
end;

procedure TfrmExtratoBancario.FormCreate(Sender: TObject);
begin
 inicializarDM(Self);
  limpaPanel;
end;

procedure TfrmExtratoBancario.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin

case key of
//  vk_f2: dxBtnEditar.Click;
 // vk_f4: dxBtnNovo.Click;
  vk_f10: dxBtnImprimir.Click;
end;


end;

procedure TfrmExtratoBancario.freeAndNilDM(Sender: TObject);
begin
 // nada
 if Assigned(dmExtratoBancario) then begin
    FreeAndNil(dmExtratoBancario);
 end;

end;


procedure TfrmExtratoBancario.gridExtratoTitleClick(Column: TColumn);
begin
  (gridExtrato.DataSource.DataSet as TFDQuery).IndexFieldNames :=Column.FieldName;
end;

procedure TfrmExtratoBancario.inicializarDM(Sender: TObject);
begin
  if not (Assigned(dmExtratoBancario)) then
  begin
    dmExtratoBancario := TdmExtratoBancario.Create(Self);
  end;

   if not (Assigned(dmOrganizacao)) then
  begin
    dmOrganizacao := TdmOrganizacao.Create(Self);
  end;


  dmConexao.conectarBanco;

  if not uUtil.Empty(TOrgAtual.getId) then begin

        iDOrganizacao := TOrgAtual.getId;
  end;
 indiceConta :=0;
 limpaPanel;
 dxBarDataInicial.Date := Now;
 dxBarDataFinal.Date   := Now;
end;


procedure TfrmExtratoBancario.inicializarVariaveisRelatorio(dtInicial,  dtFinal: TDate);
begin

  with frxExtratoBancario.Variables do
  begin

    if dmOrganizacao.qryDadosEmpresa.RecordCount < 1 then begin

       dmOrganizacao.carregarDadosOrganizacaoFNC(idOrganizacao);

    end;

    Variables['strRazaoSocial'] :=
      QuotedStr(dmOrganizacao.qryDadosEmpresa.FieldByName('RAZAO_SOCIAL')
      .AsString);
    Variables['strCNPJ'] :=
      QuotedStr(dmOrganizacao.qryDadosEmpresa.FieldByName('CNPJ').AsString);
    Variables['strEndereco'] :=
      QuotedStr(dmOrganizacao.qryDadosEmpresa.FieldByName('ENDERECO').AsString);
    Variables['strCEP'] :=
      QuotedStr(dmOrganizacao.qryDadosEmpresa.FieldByName('CEP').AsString);
    Variables['strCidade'] :=
      QuotedStr(dmOrganizacao.qryDadosEmpresa.FieldByName('CIDADE').AsString);
    Variables['strUF'] :=
      QuotedStr(dmOrganizacao.qryDadosEmpresa.FieldByName('UF').AsString);
    Variables['strPeriodo'] :=QuotedStr( ' de  ' + DateToStr(dtInicial) + '  até  ' + DateToStr(dtFinal));
  end;
end;

procedure TfrmExtratoBancario.limpaPanel;
begin

 FsListaIdContas := TStringList.Create;
 //frmContaBancaria1.obterTodos(iDOrganizacao, frmContaBancaria1.cbbConta, FsListaIdContas);
 //frmContaBancaria1.cbbConta.Enabled := False;
 dxBarCbxContas.ItemIndex := 0;


 chkTipo.EditValue := True;
 chkCheque.EditValue := False;
 chkPDF.EditValue := True;
 dxBtnImprimir.Enabled := False;
 limpaStatusBar;

 //combo novo
  obterTodos(idOrganizacao, dxBarCbxContas, FsListaIdContas);

  if indiceConta >0 then begin
 dxBarCbxContas.Enabled := True;
 dxBarCbxContas.ItemIndex := indiceConta;
 end;


end;

function TfrmExtratoBancario.retornarCaminhoRelatorio: string;
var tipo : Integer;
begin
 tipo := 0;
 // Result := ExtractFilePath(Application.ExeName) + '\extratoBancario.fr3';
//  tipo = 0 =comum = se for 1 exibe o rel com totalizador diario

  if chkTipo.EditValue = True then begin
     tipo := 1;
  end;


 Result := uUtil.TPathRelatorio.getExtratoBancario(tipo);


end;


function TfrmExtratoBancario.validarForm: Boolean;
var sucesso : Boolean;
begin
   sucesso := True;

   if dxBarCbxContas.ItemIndex < 1 then begin
     sucesso := False;
     PempecMsg.MsgError('Precisa selecionar uma conta.');

   end;


   Result := sucesso;

end;

function TfrmExtratoBancario.obterSaldoAnterior(pIdOrganizacao, pIDConta: string;   pDataInicial, pDataFinal: TDate): Currency;
  var
  valorDB, valorCR,  vlrSaldo : Currency;
  pDataInicio: TDate  ;
  conta :TContaBancariaModel;
begin
  valorDB :=0; valorCR :=0;  vlrSaldo :=0;

   conta := TContaBancariaModel.Create;
   conta.FIDorganizacao := pIdOrganizacao;
   conta.FID := pIDConta;
   conta := TContaBancariaDAO.obterPorID(conta);

  try

      valorDB := TContaBancariaDebitoDAO.obterSaldoAnterior(conta, pDataInicial) ;
      valorCR := TContaBancariaCreditoDAO.obterSaldoAnterior(conta, pDataInicial);

      vlrSaldo := valorCR - valorDB;

  except
  raise Exception.Create('Erro ao obter saldo anterior...');

  end;

   Result := vlrSaldo;
end;



procedure TfrmExtratoBancario.registraMovimentacao(pOrg, pTable, pAcao, pDsc, pStatus: string);
begin
  TMDDAO.registroMD(pOrg, pTable, pAcao, pDsc, pStatus);

end;

procedure TfrmExtratoBancario.msgStatusBar(pPosicao : Integer; msg :string);
begin
dxStatusBar.Panels[pPosicao].Text := msg;
Application.ProcessMessages;
end;

procedure TfrmExtratoBancario.limpaStatusBar;
begin
dxStatusBar.Panels[0].Text := 'Status ';
dxStatusBar.Panels[1].Text := 'Ativo. ';
dxStatusBar.Panels[2].Text := ' Painel:  ';
dxStatusBar.Panels[3].Text := 'Teclas de atalho:  [F10] = Imprime  ';

end;



function TfrmExtratoBancario.obterTodos(pIdValue: string; var combo: TdxBarCombo; var listaID: TStringList): boolean;
begin

dmConexao.conectarBanco;
idOrganizacao := TOrgAtual.getId;

  listaID := TStringList.Create;
  listaID.Clear;
  listaID.Add('Sem ID');
  combo.Items.Clear;
  combo.Items.Add('Selecione uma conta ');

   qryObterTodos.Close;
   qryObterTodos.Connection := dmConexao.conn;
   qryObterTodos.ParamByName('PIDORGANIZACAO').AsString := idOrganizacao;
   qryObterTodos.Open;

   if not qryObterTodos.IsEmpty then begin
          qryObterTodos.First;

      while not qryObterTodos.Eof do
        begin
          combo.Items.Add(qryObterTodos.FieldByName('CONTA').AsString);
          listaID.Add(qryObterTodos.FieldByName('ID_CONTA_BANCARIA').AsString);
          qryObterTodos.Next;
        end;
      qryObterTodos.Close;
      combo.ItemIndex := 0;

   end;

end;


function TfrmExtratoBancario.limpaTabelaTemp: Boolean;
var
sucesso : Boolean;
qryDeletaTemp : TFDQuery;
begin
  dmConexao.conectarBanco;
  sucesso := False;
  qryDeletaTemp := TFDQuery.Create(Self);

  if not dmConexao.conn.InTransaction then
    dmConexao.conn.StartTransaction;

  try
    try

      qryDeletaTemp.Close;
      qryDeletaTemp.Connection := dmConexao.conn;
      qryDeletaTemp.SQL.Clear;
      qryDeletaTemp.SQL.Add('DELETE FROM TEMP_EXTRATO WHERE 1=1');
      qryDeletaTemp.ExecSQL;

      if qryDeletaTemp.RowsAffected > 0 then
      begin
        sucesso := True;
      end;

      Result := sucesso;

      if dmConexao.conn.InTransaction then
        dmConexao.conn.CommitRetaining;

    except
      if dmConexao.conn.InTransaction then
        dmConexao.conn.RollbackRetaining;

      Result := sucesso;
      raise Exception.Create('Erro ao tentar limpar a tabela temporária...');

    end;

  finally
    FreeAndNil(qryDeletaTemp);
  end;

end;

end.
