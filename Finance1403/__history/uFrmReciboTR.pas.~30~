unit uFrmReciboTR;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, dxSkinsCore, dxSkinsDefaultPainters, udmConexao, uUtil, uDMOrganizacao,
  cxGraphics, cxControls, cxLookAndFeels, cxLookAndFeelPainters, dxRibbonSkins,
  dxRibbonCustomizationForm, dxStatusBar, cxClasses, dxRibbon, dxBar,  uContaContabilModel,
  uFrameContaContabil, Data.DB, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, uTituloReceberDAO, uTituloReceberModel,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client, Vcl.Grids, Vcl.DBGrids, Vcl.StdCtrls, cxContainer,
  cxEdit, cxTextEdit, cxBarEditItem, EMsgDlg, uFrameBanco, ENumEd, frxClass,
  frxDBSet, EExtenso;

type
  TfrmReciboTR = class(TForm)
    dxBarManager1: TdxBarManager;
    dxRibbon1Tab1: TdxRibbonTab;
    dxRibbon1: TdxRibbon;
    dxStatusBar: TdxStatusBar;
    dbgrd1: TDBGrid;
    dxBarManager1Bar3: TdxBar;
    dxBtnFechar: TdxBarLargeButton;
    dxBarManager1Bar5: TdxBar;
    cxbrdtmPesquisa: TcxBarEditItem;
    msgDlg: TEvMsgDlg;
    dsGrid: TDataSource;
    qryPreencheGrid: TFDQuery;
    dxBtnImprime: TdxBarLargeButton;
    dxBarManager1Bar1: TdxBar;
    dxBtnImpimir: TdxBarLargeButton;
    frxReportRecibo: TfrxReport;
    frxDBRecibo: TfrxDBDataset;
    qryObterDados: TFDQuery;
    qryBaixaTRCaixa: TFDQuery;
    qryBaixaTRCheque: TFDQuery;
    qryObterTRBBanco: TFDQuery;
    extenso: TEvExtenso;
    frxDBTPQuitados: TfrxDBDataset;
    frxDBTRBCaixa: TfrxDBDataset;
    frxTRBCheque: TfrxDBDataset;
    frxTRBBanco: TfrxDBDataset;
    qryObterIDTRB: TFDQuery;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure dxBtnFecharClick(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure dbgrd1TitleClick(Column: TColumn);
    procedure cxbrdtmPesquisaCurChange(Sender: TObject);
    procedure dsGridDataChange(Sender: TObject; Field: TField);
    procedure dxBtnImpimirClick(Sender: TObject);
  private
    { Private declarations }
   pIdValue,  pIdOrganizacao, pIdUsuario :string;
 validate, vlrExtenso,  pTable, pIdTable :string;
  tituloTRB :string;
    procedure inicializarDM(Sender: TObject);
    procedure freeAndNilDM(Sender: TObject);
    procedure limparPanel;
    procedure msgStatusBar(pPosicao: Integer; msg: string);
    procedure limpaStatusBar;
    procedure LimpaTela(Form: TForm);
    procedure controleEdit(Form: TForm; pValue: Boolean);

    function obterIDTRB(pIdOrganizacao, pIdtitulo: String): string;

    function obterTRBBanco(pIdOrganizacao, pIdTRB: String): Boolean;
    function obterTRBCaixa(pIdOrganizacao, pIdTRB: String): Boolean;
    function obterTRBCheque(pIdOrganizacao, pIdTRB: String): Boolean;

    procedure exibirRelatorio(tipo: Integer);
    procedure inicializarVariaveisRelatorio(dtInicial, dtFinal: TDate);

  public
    { Public declarations }
    procedure preencheGrid(pIdOrganizacao, pIdTitulo: string);
    function obterDadosRecibo(pIdOrganizaco, pIdTitulo :string) : Boolean;
    constructor Create(AOwner: TComponent; titulo :TTituloReceberModel); overload;


  end;

var
  frmReciboTR: TfrmReciboTR;

implementation

{$R *.dfm}
constructor TfrmReciboTR.Create(AOwner: TComponent;  titulo: TTituloReceberModel);
begin

inherited Create(AOwner);

 pTable := 'TITULO_RECEBER';
 Self.Caption := pTable;
 dxRibbon1Tab1.Caption := 'Emissão de recibos';
 pIdOrganizacao := uUtil.TOrgAtual.getId;
 pIdValue := titulo.FID;
 inicializarDM(Self);
 limparPanel;

 if not uUtil.Empty(pIdValue) then begin
           titulo := TTituloReceberModel.Create;
           titulo.FIDorganizacao := pIdOrganizacao;
           titulo.FID := pIdValue;
           titulo := TTituloReceberDAO.obterPorID(titulo);
         if not uUtil.Empty(titulo.FID) then begin dxBtnImpimir.Enabled := True; end;

           vlrExtenso := UpperCase(extenso.GetExtenso(titulo.FvalorNominal));
           validate := 'tr'+ pIdValue;
           tituloTRB := obterIDTRB(pIdOrganizacao, titulo.FID);
            if not uUtil.Empty(tituloTRB) then
          begin

        // talvez nao precise obterTRBaixaPorTitulo(pRegistroProvisao, idOrganizacao, tituloPagarQuitado);

            // baixa POR TEsouraria
            obterTRBCaixa(pIdOrganizacao, tituloTRB);
            //obter por Cheque
            obterTRBCheque(pIdOrganizacao, tituloTRB);
            // obter baixa por Banco
            obterTRBBanco(pIdOrganizacao, tituloTRB);

             {
            // dts acrescimo
            obterTRBAC(pIdOrganizacao, tituloTRB);
            // dts deducao
            obterTRBDE(pIdOrganizacao, tituloTRB);
                      }

          end;

         dbgrd1.DataSource.DataSet.Close;
         cxbrdtmPesquisa.EditValue := titulo.FnumeroDocumento;
         preencheGrid(pIdOrganizacao, titulo.FID);


 end;

end;

procedure TfrmReciboTR.cxbrdtmPesquisaCurChange(Sender: TObject);
begin
  dbgrd1.DataSource.DataSet.Locate('DOC',UpperCase(cxbrdtmPesquisa.CurEditValue),[loPartialKey]);
end;

procedure TfrmReciboTR.dbgrd1TitleClick(Column: TColumn);
begin
 (dbgrd1.DataSource.DataSet as TFDQuery).IndexFieldNames :=Column.FieldName;
end;
procedure TfrmReciboTR.dsGridDataChange(Sender: TObject; Field: TField);
var
tituloTRB :string;
begin
      cxbrdtmPesquisa.Enabled := True;
      dxBtnImpimir.Enabled := True;

   pIdValue := (dbgrd1.DataSource.DataSet as TFDQuery).FieldByName('ID_TITULO_RECEBER').AsString;

        if obterDadosRecibo(pIdOrganizacao, pIdValue) then
        begin
           vlrExtenso := UpperCase(extenso.GetExtenso(qryObterDados.FieldByName('VALOR_PAGO').AsCurrency));
           validate := 'tr'+ pIdValue;
           tituloTRB := obterIDTRB(pIdOrganizacao, pIdValue);

          if not uUtil.Empty(tituloTRB) then
          begin

            // baixa POR TEsouraria
            obterTRBCaixa(pIdOrganizacao, tituloTRB);
            //obter por Cheque
            obterTRBCheque(pIdOrganizacao, tituloTRB);
            // obter baixa por Banco
            obterTRBBanco(pIdOrganizacao, tituloTRB);

          end;

        end;


end;



procedure TfrmReciboTR.dxBtnFecharClick(Sender: TObject);
begin
 PostMessage(Self.Handle, WM_CLOSE, 0, 0);
end;



procedure TfrmReciboTR.dxBtnImpimirClick(Sender: TObject);
begin

   if not uutil.Empty(pIdValue) then begin
       exibirRelatorio(1);
    end;


end;

procedure TfrmReciboTR.FormClose(Sender: TObject; var Action: TCloseAction);
begin
 freeAndNilDM(Self);
 Action :=caFree;

end;

procedure TfrmReciboTR.FormCreate(Sender: TObject);
begin
 pTable := 'TITULO_RECEBER';
 Self.Caption := pTable;
 dxRibbon1Tab1.Caption := 'Emissão de recibos';

 inicializarDM(Self);
 limparPanel;
end;

procedure TfrmReciboTR.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
 case key of
  vk_f3: dxBtnImpimir.Click;
end;

end;

procedure TfrmReciboTR.freeAndNilDM(Sender: TObject);
begin

//nada
end;


procedure TfrmReciboTR.inicializarDM(Sender: TObject);
begin
 //nada
 if not Assigned(dmOrganizacao) then begin
    dmOrganizacao := TdmOrganizacao.Create(Self);
 end;


end;

procedure TfrmReciboTR.limparPanel();
var
  I: Integer;
begin
 limpaStatusBar;
 pIdOrganizacao := UUtil.TOrgAtual.getId;
 pIdUsuario :=uutil.TUserAtual.getUserId;
// frmPeriodo1.inicializa(IncDay(Now, -1), Now);

 //botao editar muda
  dbgrd1.Enabled :=True;
 // LimpaTela(Self);
  //botao novo
   cxbrdtmPesquisa.Enabled := True;
   preencheGrid(pIdOrganizacao, pIdValue);
  //xBtnImpimir.Enabled :=False;


end;

procedure TfrmReciboTR.msgStatusBar(pPosicao : Integer; msg :string);
begin
dxStatusBar.Panels[pPosicao].Text := msg;
Application.ProcessMessages;
end;

function TfrmReciboTR.obterDadosRecibo(pIdOrganizaco,  pIdTitulo: string): Boolean;
  begin

dmConexao.conectarBanco;
try
 qryObterDados.Close;
 qryObterDados.Connection := dmConexao.conn;
 qryObterDados.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizaco;
 qryObterDados.ParamByName('PID').AsString := pIdTitulo;
 qryObterDados.Open;

except
raise Exception.Create('Erro ao obter dados do titulo..'  );

end;

Result := not qryObterDados.IsEmpty;

end;

procedure TfrmReciboTR.preencheGrid(pIdOrganizacao, pIdTitulo: string);
var
sqlCmd :string;
begin

dmConexao.conectarBanco;


    sqlCmd := ' SELECT TP.ID_TITULO_RECEBER, ' +
              ' TP.NUMERO_DOCUMENTO AS DOC,       ' +
              ' TP.ID_ORGANIZACAO,'  +
              ' (H.descricao || '' '' ||  TP.DESCRICAO) AS DESCRICAO,' +
              ' TRB.VALOR_PAGO, TP.ID_SACADO,' +
              ' TP.data_pagamento, C.nome AS CLIENTE, TP.PARCELA' +
              ' FROM TITULO_RECEBER TP' +
              ' LEFT OUTER JOIN TITULO_RECEBER_BAIXA TRB ON (TRB.id_titulo_receber = TP.id_titulo_receber) AND (TRB.id_organizacao = TP.id_organizacao) '+
              ' LEFT OUTER JOIN SACADO C ON (C.id_sacado = TP.id_sacado) AND (C.id_organizacao = TP.id_organizacao)' +
              ' LEFT OUTER JOIN HISTORICO H ON (H.id_historico =  TP.id_historico) AND (H.id_organizacao = TP.id_organizacao)' +
              ' WHERE ( TP.ID_ORGANIZACAO = :PIDORGANIZACAO ) AND (TP.ID_TITULO_RECEBER = :PID) ' +
              ' AND  ( TP.ID_TIPO_STATUS IN (''PARCIAL'', ''QUITADO'') )' +
              ' ORDER BY TP.DATA_EMISSAO DESC, TP.VALOR_NOMINAL DESC ';


    qryPreencheGrid.Close;
    qryPreencheGrid.Connection := dmConexao.conn;
    qryPreencheGrid.SQL.Clear;
    qryPreencheGrid.SQL.Add(sqlCmd);
    qryPreencheGrid.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
    qryPreencheGrid.ParamByName('PID').AsString := pIdTitulo;



   if uUtil.Empty(pIdTitulo) then begin


    sqlCmd := ' SELECT TP.ID_TITULO_RECEBER, ' +
              ' TP.NUMERO_DOCUMENTO AS DOC,       ' +
              ' TP.ID_ORGANIZACAO,'  +
              ' (H.descricao || '' '' ||  TP.DESCRICAO) AS DESCRICAO,' +
              ' TRB.VALOR_PAGO, TP.ID_SACADO,' +
              ' TP.data_pagamento, C.nome AS CLIENTE, TP.PARCELA' +
              ' FROM TITULO_RECEBER TP' +
              ' LEFT OUTER JOIN TITULO_RECEBER_BAIXA TRB ON (TRB.id_titulo_receber = TP.id_titulo_receber) AND (TRB.id_organizacao = TP.id_organizacao) '+
              ' LEFT OUTER JOIN SACADO C ON (C.id_sacado = TP.id_sacado) AND (C.id_organizacao = TP.id_organizacao)' +
              ' LEFT OUTER JOIN HISTORICO H ON (H.id_historico =  TP.id_historico) AND (H.id_organizacao = TP.id_organizacao)' +
              ' WHERE ( TP.ID_ORGANIZACAO = :PIDORGANIZACAO ) ' +
              ' AND  ( TP.ID_TIPO_STATUS IN (''PARCIAL'', ''QUITADO'') )' +
              ' ORDER BY TP.DATA_EMISSAO DESC, TP.VALOR_NOMINAL DESC ';


    qryPreencheGrid.Close;
    qryPreencheGrid.Connection := dmConexao.conn;
    qryPreencheGrid.SQL.Clear;
    qryPreencheGrid.SQL.Add(sqlCmd);
    qryPreencheGrid.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;


   end;

    qryPreencheGrid.Open;


    qryPreencheGrid.RecordCount;

    (dbgrd1.DataSource.DataSet as TFDQuery).Last;
    (dbgrd1.DataSource.DataSet as TFDQuery).First;

end;

procedure TfrmReciboTR.limpaStatusBar;
begin
dxStatusBar.Panels[0].Text := 'Status ';
dxStatusBar.Panels[1].Text := 'Ativo. Teclas de atalho:  [F3] = Imprime ';
end;

procedure TfrmReciboTR.LimpaTela(Form: TForm);
var
  i: Integer;
begin

  for i := 0 to Form.ComponentCount - 1 do
  begin
    if Form.Components[i] is TCustomEdit then
    begin
      (Form.Components[i] as TCustomEdit).Clear;
    end;

    if Form.Components[i] is TLabel then
    begin
      TLabel(Form.Components[i]).Caption := '';
    end;

    if Form.Components[i] is TEdit then
    begin
      TEdit(Form.Components[i]).Clear;
    end;

    if Form.Components[i] is TEvNumEdit then
    begin
      TEvNumEdit(Form.Components[i]).Clear ;
    end;

    if Form.Components[i] is TComboBox then
    begin
      TComboBox(Form.Components[i]).Clear ;
      TComboBox(Form.Components[i]).ItemIndex := 0;
    end;



   end;
end;

procedure TfrmReciboTR.controleEdit(Form: TForm; pValue :Boolean);
var
i: Integer;
begin

 for i := 0 to Form.ComponentCount - 1 do
  begin
    if Form.Components[i] is TCustomEdit then
    begin
      (Form.Components[i] as TCustomEdit).Enabled :=pValue;
    end;

    if Form.Components[i] is TLabel then
    begin
      TLabel(Form.Components[i]).Enabled :=pValue;
    end;

    if Form.Components[i] is TEdit then
    begin
      TEdit(Form.Components[i]).Enabled :=pValue;
    end;

    if Form.Components[i] is TEvNumEdit then
    begin
      TEvNumEdit(Form.Components[i]).Enabled :=pValue;
    end;

    if Form.Components[i] is TComboBox then
    begin
      TComboBox(Form.Components[i]).Enabled :=pValue;
    end;

   end;


end;



function TfrmReciboTR.obterIDTRB(pIdOrganizacao, pIdtitulo: String): string;
var
idTRB : string;
begin
  idTRB :='';
  Result := '';
  dmConexao.conectarBanco;

  qryObterIDTRB.Close;
  qryObterIDTRB.Connection := dmConexao.Conn;

  qryObterIDTRB.ParamByName('PIDORGANIZACAO').AsString :=  pIdOrganizacao;
  qryObterIDTRB.ParamByName('PIDTITULO').AsString :=  pIdtitulo;
  qryObterIDTRB.Open;

   if not qryObterIDTRB.IsEmpty then
          idTRB := qryObterIDTRB.FieldByName('ID_TITULO_RECEBER_BAIXA').AsString;


  Result := idTRB;

end;


function TfrmReciboTR.obterTRBCaixa(pIdOrganizacao, pIdTRB: String): Boolean;
begin
  Result := false;
  //obtem os TR pago pela tesouraria

 dmConexao.conectarBanco;

  qryBaixaTRCaixa.Close;
  qryBaixaTRCaixa.Connection := dmConexao.Conn;
  qryBaixaTRCaixa.ParamByName('PIDORGANIZACAO').AsString :=
    pIdOrganizacao;
  qryBaixaTRCaixa.ParamByName('PIDTITULOBAIXA').AsString :=
    pIdTRB;
  qryBaixaTRCaixa.Open;

  Result := not qryBaixaTRCaixa.IsEmpty;

end;

function TfrmReciboTR.obterTRBCheque(pIdOrganizacao, pIdTRB  : String): Boolean;
begin

  Result := false;

 dmConexao.conectarBanco;

  qryBaixaTRCheque.Close;
  qryBaixaTRCheque.Connection := dmConexao.Conn;
  qryBaixaTRCheque.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
  qryBaixaTRCheque.ParamByName('PIDTITULOBAIXA').AsString :=pIdTRB;
  qryBaixaTRCheque.Open;

  Result := not qryBaixaTRCheque.IsEmpty;
end;


function TfrmReciboTR.obterTRBBanco(pIdOrganizacao, pIdTRB  : String): Boolean;

begin
  Result := false;

  dmConexao.conectarBanco;

  qryObterTRBBanco.Close;
  qryObterTRBBanco.Connection := dmConexao.Conn;
  qryObterTRBBanco.ParamByName('PIDORGANIZACAO').AsString :=   pIdOrganizacao;
  qryObterTRBBanco.ParamByName('PIDTITULOBAIXA').AsString := pIdTRB;

  qryObterTRBBanco.Open;

  Result := not qryObterTRBBanco.IsEmpty;

end;


procedure TfrmReciboTR.exibirRelatorio(tipo: Integer);
var
 retornarCaminhoRelatorio :string;
begin

retornarCaminhoRelatorio := uUtil.TPathRelatorio.getReciboTR;

  frxReportRecibo.Clear;

  if not(frxReportRecibo.LoadFromFile(retornarCaminhoRelatorio))
  then
  begin

  end
  else
  begin
    inicializarVariaveisRelatorio(now, now);
    frxReportRecibo.OldStyleProgress := true;
    frxReportRecibo.ShowProgress := true;
    frxReportRecibo.ShowReport;

  end;
end;


procedure TfrmReciboTR.inicializarVariaveisRelatorio(dtInicial, dtFinal: TDate) ;
begin
  with frxReportRecibo.Variables do
  begin
    Variables['strRazaoSocial'] :=
      QuotedStr(dmOrganizacao.qryDadosEmpresa.FieldByName('RAZAO_SOCIAL')
      .AsString);
    Variables['strCNPJ'] :=
      QuotedStr(dmOrganizacao.qryDadosEmpresa.FieldByName('CNPJ').AsString);
    Variables['strEndereco'] :=
      QuotedStr(dmOrganizacao.qryDadosEmpresa.FieldByName('ENDERECO').AsString);
    Variables['strCEP']        := QuotedStr(dmOrganizacao.qryDadosEmpresa.FieldByName('CEP').AsString);
    Variables['strCidade']     := QuotedStr(dmOrganizacao.qryDadosEmpresa.FieldByName('CIDADE').AsString);
    Variables['strUF']         := QuotedStr(dmOrganizacao.qryDadosEmpresa.FieldByName('UF').AsString);
    Variables['strPeriodo']    := QuotedStr( ' de  ' + DateToStr(dtInicial) + '  até  ' + DateToStr(dtFinal));
    Variables['strTipoStatus'] := 'TODOS';
    Variables['strExtenso']    := QuotedStr(vlrExtenso);
    Variables['strValidate']   := QuotedStr(validate);



  end;
end;




end.
