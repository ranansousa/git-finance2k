unit uFrameResponsavel;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uFrameGeneric, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS,udmConexao,
  FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, uFuncionarioModel, uFuncionarioDAO,
  Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client, Vcl.StdCtrls;

type
  TframeResponsavel = class(TframeGeneric)
    lblResponsavel: TLabel;
  private
    { Private declarations }
  public
    { Public declarations }

    function obterPorID(pID :TFuncionarioModel): TFuncionarioModel;
    function obterTodos(pIdOrganizacao: string; var combo: TComboBox; var listaID: TStringList): boolean;
    function obterTodosAtivos(pIdOrganizacao: string; var combo: TComboBox; var listaID: TStringList): boolean;
    procedure limpaFrame;

  end;

var
  frameResponsavel: TframeResponsavel;

implementation

{$R *.dfm}

{ TframeResponsavel }


function TframeResponsavel.obterPorID(pID: TFuncionarioModel): TFuncionarioModel;
var
  qryObter: TFDQuery;
  cmd: string;
  local: TFuncionarioModel;
begin
  local := TFuncionarioModel.Create;
  dmConexao.conectarBanco;
  try
    cmd := ' SELECT F.ID_FUNCIONARIO, F.ID_ORGANIZACAO, F.ID_ENDERECO,F.ID_CONTATO, F.NOME, F.CPF  '+
           ' FROM FUNCIONARIO F WHERE (F.ID_ORGANIZACAO = :PIDORGANIZACAO) AND  (F.ID_FUNCIONARIO = :PID) ';

    qryObter := TFDQuery.Create(Self);
    qryObter.Close;
    qryObter.Connection := dmConexao.conn;
    qryObter.SQL.Clear;
    qryObter.SQL.Add(cmd);
    qryObter.ParamByName('PIDORGANIZACAO').AsString := pID.FIDorganizacao;
    qryObter.ParamByName('PID').AsString := pID.FID;
    qryObter.Open;

    if not qryObter.IsEmpty then
    begin

      local.FID             := qryObter.FieldByName('ID_FUNCIONARIO').AsString;
      local.FIDorganizacao  := qryObter.FieldByName('ID_ORGANIZACAO').AsString;
      local.FIDEndereco     := qryObter.FieldByName('ID_ENDERECO').AsString;
      local.FIDContato      := qryObter.FieldByName('ID_CONTATO').AsString;
      local.FNOME           := qryObter.FieldByName('NOME').AsString;
      local.FCPF            := qryObter.FieldByName('CPF').AsString;

    end;

  except
    raise Exception.Create('Erro ao obter Responsável por ID');

  end;

  Result := local;

end;



function TframeResponsavel.obterTodos(pIdOrganizacao: string; var combo: TComboBox; var listaID: TStringList): boolean;
var
qryObterTodos :TFDQuery;
 cmd :string;
begin
  cmd := ' SELECT F.ID_FUNCIONARIO, F.NOME ' +
         ' FROM   FUNCIONARIO F  ' +
         ' WHERE (F.ID_ORGANIZACAO = :PIDORGANIZACAO) ' +
         ' ORDER BY F.NOME ';


  dmConexao.conectarBanco;


  listaID := TStringList.Create;
  listaID.Clear;
  listaID.Add('Sem ID');
   combo.Clear;
   combo.Items.Add('<<< RESPONSÁVEL  >>>');

   qryObterTodos := TFDQuery.Create(Self);
   qryObterTodos.Close;
   qryObterTodos.Connection := dmConexao.conn;
   qryObterTodos.SQL.Clear;
   qryObterTodos.SQL.Add(cmd);

   qryObterTodos.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
   qryObterTodos.Open;

   if not qryObterTodos.IsEmpty then begin
          qryObterTodos.First;

      while not qryObterTodos.Eof do
        begin
          combo.Items.Add(qryObterTodos.FieldByName('NOME').AsString);
          listaID.Add(qryObterTodos.FieldByName('ID_FUNCIONARIO').AsString);
          qryObterTodos.Next;
        end;
      qryObterTodos.Close;
      combo.ItemIndex := 0;

   end;

end;



function TframeResponsavel.obterTodosAtivos(pIdOrganizacao: string; var combo: TComboBox; var listaID: TStringList): boolean;
begin
  TFuncionarioDAO.obterTodosAtivos(pIdOrganizacao, combo, listaID);
end;

procedure TframeResponsavel.limpaFrame;
var
i :Integer;
begin

// limpa os componentes da aba q chegou

  for i := 0 to Self.ComponentCount - 1 do
  begin
    if Components[i] is TCustomEdit then
    begin
         (Components[i] as TCustomEdit).Clear;
    end;

    if Components[i] is TEdit then
    begin

         TEdit(Components[i]).Clear;
    end;

     if Components[i] is TComboBox then
    begin

     // TComboBox(Components[i]).Clear;
      TComboBox(Components[i]).ItemIndex := 0;
    end;

   end;
end;



end.
