unit FormSearch;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, FormBase, ExtCtrls, DBCtrls, ComCtrls, StdCtrls, ToolWin, Grids,
  DBGrids, ImgList, DB, IBase, DBClient, Provider, FMTBcd, SqlExpr, Buttons,
  EMsgDlg, Constants, ELibFnc,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  FireDAC.Stan.Async, FireDAC.DApt, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
  System.ImageList;

type
  T_frmFormSearch = class(TFormSearch)

    ToolBar1: TToolBar;
    _cbxField: TComboBox;
    Label1: TLabel;
    _edtValue: TEdit;
    _btnLocalizar: TToolButton;
    _btnSair: TToolButton;
    ToolButton3: TToolButton;
    DBNavigator1: TDBNavigator;
    ImageList1: TImageList;
    _cdsResultado: TClientDataSet;
    _pvdResultado: TDataSetProvider;
    _sqlConn1: TSQLQuery;
    _dtsConsulta: TDataSource;
    EvMsgDlg1: TEvMsgDlg;
    _dbgConsulta: TDBGrid;
    _sqlConn: TFDQuery;
    procedure _btnSairClick(Sender: TObject);
    procedure _btnLocalizarClick(Sender: TObject);
    procedure _dbgConsultaTitleClick(Column: TColumn);
    procedure _dbgConsultaDblClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure _edtValueExit(Sender: TObject);
    procedure _edtValueKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure _edtValueChange(Sender: TObject);
    procedure FormKeyPress(Sender: TObject; var Key: Char);
    procedure OnGetTextData(Sender: db.TField; var Text: String; DisplayText: Boolean);
    procedure OnGetTextTipoSalario(Sender: db.TField; var Text: String; DisplayText: Boolean);
    procedure FormKeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
  private
    { Private declarations }
    bOldProcessaMsg: Boolean;
  protected
    FoFieldsSearch: TList;
    FsFieldIndex: string;
    function GetFieldSearch(index: Integer): TFieldSearch;
    function get_DataSet: TDataSet; override;
    procedure doSQL(lcExpression: String); virtual;
  public
    procedure AddField(lcField, lcDesc: String; loType: IBase.TFieldType; lbSearch: boolean); override;
    property FieldSearch[index: Integer]: TFieldSearch read GetFieldSearch;
    property FieldIndex: string read FsFieldIndex;
   end;

implementation

{$R *.dfm}

{ TForm1 }

function T_frmFormSearch.GetFieldSearch(index: Integer): TFieldSearch;
begin
  if (index >= 0) and (index < FoFieldsSearch.Count) then begin
    Result := TFieldSearch(FoFieldsSearch.Items[index]);
  end else begin
    Result := nil;
  end;
end;

{Adiciona os campos que devem aparecer no DbGrid. O parâmetro lbSearch determina
se o campo deve ou não ser também incluido no ComBox para filtro de pesquisa.
(true = inclui, false = não inclui}
procedure T_frmFormSearch.AddField(lcField, lcDesc: String; loType: IBase.TFieldType; lbSearch: boolean);
var
  loField: TFieldSearch;
begin
  loField := TFieldSearch.Create;
  loField.Name := lcField;
  loField.Desc := lcDesc;
  loField.FieldType := loType;
  loField.Search := lbSearch;
  FoFieldsSearch.Add(loField);
  if lbSearch then begin
    _cbxField.Items.AddObject(loField.Desc, loField);
  end;
end;

function T_frmFormSearch.get_DataSet: TDataSet;
begin
  result := _cdsResultado;
end;

procedure T_frmFormSearch._btnSairClick(Sender: TObject);
begin
  Close;
end;

procedure T_frmFormSearch._btnLocalizarClick(Sender: TObject);
var
  loField: TFieldSearch;
  lcFilter: string;
begin
  if (_cbxField.ItemIndex = -1) or (Trim(_edtValue.Text) = '') then
    doSQL('')
  else
    begin
    loField := TFieldSearch(_cbxField.Items.Objects[_cbxField.ItemIndex]);

    case loField.FieldType of
//      IBase.ftVarChar: lcFilter := upperCase(loField.Name) + ' LIKE ' + QuotedStr('%' + upperCase(trim(_edtValue.Text)) + '%');
      IBase.ftVarChar: lcFilter := 'upper('+loField.Name+') LIKE ' + QuotedStr('%' + upperCase(trim(_edtValue.Text)) + '%');
      IBase.ftDate   : lcFilter := loField.Name + ' = ' + QuotedStr(_edtValue.Text);
      IBase.ftNumber : lcFilter := loField.Name + ' = ' + _edtValue.Text;
    else
      lcFilter := '';
    end;

    doSQL(lcFilter);
    end;
end;


procedure T_frmFormSearch.doSQL(lcExpression: String);
var
  liField, liFieldSearch, liColumnGrid: Integer;
  lsOrderBy,lsMsg: string;
  liPosOrderBy,liPos: Integer;
begin
  _sqlConn.Close;
  _sqlConn.Connection := Conn;
  _sqlConn.SQL.Assign(SQL);
  if Trim(lcExpression) <> '' then begin
    lsOrderBy := '';
    liPosOrderBy := Pos('ORDER BY',UpperCase(_sqlConn.SQL.Text));
    if (liPosOrderBy > 0) then begin
      lsOrderBy := Copy(_sqlConn.SQL.Text,liPosOrderBy,Length(_sqlConn.SQL.Text)-liPosOrderBy);
      _sqlConn.SQL.Text := Copy(_sqlConn.SQL.Text,1,liPosOrderBy-1);
    end;
    {se já existe a palavra WHERE...}
    if Pos('WHERE', UpperCase(_sqlConn.SQL.Text)) > 0 then begin
      _sqlConn.SQL.Add(' AND ' + lcExpression)
    end else begin
      _sqlConn.SQL.Add(' WHERE ' + lcExpression);
    end;
    _sqlConn.SQL.Text := _sqlConn.SQL.Text+' '+lsOrderBy;
  end;
  _cdsResultado.Close;
  {Desabilita o EurekaLog para evitar o delay quando ocorre uma exceção.
  É necessário a unit ExceptionLog7}
 // SetEurekaLogStateInThread(0,False);
  try
    _cdsResultado.Open;
  except on e: Exception do
//  except
    begin
      EvMsgDlg1.MsgError('A conteúdo informado no campo de pesquisa não é válido.|Exceção: '+e.Message);
      {Habilita o EurekaLog}
      exit;
    end;
  end;
  {Habilita o EurekaLog}

  _dbgConsulta.Columns.Clear;

  for liFieldSearch := 0 to FoFieldsSearch.Count-1 do begin
    for liField := 0 to _cdsResultado.Fields.Count-1 do begin
      if FieldSearch[liFieldSearch].Name = _cdsResultado.Fields[liField].FieldName then begin
        if ((_cdsResultado.Fields[liField].DataType = DB.ftDate) or (_cdsResultado.Fields[liField].DataType = DB.ftDateTime)) then begin
          _cdsResultado.FieldByName(_cdsResultado.Fields[liField].FieldName).OnGetText := OnGetTextData;
        end else if (_cdsResultado.Fields[liField].DataType = DB.ftBcd)
          or (_cdsResultado.Fields[liField].DataType = DB.ftFMTBcd)
        then begin
          TFloatField(_cdsResultado.FieldByName( _cdsResultado.Fields[liField].FieldName)).DisplayFormat := '##,###,###,##0.00';
        end else begin
        _dbgConsulta.Columns.Add;
        _dbgConsulta.Columns[_dbgConsulta.Columns.Count-1].FieldName := _cdsResultado.Fields[liField].FieldName;
        _dbgConsulta.Columns[_dbgConsulta.Columns.Count-1].Title.Caption := FieldSearch[liFieldSearch].Desc;
        _dbgConsulta.Columns[_dbgConsulta.Columns.Count-1].Title.Font.Style := [fsBold];
      end;
    end;
  end;
end;

procedure T_frmFormSearch._dbgConsultaTitleClick(Column: TColumn);
begin
  _cdsResultado.IndexFieldNames := Column.FieldName;
  FsFieldIndex := Column.FieldName;
end;

procedure T_frmFormSearch._dbgConsultaDblClick(Sender: TObject);
begin
  if _cdsResultado.IsEmpty then begin
    ShowMessage('Não há nenhum registro selecionado');
    ModalResult := mrNone ;
  end else begin
    ModalResult := mrOK;
  end;
end;

procedure T_frmFormSearch.FormCreate(Sender: TObject);
begin
  {Guarda o status de rInfoAplicacao.bProcessaMsg na variável bOldProcessaMsg,
   para que possa ser recuperado no OnExit desse campo ou no OnClose do Form.}
  bOldProcessaMsg := rInfoAplicacao.bProcessaMsg;
  FoFieldsSearch := TList.Create;
end;

procedure T_frmFormSearch._edtValueKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if key in ([VK_Tab,VK_Return]) then begin
    {Se estiver no campo edtValue e teclar enter ou tab, executa o método
     OnClick de _btnLocalizar.}
    _btnLocalizar.Click;
  end;
end;

procedure T_frmFormSearch._edtValueChange(Sender: TObject);
begin
  {Seta rInfoAplicacao.bProcessaMsg para false para que NÃO execute o método
   ProcessaMsg, reponsável pela passagem de campos com enter.}
  rInfoAplicacao.bProcessaMsg := false;
end;

procedure T_frmFormSearch._edtValueExit(Sender: TObject);
begin
 { TODO :
Validar os dados digitados nesse campo, ou seja, se o campo a ser
comparado for númerico só aceitar números, etc. }

  {Seta o status de rInfoAplicacao.bProcessaMsg para o estado que estava antes
   de entrar nesse form.}
  rInfoAplicacao.bProcessaMsg := bOldProcessaMsg;
end;

procedure T_frmFormSearch.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  {No fechamento do Form recupera o status de rInfoAplicacao.bProcessaMsg e
   libera a variável FoFieldSearch}
  rInfoAplicacao.bProcessaMsg := bOldProcessaMsg;
  FreeAndNil(FoFieldsSearch);
end;

procedure T_frmFormSearch.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if (_dbgConsulta.Focused)
    and (rInfoAplicacao.iOriginalLastKey = VK_RETURN)
  then begin
    if _cdsResultado.IsEmpty then begin
      ShowMessage('Não há nenhum registro selecionado');
      ModalResult := mrNone ;
    end else begin
      ModalResult := mrOK;
    end;
  end;
end;

procedure T_frmFormSearch.FormKeyPress(Sender: TObject; var Key: Char);
begin
  if _edtValue.Focused then begin
    rInfoAplicacao.bProcessaMsg := false;
  end else begin
    rInfoAplicacao.bProcessaMsg := true;
  end;
end;

procedure T_frmFormSearch.OnGetTextData(Sender: db.TField; var Text: String;
   DisplayText: Boolean);
begin
  if (Sender.AsDateTime < TP_DATA_INICIAL) or (Sender.AsDateTime >= TP_DATA_MAXIMA_LIMITE) then begin
    Text := '';
  end else begin
    Text := DateToStr(Sender.AsDateTime);
  end;
end;

procedure T_frmFormSearch.OnGetTextTipoSalario(Sender: db.TField; var Text:
  String; DisplayText: Boolean);
begin
  case Sender.AsInteger of
    0:Text := 'MENSALISTA';
    1:Text := 'HORISTA';
    2:Text := 'HORISTA HABITUAL';
    3:Text := 'DIARISTA';
    4:Text := 'COMISSIONISTA';
  end;
end;

procedure T_frmFormSearch.FormKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if Key = VK_ESCAPE then begin
    Self.Close;
  end;
end;

end.
