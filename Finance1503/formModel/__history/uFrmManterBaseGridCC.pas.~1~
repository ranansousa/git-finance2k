unit uFrmManterBaseGridCC;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, dxSkinsCore, dxSkinsDefaultPainters, udmConexao, uUtil, uDMOrganizacao,
  cxGraphics, cxControls, cxLookAndFeels, cxLookAndFeelPainters, dxRibbonSkins,
  dxRibbonCustomizationForm, dxStatusBar, cxClasses, dxRibbon, dxBar,  uContaContabilModel,
  uFrameContaContabil, Data.DB, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client, Vcl.Grids, Vcl.DBGrids, Vcl.StdCtrls, cxContainer,
  cxEdit, cxTextEdit, cxBarEditItem;

type
  TfrmManter = class(TForm)
    dxBarManager1: TdxBarManager;
    dxRibbon1Tab1: TdxRibbonTab;
    dxRibbon1: TdxRibbon;
    dxStatusBar: TdxStatusBar;
    frmContaContabil1: TfrmContaContabil;
    dbgrd1: TDBGrid;
    dsGrid: TDataSource;
    qryPreencheGrid: TFDQuery;
    edtDescricaoConta: TEdit;
    edtCODREDUZ: TEdit;
    lbl1: TLabel;
    edtContaContabil: TEdit;
    lbl2: TLabel;
    lbl3: TLabel;
    edtHistorico: TEdit;
    lbl4: TLabel;
    cbbTipo: TComboBox;
    edtCodHistPadrao: TEdit;
    lbl5: TLabel;
    dxBarManager1Bar1: TdxBar;
    dxBtnEditar: TdxBarLargeButton;
    dxBarSalvar: TdxBar;
    dxBtnSalvar: TdxBarLargeButton;
    dxBarManager1Bar2: TdxBar;
    dxBtnNovo: TdxBarLargeButton;
    dxBarManager1Bar3: TdxBar;
    dxBtnFechar: TdxBarLargeButton;
    dxBarManager1Bar4: TdxBar;
    dxBtnDeletar: TdxBarLargeButton;
    dxBarManager1Bar5: TdxBar;
    cxbrdtmPesquisa: TcxBarEditItem;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure dsGridDataChange(Sender: TObject; Field: TField);
    procedure frmContaContabil1cbbContaContabilChange(Sender: TObject);
    procedure dxBtnEditarClick(Sender: TObject);
    procedure dxBtnSalvarClick(Sender: TObject);
    procedure dxBtnFecharClick(Sender: TObject);
    procedure dxBtnNovoClick(Sender: TObject);
    procedure dxBtnDeletarClick(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure dbgrd1TitleClick(Column: TColumn);
    procedure cxbrdtmPesquisaCurChange(Sender: TObject);
  private
    { Private declarations }
  pIdContaContabil, pIdHistorico,  pIdOrganizacao, pIdUsuario :string;
FslistaTipo,    FsListaIdContas : TStringList;
    procedure inicializarDM(Sender: TObject);
    procedure freeAndNilDM(Sender: TObject);
    procedure limparPanel;
    procedure msgStatusBar(pPosicao: Integer; msg: string);
    procedure limpaStatusBar;
    function obterTipoHistorico(pTipo: String): Integer;
    procedure preencheComboTipo;
    function salvarHistorico(pIdOrganizacao, pIdHistorico, pIdContaContabil,
      pTipo, pDescricao: string; pCodigo: Integer): Boolean;
    function qtdUso(pIdOrganizacao, pIdHistorico :string): Integer;
    function deletar (pIdOrganizacao, pIdHistorico :string): Boolean;


  public
    { Public declarations }
    procedure preencheGrid(pIdOrganizacao :string);

  end;

var
  frmManter: TfrmManter;

implementation

{$R *.dfm}

procedure TfrmManter.cxbrdtmPesquisaCurChange(Sender: TObject);
begin
  dbgrd1.DataSource.DataSet.Locate('DESCRICAO',UpperCase(cxbrdtmPesquisa.CurEditValue),[loPartialKey]);
end;

procedure TfrmManter.dbgrd1TitleClick(Column: TColumn);
begin
qryObterHistoricos.IndexFieldNames :=Column.FieldName;
end;

function TfrmManter.deletar(pIdOrganizacao, pIdHistorico: string): Boolean;
var cmd :string;
qryDel :TFDQuery;
begin

try

      cmd := ' DELETE FROM HISTORICO  WHERE  (ID_ORGANIZACAO = :PIDORGANIZACAO) AND (ID_HISTORICO = :PIDHISTORICO) ';

      qryDel := TFDQuery.Create(Self);
      qryDel.Close;
      qryDel.Connection := dmConexao.conn;
      qryDel.SQL.Clear;
      qryDel.SQL.Add(cmd);
      qryDel.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
      qryDel.ParamByName('PIDHISTORICO').AsString := pIdHistorico;
      qryDel.ExecSQL;

  dmConexao.conn.CommitRetaining;

except
  dmConexao.conn.RollbackRetaining;
  Result := System.False;
raise Exception.Create(' Não foi possível deletar o histórico. Inform ao suporte.');

end;
  limparPanel;
  Result := System.True;
end;

procedure TfrmManter.dsGridDataChange(Sender: TObject;
  Field: TField);
  var
  idContaContabil :string;
  I: Integer;
  conta :TContaContabilModel;


begin
    idContaContabil := qryObterHistoricos.FieldByName('ID_CONTA_CONTABIL').AsString;
    edtHistorico.Text := qryObterHistoricos.FieldByName('DESCRICAO').AsString;
    cbbTipo.ItemIndex := obterTipoHistorico(qryObterHistoricos.FieldByName('TIPO').AsString);
    edtCodHistPadrao.Text := qryObterHistoricos.FieldByName('CODIGO').AsString;
    pIdHistorico := qryObterHistoricos.FieldByName('ID_HISTORICO').AsString;

    if qtdUso(pIdOrganizacao, pIdHistorico) = 0 then
    begin
      dxBtnDeletar.Enabled := True;
    end
    else
    begin
      dxBtnDeletar.Enabled := False;
    end;



    for I := 0 to FsListaIdContas.Count -1 do begin
         if FsListaIdContas[I].Equals(idContaContabil) then begin
             frmContaContabil1.cbbContaContabil.ItemIndex := I;
            conta := TContaContabilModel.Create;
            conta := frmContaContabil1.obterPorID(pIdOrganizacao, idContaContabil);

            if not uUtil.Empty(conta.FCodigoReduzido)  then begin

               edtDescricaoConta.Text := conta.FDescricao;
               edtCODREDUZ.Text := conta.FCodigoReduzido;
               edtContaContabil.Text :=conta.FConta;
            end;

         end;
    end;


end;

procedure TfrmManter.dxBtnDeletarClick(Sender: TObject);
begin

 if deletar(pIdOrganizacao, pIdHistorico) then begin
  ShowMessage('Histórico deletado com sucesso.');
 end;
end;

procedure TfrmManter.dxBtnEditarClick(Sender: TObject);
begin
  dbgrd1.Enabled :=False;
  frmContaContabil1.cbbContaContabil.Enabled :=True;
  cbbTipo.Enabled :=True;
  edtHistorico.Enabled :=True;
  edtCodHistPadrao.Enabled :=True;

  pIdHistorico := qryObterHistoricos.FieldByName('ID_HISTORICO').AsString;
  pIdContaContabil := qryObterHistoricos.FieldByName('ID_CONTA_CONTABIL').AsString;
  dxBtnSalvar.Enabled :=true ;
  dxBtnNovo.Enabled :=False;

end;

procedure TfrmManter.dxBtnFecharClick(Sender: TObject);
begin
 PostMessage(Self.Handle, WM_CLOSE, 0, 0);
end;

procedure TfrmManter.dxBtnNovoClick(Sender: TObject);
begin

  limparPanel;
  dbgrd1.Enabled :=False;
 // dbgrd1.DataSource.DataSet.Close;
  frmContaContabil1.cbbContaContabil.Enabled :=True;

  cbbTipo.Enabled          :=True;
  edtHistorico.Enabled     :=True;
  edtCodHistPadrao.Enabled :=True;
  dxBtnSalvar.Enabled      :=True;
  dxBtnEditar.Enabled      :=False;

  pIdHistorico :='';

end;

procedure TfrmManter.dxBtnSalvarClick(Sender: TObject);
var
 conta :TContaContabilModel;
 pDescricao, pTipo :string;
 pCodigo :Integer;

begin
  if frmContaContabil1.cbbContaContabil.ItemIndex >0 then begin
    conta := TContaContabilModel.Create;
    pIdContaContabil := FsListaIdContas[frmContaContabil1.cbbContaContabil.ItemIndex];
    conta := TContaContabilModel.Create;
    conta := frmContaContabil1.obterPorID(pIdOrganizacao, pIdContaContabil);
  end;

 if not uUtil.Empty(pIdHistorico) then begin
        pIdHistorico := qryObterHistoricos.FieldByName('ID_HISTORICO').AsString;
 end;


  pDescricao   := UpperCase(edtHistorico.Text);
  pCodigo      := StrToInt(edtCodHistPadrao.Text);
  pTipo        := FslistaTipo[cbbTipo.ItemIndex];

  if salvarHistorico(pIdOrganizacao, pIdHistorico,pIdContaContabil,pTipo,pDescricao,pCodigo) then begin

      ShowMessage('Histórico salvo com sucesso.');

   end;

   limparPanel;

end;

procedure TfrmManter.FormClose(Sender: TObject; var Action: TCloseAction);
begin
 freeAndNilDM(Self);
 Action :=caFree;

end;

procedure TfrmManter.FormCreate(Sender: TObject);
begin
 inicializarDM(Self);
 limparPanel;
end;

procedure TfrmManter.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
 case key of
  vk_f2: dxBtnEditar.Click;
  vk_f4: dxBtnNovo.Click;
  vk_f10: dxBtnSalvar.Click;
end;

end;

procedure TfrmManter.freeAndNilDM(Sender: TObject);
begin

//nada
end;

procedure TfrmManter.frmContaContabil1cbbContaContabilChange(
  Sender: TObject);
  var
  conta : TContaContabilModel;
begin
  if frmContaContabil1.cbbContaContabil.ItemIndex > 0 then
  begin
    pIdContaContabil := FsListaIdContas[frmContaContabil1.cbbContaContabil.ItemIndex];
    conta := TContaContabilModel.Create;
    conta := frmContaContabil1.obterPorID(pIdOrganizacao, pIdContaContabil);

    if not uUtil.Empty(conta.FCodigoReduzido) then
    begin

      edtDescricaoConta.Text := conta.FDescricao;
      edtCODREDUZ.Text := conta.FCodigoReduzido;
      edtContaContabil.Text := conta.FConta;
      pIdContaContabil :=conta.FIdContaContabil;
    end;

  end;

end;

procedure TfrmManter.inicializarDM(Sender: TObject);
begin
 //nada
 if not Assigned(dmOrganizacao) then begin
    dmOrganizacao := TdmOrganizacao.Create(Self);
 end;

 limparPanel;

end;

procedure TfrmManter.limparPanel();
begin
 limpaStatusBar;
 pIdOrganizacao := UUtil.TOrgAtual.getId;
 pIdUsuario :=uutil.TUserAtual.getUserId;
// frmPeriodo1.inicializa(IncDay(Now, -1), Now);
 frmContaContabil1.obterTodos(pIdOrganizacao, frmContaContabil1.cbbContaContabil,FsListaIdContas);
 preencheComboTipo();
 preencheGrid(pIdOrganizacao);


  cbbTipo.ItemIndex :=0;
 //botao editar muda
  dbgrd1.Enabled :=True;
  frmContaContabil1.cbbContaContabil.Enabled :=False;
  frmContaContabil1.cbbContaContabil.ItemIndex :=0;
  cbbTipo.Enabled :=False;
  edtHistorico.Enabled :=False;
  edtCodHistPadrao.Enabled :=False;
  edtDescricaoConta.Clear;
  edtCodHistPadrao.Clear;
  edtDescricaoConta.Clear;
  edtCODREDUZ.Clear;
  edtContaContabil.Clear;
  edtHistorico.Clear;

  dxBtnNovo.Enabled := True;
  dxBtnEditar.Enabled := True;
  dxBtnSalvar.Enabled :=False;
  dxBtnDeletar.Enabled := False;

  //botao novo



end;

procedure TfrmManter.msgStatusBar(pPosicao : Integer; msg :string);
begin
dxStatusBar.Panels[pPosicao].Text := msg;
Application.ProcessMessages;
end;

procedure TfrmManter.preencheGrid(pIdOrganizacao: string);
begin

dmConexao.conectarBanco;
 try

   qryObterHistoricos.Close;
   qryObterHistoricos.Connection := dmConexao.conn;
   qryObterHistoricos.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
   qryObterHistoricos.Open;

   dbgrd1.DataSource.DataSet.Last;
   dbgrd1.DataSource.DataSet.First;
  // dbgrd1.DataSource.DataSet.Refresh;

 except
 raise Exception.Create('Erro ao obter lista de históricos');

 end;


end;

function TfrmManter.qtdUso(pIdOrganizacao,      pIdHistorico: string): Integer;
  var
qryTP, qryTR : TFDQuery;
cmd : string;
qtd :Integer;

begin
  dmConexao.conectarBanco;
  qtd := 0;

  try

    cmd := ' SELECT COUNT(*) as QTDUSO FROM TITULO_PAGAR_HISTORICO TP WHERE (TP.ID_ORGANIZACAO = :PIDORGANIZACAO) AND (TP.ID_HISTORICO = :PIDHISTORICO) ';

    qryTP := TFDQuery.Create(Self);
    qryTP.Close;
    qryTP.Connection := dmConexao.conn;
    qryTP.SQL.Clear;
    qryTP.SQL.Add(cmd);
    qryTP.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
    qryTP.ParamByName('PIDHISTORICO').AsString := pIdHistorico;
    qryTP.Open;

    qtd := qtd + qryTP.FieldByName('QTDUSO').AsInteger;


    cmd := ' SELECT COUNT(*) as QTDUSO FROM TITULO_PAGAR TP WHERE (TP.ID_ORGANIZACAO = :PIDORGANIZACAO) AND (TP.ID_HISTORICO = :PIDHISTORICO) ';

    qryTP := TFDQuery.Create(Self);
    qryTP.Close;
    qryTP.Connection := dmConexao.conn;
    qryTP.SQL.Clear;
    qryTP.SQL.Add(cmd);
    qryTP.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
    qryTP.ParamByName('PIDHISTORICO').AsString := pIdHistorico;
    qryTP.Open;

    qtd := qtd + qryTP.FieldByName('QTDUSO').AsInteger;



    if qtd < 1 then
    begin

      cmd := ' SELECT COUNT(*) as QTDUSO FROM TITULO_RECEBER_HISTORICO TP WHERE (TP.ID_ORGANIZACAO = :PIDORGANIZACAO) AND (TP.ID_HISTORICO = :PIDHISTORICO) ';

      qryTP := TFDQuery.Create(Self);
      qryTP.Close;
      qryTP.Connection := dmConexao.conn;
      qryTP.SQL.Clear;
      qryTP.SQL.Add(cmd);
      qryTP.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
      qryTP.ParamByName('PIDHISTORICO').AsString := pIdHistorico;
      qryTP.Open;

    qtd := qtd +qryTP.FieldByName('QTDUSO').AsInteger;

    end;

     if qtd < 1 then
    begin

      cmd := ' SELECT COUNT(*) as QTDUSO FROM TITULO_RECEBER TP WHERE (TP.ID_ORGANIZACAO = :PIDORGANIZACAO) AND (TP.ID_HISTORICO = :PIDHISTORICO) ';

      qryTP := TFDQuery.Create(Self);
      qryTP.Close;
      qryTP.Connection := dmConexao.conn;
      qryTP.SQL.Clear;
      qryTP.SQL.Add(cmd);
      qryTP.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
      qryTP.ParamByName('PIDHISTORICO').AsString := pIdHistorico;
      qryTP.Open;

    qtd := qtd +qryTP.FieldByName('QTDUSO').AsInteger;

    end;


     if qtd < 1 then
    begin

      cmd := ' SELECT COUNT(*) as QTDUSO FROM TESOURARIA_CREDITO TP WHERE (TP.ID_ORGANIZACAO = :PIDORGANIZACAO) AND (TP.ID_HISTORICO = :PIDHISTORICO) ';

      qryTP := TFDQuery.Create(Self);
      qryTP.Close;
      qryTP.Connection := dmConexao.conn;
      qryTP.SQL.Clear;
      qryTP.SQL.Add(cmd);
      qryTP.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
      qryTP.ParamByName('PIDHISTORICO').AsString := pIdHistorico;
      qryTP.Open;

    qtd := qtd + qryTP.FieldByName('QTDUSO').AsInteger;

    end;



     if qtd < 1 then
    begin

      cmd := ' SELECT COUNT(*) as QTDUSO FROM TESOURARIA_DEBITO TP WHERE (TP.ID_ORGANIZACAO = :PIDORGANIZACAO) AND (TP.ID_HISTORICO = :PIDHISTORICO) ';

      qryTP := TFDQuery.Create(Self);
      qryTP.Close;
      qryTP.Connection := dmConexao.conn;
      qryTP.SQL.Clear;
      qryTP.SQL.Add(cmd);
      qryTP.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
      qryTP.ParamByName('PIDHISTORICO').AsString := pIdHistorico;
      qryTP.Open;

    qtd := qtd + qryTP.FieldByName('QTDUSO').AsInteger;

    end;


     if qtd < 1 then
    begin

      cmd := ' SELECT COUNT(*) as QTDUSO FROM TIPO_ACRESCIMO TP WHERE (TP.ID_ORGANIZACAO = :PIDORGANIZACAO) AND (TP.ID_HISTORICO = :PIDHISTORICO) ';

      qryTP := TFDQuery.Create(Self);
      qryTP.Close;
      qryTP.Connection := dmConexao.conn;
      qryTP.SQL.Clear;
      qryTP.SQL.Add(cmd);
      qryTP.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
      qryTP.ParamByName('PIDHISTORICO').AsString := pIdHistorico;
      qryTP.Open;

    qtd := qtd +qryTP.FieldByName('QTDUSO').AsInteger;

    end;


     if qtd < 1 then
    begin

      cmd := ' SELECT COUNT(*) as QTDUSO FROM TIPO_DEDUCAO TP WHERE (TP.ID_ORGANIZACAO = :PIDORGANIZACAO) AND (TP.ID_HISTORICO = :PIDHISTORICO) ';

      qryTP := TFDQuery.Create(Self);
      qryTP.Close;
      qryTP.Connection := dmConexao.conn;
      qryTP.SQL.Clear;
      qryTP.SQL.Add(cmd);
      qryTP.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
      qryTP.ParamByName('PIDHISTORICO').AsString := pIdHistorico;
      qryTP.Open;

    qtd := qtd +qryTP.FieldByName('QTDUSO').AsInteger;

    end;






  except
    raise Exception.Create('Erro ao buscar uso dos históricos ');

  end;

  Result := qtd;

end;

procedure TfrmManter.limpaStatusBar;
begin
dxStatusBar.Panels[0].Text := 'Status ';
dxStatusBar.Panels[1].Text := 'Ativo. Teclas de atalho:  [F2] = Editar  - [F4] = Novo - [F10] = Salvar  ';
end;

function TfrmManter.obterTipoHistorico(pTipo :String) :Integer;
var
  posicao: Integer;
  I: Integer;
begin
  posicao := 0;

  for I := 0 to FslistaTipo.Count -1 do begin
       if FslistaTipo[I].Equals(pTipo) then begin
         posicao := I;
       end;
  end;

  Result := posicao;
end;

procedure TfrmManter.preencheComboTipo;
begin

  FslistaTipo :=TStringList.Create;
  FslistaTipo.Clear;
  FslistaTipo.Add('0');
  FslistaTipo.Add('G');
  FslistaTipo.Add('P');
  FslistaTipo.Add('R');
  FslistaTipo.Add('D');
  FslistaTipo.Add('A');

  cbbTipo.Clear;
  cbbTipo.Items.Add(' >>Selecione<<');
  cbbTipo.Items.Add('Geral');
  cbbTipo.Items.Add('Pagamentos');
  cbbTipo.Items.Add('Recebimentos');
  cbbTipo.Items.Add('Deduções');
  cbbTipo.Items.Add('Acréscimos');
  cbbTipo.Items.Add('Caixa');
end;


function  TfrmManter.salvarHistorico(pIdOrganizacao, pIdHistorico, pIdContaContabil, pTipo, pDescricao :string; pCodigo :Integer) :Boolean;
var
cmdSalvar :string;
qrySalvar :TFDQuery;
begin

 dmConexao.conectarBanco;
 try

   cmdSalvar := ' UPDATE HISTORICO  SET DESCRICAO = :PDESCRICAO ,  TIPO = :PTIPO, '+
                ' ID_CONTA_CONTABIL = :PIDCONTA , CODIGO = :PCODIGO, ' +
                ' DESCRICAO_REDUZIDA = :PDESCREDUZ ' +
                ' WHERE (ID_ORGANIZACAO = :PIDORGANIZACAO) AND (ID_HISTORICO = :PIDHISTORICO) ';



   if UUTIL.Empty(pIdHistorico) then begin

     pIdHistorico := dmConexao.obterNewID;


   cmdSalvar := ' INSERT  INTO HISTORICO (ID_HISTORICO, ID_ORGANIZACAO, ' +
                ' DESCRICAO, TIPO, CODIGO, ID_CONTA_CONTABIL, DESCRICAO_REDUZIDA  ) ' +
                ' VALUES (:PIDHISTORICO, :PIDORGANIZACAO, :PDESCRICAO, :PTIPO, :PCODIGO, :PIDCONTA, :PDESCREDUZ)' ;
   end;

    if not uUtil.Empty(pIdHistorico) then
    begin

      qrySalvar := TFDQuery.Create(Self);
      qrySalvar.Close;
      qrySalvar.Connection := dmConexao.conn;
      qrySalvar.SQL.Clear;
      qrySalvar.SQL.Add(cmdSalvar);

      qrySalvar.ParamByName('PIDHISTORICO').AsString := pIdHistorico;
      qrySalvar.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
      qrySalvar.ParamByName('PDESCRICAO').AsString := UpperCase(pDescricao);
      qrySalvar.ParamByName('PDESCREDUZ').AsString := UpperCase(pDescricao);
      qrySalvar.ParamByName('PTIPO').AsString := UpperCase(pTipo);
      qrySalvar.ParamByName('PIDCONTA').AsString := pIdContaContabil;
      qrySalvar.ParamByName('PCODIGO').AsInteger := pCodigo;
      qrySalvar.ExecSQL;

      dmConexao.conn.CommitRetaining;
    end;

 except
 Result :=False;
  raise Exception.Create('Erro ao tentar salvar o historico.');
 end;

  Result :=True;
end;

end.
