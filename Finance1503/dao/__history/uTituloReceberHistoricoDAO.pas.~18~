unit uTituloReceberHistoricoDAO;

interface
 {
CREATE TABLE TITULO_RECEBER_HISTORICO (
    ID_TITULO_RECEBER_HISTORICO  VARCHAR(36) NOT NULL,
    ID_ORGANIZACAO               VARCHAR(36) NOT NULL,
    ID_HISTORICO                 VARCHAR(36) NOT NULL,
    ID_TITULO_RECEBER            VARCHAR(36) NOT NULL,
    VALOR                        NUMERIC(10,2) NOT NULL,
    ID_CONTA_CONTABIL_DEBITO     VARCHAR(36)
);
}


uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, FireDAC.Stan.Intf, FireDAC.Stan.Option,
   FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, uTituloReceberHistoricoModel,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB, uHistoricoModel, uHistoricoDAO,
  uContaContabilModel, uContaContabilDAO, udmConexao, uUtil, FireDAC.Comp.DataSet, FireDAC.Comp.Client;


  const
   pTable : string = 'TITULO_RECEBER_HISTORICO';
type
 TTituloReceberHistoricoDAO = class
  private
    class function getModel (query :TFDQuery) : TTituloReceberHistoricoModel;
  public
    {métodos CRUD (Create, Read, Update e Delete)
    para manipulação dos dados}
    class function Insert(value :TTituloReceberHistoricoModel): Boolean;
    class function Update(value :TTituloReceberHistoricoModel): Boolean;

    class function obterPorID(value :TTituloReceberHistoricoModel): TTituloReceberHistoricoModel;
    class function Delete(value :TTituloReceberHistoricoModel): Boolean;
    class function DeletePorIDTR(value :TTituloReceberHistoricoModel): Boolean;

  end;

implementation

class function TTituloReceberHistoricoDAO.Delete(value: TTituloReceberHistoricoModel): Boolean;
var
  qryDelete: TFDQuery;
  sucesso: Boolean;
begin
  sucesso := False;
  dmConexao.conectarBanco;
  qryDelete := TFDQuery.Create(nil);

  try

    qryDelete.Close;
    qryDelete.Connection := dmConexao.conn;
    qryDelete.SQL.Clear;
    qryDelete.SQL.Add('DELETE FROM ' + pTable);
    qryDelete.SQL.Add('WHERE ID_ORGANIZACAO = :PIDORGANIZACAO  AND  ID_' + pTable + ' = :PID ');
    qryDelete.ParamByName('PIDORGANIZACAO').AsString := value.FIDorganizacao;
    qryDelete.ParamByName('PID').AsString := value.FID;

    qryDelete.ExecSQL;

    if qryDelete.RowsAffected > 0 then
    begin

      sucesso := True;
    end;

    Result := sucesso;


  finally
    if Assigned(qryDelete) then
    begin
      FreeAndNil(qryDelete);
    end;

  end;

end;

class function TTituloReceberHistoricoDAO.DeletePorIDTR( value: TTituloReceberHistoricoModel): Boolean;
var
  qryDelete: TFDQuery;
  sucesso: Boolean;
begin
  sucesso := False;

  dmConexao.conectarBanco;
  qryDelete := TFDQuery.Create(nil);

  try

    qryDelete.Close;
    qryDelete.Connection := dmConexao.conn;
    qryDelete.SQL.Clear;
    qryDelete.SQL.Add('DELETE FROM ' + pTable);
    qryDelete.SQL.Add('WHERE ID_ORGANIZACAO = :PIDORGANIZACAO  AND  ID_TITULO_RECEBER  = :PIDTR ');
    qryDelete.ParamByName('PIDORGANIZACAO').AsString := value.FIDorganizacao;
    qryDelete.ParamByName('PIDTR').AsString := value.FIDTR;
    qryDelete.ExecSQL;

    if qryDelete.RowsAffected > 0 then
    begin
      sucesso := True;
    end;

    Result := sucesso;

  finally
    if Assigned(qryDelete) then
    begin
      FreeAndNil(qryDelete);
    end;

  end;

end;


class function TTituloReceberHistoricoDAO.getModel(query: TFDQuery): TTituloReceberHistoricoModel;
var model :TTituloReceberHistoricoModel;

begin
 model                               := TTituloReceberHistoricoModel.Create;
 model.FContaContabil                := TContaContabilModel.Create;
 model.FHistorico                    := THistoricoModel.Create;

  if not query.IsEmpty then begin

   try
        try

              model.FID                           := query.FieldByName('ID_TITULO_RECEBER_HISTORICO').AsString;
              model.FIDorganizacao                := query.FieldByName('ID_ORGANIZACAO').AsString;
              model.FIDHistorico                  := query.FieldByName('ID_HISTORICO').AsString;
              model.FIDContaContabilDebito        := query.FieldByName('ID_CONTA_CONTABIL_DEBITO').AsString;
              model.FIDTR                         := query.FieldByName('ID_TITULO_RECEBER').AsString;
              model.Fvalor                        := query.FieldByName('VALOR').AsCurrency;

              model.FContaContabil.FID            := model.FIDContaContabilDebito;
              model.FContaContabil.FIDOrganizacao := model.FIDOrganizacao;
              model.FContaContabil                := TContaContabilDAO.obterPorID(model.FContaContabil);

              model.FHistorico.FID                := model.FIDHistorico;
              model.FHistorico.FIDOrganizacao     := model.FIDOrganizacao;
              model.FHistorico                    := THistoricoDAO.obterPorID(model.FHistorico);

            Result := model;

          except
            raise Exception.Create('Erro ao tentar Converter ' + pTable);

          end;
    finally

      if Assigned(query) then
      begin
        FreeAndNil(query);
      end;

    end;

  end;

end;

class function TTituloReceberHistoricoDAO.Insert(value: TTituloReceberHistoricoModel): Boolean;
var
  qryInsert: TFDQuery;
  cmdDB: string;
  sucesso :Boolean;
begin
  dmConexao.conectarBanco;
  qryInsert := TFDQuery.Create(nil);


     cmdDB :=  ' INSERT INTO TITULO_RECEBER_HISTORICO '+
                ' (ID_TITULO_RECEBER_HISTORICO, ID_ORGANIZACAO, ID_HISTORICO,' +
                ' ID_TITULO_RECEBER, VALOR, ID_CONTA_CONTABIL_DEBITO) '+
                ' VALUES (:PID, :PIDORGANIZACAO,:PIDHIST, '+
                ' :PIDTR, :PVALOR, :PIDCONTA )' ;
  try
      qryInsert.Close;
      qryInsert.Connection := dmConexao.conn;
      qryInsert.SQL.Clear;
      qryInsert.SQL.Add(cmdDB);
      qryInsert.ParamByName('PID').AsString := value.FID;
      qryInsert.ParamByName('PIDORGANIZACAO').AsString := value.FIDorganizacao;
      qryInsert.ParamByName('PIDHIST').AsString := value.FIDHistorico;
      qryInsert.ParamByName('PIDTR').AsString := value.FIDTP;
      qryInsert.ParamByName('PIDCONTA').AsString := value.FIDContaContabilDebito;
      qryInsert.ParamByName('PVALOR').AsCurrency := value.Fvalor;
      qryInsert.ExecSQL;

    if qryInsert.RowsAffected > 0 then
    begin

      sucesso := True;
    end;

    Result := sucesso;

  finally
    if Assigned(qryInsert) then
    begin
      FreeAndNil(qryInsert);
    end;

  end;

end;

class function TTituloReceberHistoricoDAO.obterPorID( value: TTituloReceberHistoricoModel): TTituloReceberHistoricoModel;
var
qryPesquisa : TFDQuery;
cmdSql:string;
model: TTituloReceberHistoricoModel;
begin
  dmConexao.conectarBanco;
  qryPesquisa := TFDQuery.Create(nil);
  model := TTituloReceberHistoricoModel.Create;

  try

    try

      qryPesquisa.Close;
      qryPesquisa.Connection := dmConexao.conn;
      qryPesquisa.SQL.Clear;
      qryPesquisa.SQL.Add('SELECT * ');
      qryPesquisa.SQL.Add('FROM ' + pTable);
      qryPesquisa.SQL.Add('WHERE (ID_ORGANIZACAO = :PIDORGANIZACAO ) AND  ID_' + pTable + ' = :PID ');

      qryPesquisa.ParamByName('PID').AsString := value.FID;
      qryPesquisa.ParamByName('PIDORGANIZACAO').AsString := value.FIDorganizacao;

      qryPesquisa.Open;

      if not qryPesquisa.IsEmpty then
       begin
        model := getModel(qryPesquisa);
      end;

    except
      raise Exception.Create('Erro ao tentar obter ' + pTable);

    end;

    Result := model;

  finally
    if Assigned(qryPesquisa) then
    begin
      FreeAndNil(qryPesquisa);
    end;
  end;

end;
class function TTituloReceberHistoricoDAO.Update(value: TTituloReceberHistoricoModel): Boolean;
var
  qry : TFDQuery;
  cmdDB: string;
  sucesso : Boolean;
begin
  sucesso := False;
  dmConexao.conectarBanco;
  qry := TFDQuery.Create(nil);

    try

     cmdDB := ' UPDATE TITULO_RECEBER_HISTORICO '+
              ' SET ID_HISTORICO    = :PIDHIST, '+
              ' ID_TITULO_RECEBER     = :PIDTR, '+
              ' VALOR = :PVALOR, '+
              ' ID_CONTA_CONTABIL_DEBITO = :PIDCONTA '+
              ' WHERE (ID_TITULO_RECEBER_HISTORICO = :PID) AND (ID_ORGANIZACAO = :PIDORGANIZACAO) ';

    qry.Close;
    qry.Connection := dmConexao.conn;
    qry.SQL.Clear;
    qry.SQL.Add(cmdDB);
    qry.ParamByName('PID').AsString             := value.FID;
    qry.ParamByName('PIDORGANIZACAO').AsString  := value.FIDorganizacao;
    qry.ParamByName('PIDHIST').AsString         := value.FIDHistorico;
    qry.ParamByName('PIDTR').AsString           := value.FIDTP;
    qry.ParamByName('PIDCONTA').AsString        := value.FIDContaContabilDebito;
    qry.ParamByName('PVALOR').AsCurrency        := value.Fvalor;


     qry.ExecSQL;

    if qry.RowsAffected >0  then begin

      sucesso := True;
    end;

   Result := sucesso;


  finally
    if Assigned(qry) then
    begin
      FreeAndNil(qry);
    end;
  end;

end;

end.

