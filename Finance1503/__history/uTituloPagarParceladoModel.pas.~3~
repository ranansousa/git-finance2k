unit uTituloPagarParceladoModel;

interface

uses
  Windows, Messages, Classes, SysUtils, System.Generics.Collections,uTituloPagarModel;

type
  TTituloPagarParceladoModel = class(TObject)
  private
    //objetos
     FFTituloPagar        : TTituloPagarModel; //titulo gerador

  public

//objetos
    property FTituloPagar: TTituloPagarModel read FFTituloPagar write FFTituloPagar;

     {
    property listaHistorico   : TObjectList<TTituloPagarHistoricoModel> read FSlistaHistorico  write FSlistaHistorico;
    property listaCustos      : TObjectList<TTituloPagarCentroCustoModel> read FSlistaCustos      write FSlistaCustos;

    procedure AdicionarHST(pHistorico: TTituloPagarHistoricoModel);
    procedure AdicionarCC (pCentroCusto: TTituloPagarCentroCustoModel);  }

    constructor Create;
    destructor Destroy; override;


  end;

implementation




{ TTituloPagarModel }

procedure TTituloPagarModel.AdicionarCC(pCentroCusto: TTituloPagarCentroCustoModel);
// TITULO_PAGAR_RATEIO_CC
 var
 I: Integer;
 begin
  FSlistaCustos.Add(TTituloPagarCentroCustoModel.Create);
  I := FSlistaCustos.Count -1;
  FSlistaCustos[I].FID            := pCentroCusto.FID;
  FSlistaCustos[I].FIDorganizacao := pCentroCusto.FIDorganizacao;
  FSlistaCustos[I].FIDCentroCusto := pCentroCusto.FIDCentroCusto;
  FSlistaCustos[I].FIDTP          := pCentroCusto.FIDTP;
  FSlistaCustos[I].FValor         := pCentroCusto.FValor;
end;

procedure TTituloPagarModel.AdicionarHST( pHistorico: TTituloPagarHistoricoModel);
//TITULO_PAGAR_HISTORICO
var
 I: Integer;
 begin

  FSlistaHistorico.Add(TTituloPagarHistoricoModel.Create);
  I := FSlistaHistorico.Count -1;
  FSlistaHistorico[I].FID                     := pHistorico.FID;
  FSlistaHistorico[I].FIDorganizacao          := pHistorico.FIDorganizacao;
  FSlistaHistorico[I].FIDHistorico            := pHistorico.FIDHistorico;
  FSlistaHistorico[I].FIDTP                   := pHistorico.FIDTP;
  FSlistaHistorico[I].FIDContaContabilDebito  := pHistorico.FIDContaContabilDebito;
  FSlistaHistorico[I].FValor                  := pHistorico.FValor;

end;

constructor TTituloPagarModel.Create;
begin
//ver
FFnovo := True;


     FFOrganizacao        :=  TOrganizacaoModel.Create ;
     FFHistorico          :=  THistoricoModel.Create ;
     FFCedente            :=  TCedenteModel.Create ;
     FFTipoCobranca       :=  TTipoCobrancaModel.Create ;
     FFResponsavel        :=  TFuncionarioModel.Create ;
     FFLocalPagamento     :=  TLocalPagamentoModel.Create ;
     FFLotePagamento      :=  TLotePagamentoModel.Create ;
     FFTipoStatus         :=  TTipoStatusModel.Create ;
     FFCentroCustos       :=  TCentroCustoModel.Create ;
     FFNotaFiscalEntrada  :=  TNotaFiscalEntradaModel.Create ;
     FFLoteContabil       :=  TLoteContabilModel.Create ;
     FFUsuario            :=  TUsuarioModel.Create ;
     FFCheque             :=  TContaBancariaChequeModel.Create ;

end;

destructor TTituloPagarModel.Destroy;
begin
  inherited;
end;

function TTituloPagarModel.getFFcarteira: string;
begin
 Result := FFcarteira;
end;

function TTituloPagarModel.getFFCedente: TCedenteModel;
begin
  Result := FFCedente;
end;

function TTituloPagarModel.getFFCentroCustos: TCentroCustoModel;
begin

Result := FFCentroCustos;

end;

function TTituloPagarModel.getFFCheque: TContaBancariaChequeModel;
begin
Result := FFCheque;
end;

function TTituloPagarModel.getFFcodigoBarras: string;
begin
 Result := FFcodigoBarras;

end;

function TTituloPagarModel.getFFcontrato: string;
begin
 Result := FFcontrato;

end;

function TTituloPagarModel.getFFdataEmissao: TDateTime;
begin
 Result := FFdataEmissao;
end;

function TTituloPagarModel.getFFdataPagamento: TDateTime;
begin
 Result := FFdataPagamento;

end;

function TTituloPagarModel.getFFdataProtocolo: TDateTime;
begin

 Result := FFdataProtocolo;

end;

function TTituloPagarModel.getFFdataRegistro: TDateTime;
begin

 Result := FFdataRegistro;

end;

function TTituloPagarModel.getFFdataUltimaAtualizacao: TDateTime;
begin
 Result := FFdataUltimaAtualizacao;
end;

function TTituloPagarModel.getFFdataVencimento: TDateTime;
begin

 Result := FFdataVencimento;

end;

function TTituloPagarModel.getFFdescricao: string;
begin

 Result := FFdescricao;

end;

function TTituloPagarModel.getFFHistorico: THistoricoModel;
begin
  Result := FFHistorico;
end;

function TTituloPagarModel.getFFID: string;
begin
 Result := FFID;
end;

function TTituloPagarModel.getFFIDCBChequeVinculado: string;
begin
 Result := FFIDCBChequeVinculado;

end;

function TTituloPagarModel.getFFIDCedente: string;
begin
 Result := FFIDCedente;

end;

function TTituloPagarModel.getFFIDCentroCusto: string;
begin
 Result := FFIDCentroCusto;

end;

function TTituloPagarModel.getFFIDContaContabilCredito: string;
begin
 Result := FFIDContaContabilCredito;

end;

function TTituloPagarModel.getFFIDContaContabilDebito: string;
begin

 Result := FFIDContaContabilDebito;

end;

function TTituloPagarModel.getFFIDHistorico: string;
begin
 Result := FFIDHistorico;

end;

function TTituloPagarModel.getFFIDLocalPagamento: string;
begin
 Result := FFIDLocalPagamento;

end;

function TTituloPagarModel.getFFIDLoteContabil: string;
begin
 Result := FFIDLoteContabil;

end;

function TTituloPagarModel.getFFIDLotePagamento: string;
begin
 Result := FFIDLotePagamento;

end;

function TTituloPagarModel.getFFIDLoteTPB: string;
begin
Result := FFIDLoteTPB;
end;

function TTituloPagarModel.getFFIDNotaFiscalEntrada: string;
begin
 Result := FFIDNotaFiscalEntrada;

end;

function TTituloPagarModel.getFFIDorganizacao: string;
begin
 Result := FFIDorganizacao;

end;

function TTituloPagarModel.getFFIDResponsavel: string;
begin

 Result := FFIDResponsavel;

end;

function TTituloPagarModel.getFFIDTipoCobranca: string;
begin

 Result := FFIDTipoCobranca;

end;

function TTituloPagarModel.getFFIDTipoStatus: string;
begin
 Result := FFIDTipoStatus;

end;

function TTituloPagarModel.getFFIDTituloPagarAnterior: string;
begin

 Result := FFIDTituloPagarAnterior;

end;

function TTituloPagarModel.getFFIDUsuario: string;
begin

 Result := FFIDUsuario;

end;

function TTituloPagarModel.getFFisProvisao: Integer;
begin
 Result := FFisProvisao;
end;

function TTituloPagarModel.getFFLocalPagamento: TLocalPagamentoModel;
begin
  Result := FFLocalPagamento;
end;

function TTituloPagarModel.getFFLoteContabil: TLoteContabilModel;
begin
Result := FFLoteContabil;

end;

function TTituloPagarModel.getFFLotePagamento: TLotePagamentoModel;
begin
   Result := FFLotePagamento;
end;

function TTituloPagarModel.getFFmoeda: string;
begin
 Result := FFmoeda;

end;

function TTituloPagarModel.getFFNotaFiscalEntrada: TNotaFiscalEntradaModel;
begin
   Result := FFNotaFiscalEntrada;
end;

function TTituloPagarModel.getFFnumeroDocumento: string;
begin
 Result := FFnumeroDocumento;

end;

function TTituloPagarModel.getFFobservacao: string;
begin
  Result := FFobservacao;

end;

function TTituloPagarModel.getFFOrganizacao: TOrganizacaoModel;
begin

 Result := FFOrganizacao;

end;

function TTituloPagarModel.getFFparcela: string;
begin
 Result := FFparcela;

end;

function TTituloPagarModel.getFFprevisaoCartorio: TDateTime;
begin
 Result := FFprevisaoCartorio;

end;

function TTituloPagarModel.getFFregistroProvisao: string;
begin
 Result := FFregistroProvisao;

end;

function TTituloPagarModel.getFFResponsavel: TFuncionarioModel;
begin
 Result := FFResponsavel;
end;

function TTituloPagarModel.getFFTipoCobranca: TTipoCobrancaModel;
begin
  Result := FFTipoCobranca;
end;

function TTituloPagarModel.getFFTipoStatus: TTipoStatusModel;
begin
   Result := FFTipoStatus;
end;

function TTituloPagarModel.getFFTituloPagar: TTituloPagarModel;
begin
  Result := FFTituloPagar;
end;

function TTituloPagarModel.getFFUsuario: TUsuarioModel;
begin
  Result := FFUsuario;
end;

function TTituloPagarModel.getFFvalorAntecipado: Currency;
begin
 Result := FFvalorAntecipado;

end;

function TTituloPagarModel.getFFvalorNominal: Currency;
begin
 Result := FFvalorNominal;

end;

procedure TTituloPagarModel.setFFcarteira(const Value: string);
begin
  FFcarteira :=Value;
end;

procedure TTituloPagarModel.SetFFCedente(const Value: TCedenteModel);
begin
 FFCedente := Value;
end;

procedure TTituloPagarModel.SetFFCentroCustos(const Value: TCentroCustoModel);
begin
  FFCentroCustos := Value;
end;

procedure TTituloPagarModel.SetFFCheque(const Value: TContaBancariaChequeModel);
begin
    FFCheque := Value;
end;

procedure TTituloPagarModel.setFFcodigoBarras(const Value: string);
begin
    FFcodigoBarras :=Value;
end;

procedure TTituloPagarModel.setFFcontrato(const Value: string);
begin
    FFcontrato :=Value;
end;

procedure TTituloPagarModel.setFFdataEmissao(const Value: TDateTime);
begin
     FFdataEmissao :=Value;
end;

procedure TTituloPagarModel.setFFdataPagamento(const Value: TDateTime);
begin
   FFdataPagamento :=Value;
end;

procedure TTituloPagarModel.setFFdataProtocolo(const Value: TDateTime);
begin
    FFdataProtocolo :=Value;
end;

procedure TTituloPagarModel.setFFdataRegistro(const Value: TDateTime);
begin
    FFdataRegistro :=Value;
end;

procedure TTituloPagarModel.setFFdataUltimaAtualizacao(const Value: TDateTime);
begin
    FFdataUltimaAtualizacao :=Value;
end;

procedure TTituloPagarModel.setFFdataVencimento(const Value: TDateTime);
begin
   FFdataVencimento :=Value;
end;

procedure TTituloPagarModel.setFFdescricao(const Value: string);
begin
    FFdescricao :=Value;
end;

procedure TTituloPagarModel.SetFFHistorico(const Value: THistoricoModel);
begin
 FFHistorico := Value;
end;

procedure TTituloPagarModel.setFFID(const Value: string);
begin
    FFID :=Value;
end;

procedure TTituloPagarModel.setFFIDCBChequeVinculado(const Value: string);
begin
     FFIDCBChequeVinculado :=Value;
end;

procedure TTituloPagarModel.setFFIDCedente(const Value: string);
begin
    FFIDCedente :=Value;
end;

procedure TTituloPagarModel.setFFIDCentroCusto(const Value: string);
begin
     FFIDCentroCusto :=Value;
end;

procedure TTituloPagarModel.setFFIDContaContabilCredito(const Value: string);
begin
     FFIDContaContabilCredito :=Value;
end;

procedure TTituloPagarModel.setFFIDContaContabilDebito(const Value: string);
begin
      FFIDContaContabilDebito :=Value;
end;

procedure TTituloPagarModel.setFFIDHistorico(const Value: string);
begin
   FFIDHistorico :=Value;
end;

procedure TTituloPagarModel.setFFIDLocalPagamento(const Value: string);
begin
    FFIDLocalPagamento :=Value;
end;

procedure TTituloPagarModel.setFFIDLoteContabil(const Value: string);
begin
     FFIDLoteContabil :=Value;
end;

procedure TTituloPagarModel.setFFIDLotePagamento(const Value: string);
begin
     FFIDLotePagamento :=Value;
end;

procedure TTituloPagarModel.setFFIDLoteTPB(const Value: string);
begin
FFIDLoteTPB := Value;
end;

procedure TTituloPagarModel.setFFIDNotaFiscalEntrada(const Value: string);
begin
   FFIDNotaFiscalEntrada :=Value;
end;

procedure TTituloPagarModel.setFFIDorganizacao(const Value: string);
begin
    FFIDorganizacao :=Value;
end;

procedure TTituloPagarModel.setFFIDResponsavel(const Value: string);
begin
     FFIDResponsavel :=Value;
end;

procedure TTituloPagarModel.setFFIDTipoCobranca(const Value: string);
begin
     FFIDTipoCobranca :=Value;
end;

procedure TTituloPagarModel.setFFIDTipoStatus(const Value: string);
begin
    FFIDTipoStatus :=Value;
end;

procedure TTituloPagarModel.setFFIDTituloPagarAnterior(const Value: string);
begin
   FFIDTituloPagarAnterior :=Value;
end;

procedure TTituloPagarModel.setFFIDUsuario(const Value: string);
begin
    FFIDUsuario :=Value;
end;

procedure TTituloPagarModel.SetFFisProvisao(const Value: Integer);
begin
 FFisProvisao := Value;
end;

procedure TTituloPagarModel.SetFFLocalPagamento( const Value: TLocalPagamentoModel);
begin
    FFLocalPagamento := Value;
end;

procedure TTituloPagarModel.SetFFLoteContabil(const Value: TLoteContabilModel);
begin
  FFLoteContabil := Value;
end;

procedure TTituloPagarModel.SetFFLotePagamento(  const Value: TLotePagamentoModel);
begin
   FFLotePagamento := Value;
end;

procedure TTituloPagarModel.setFFmoeda(const Value: string);
begin
  FFmoeda :=Value;
 if uutil.Empty(FFmoeda) then begin
    FFmoeda := 'Real';
 end;

end;

procedure TTituloPagarModel.SetFFNotaFiscalEntrada( const Value: TNotaFiscalEntradaModel);
begin
   FFNotaFiscalEntrada := Value;
end;

procedure TTituloPagarModel.setFFnumeroDocumento(const Value: string);
begin
  FFnumeroDocumento :=Value;

end;

procedure TTituloPagarModel.setFFobservacao(const Value: string);
begin

FFobservacao := Value;

end;

procedure TTituloPagarModel.SetFFOrganizacao(const Value: TOrganizacaoModel);
begin

   FFOrganizacao :=Value;
end;

procedure TTituloPagarModel.setFFparcela(const Value: string);
begin
 FFparcela :=Value;

 if uutil.Empty(FFparcela) then begin
   FFparcela := '1';
 end;

end;

procedure TTituloPagarModel.setFFprevisaoCartorio(const Value: TDateTime);
begin
  FFprevisaoCartorio :=Value;
end;

procedure TTituloPagarModel.setFFregistroProvisao(const Value: string);
begin
 FFregistroProvisao :=Value;

end;

procedure TTituloPagarModel.SetFFResponsavel(const Value: TFuncionarioModel);
begin
  FFResponsavel := Value;
end;

procedure TTituloPagarModel.SetFFTipoCobranca(const Value: TTipoCobrancaModel);
begin
   FFTipoCobranca := Value;
end;

procedure TTituloPagarModel.SetFFTipoStatus(const Value: TTipoStatusModel);
begin
   FFTipoStatus := Value;
end;

procedure TTituloPagarModel.SetFFTituloPagar(const Value: TTituloPagarModel);
begin
  FFTituloPagar := Value;
end;

procedure TTituloPagarModel.SetFFUsuario(const Value: TUsuarioModel);
begin
 FFUsuario :=  Value ;
end;

procedure TTituloPagarModel.setFFvalorAntecipado(const Value: Currency);
begin
  FFvalorAntecipado :=Value;
end;

procedure TTituloPagarModel.setFFvalorNominal(const Value: Currency);
begin
  FFvalorNominal :=Value;
end;

end.
