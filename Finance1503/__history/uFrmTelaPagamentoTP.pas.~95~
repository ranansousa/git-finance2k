unit uFrmTelaPagamentoTP;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,uUtil,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls,uFrmBaixaFP, System.DateUtils,
   dxSkinsDefaultPainters, cxGraphics, cxControls, cxLookAndFeels,
  cxLookAndFeelPainters, dxRibbonSkins, dxRibbonCustomizationForm, cxClasses,
  dxRibbon, dxBar, dxStatusBar, Data.DB, Vcl.Grids, Vcl.DBGrids, udmConexao, uDMOrganizacao,uTituloPagarModel,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  FireDAC.Stan.Async, FireDAC.DApt, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
  cxTextEdit, cxBarEditItem, dxBarExtItems, dxSkinsCore, cxCalendar, EMsgDlg ;

type
  TfrmPagamentoTitulos = class(TForm)
    dxBarManager1: TdxBarManager;
    menuBaixaTP: TdxRibbonTab;
    dxRibbon1: TdxRibbon;
    dxStatusBar: TdxStatusBar;
    dbgrdMain: TDBGrid;
    dsTitulos: TDataSource;
    dxBarManager1Bar1: TdxBar;
    dxBarManager1Bar2: TdxBar;
    dxBarManager1Bar3: TdxBar;
    cxbrdtmPesquisa: TcxBarEditItem;
    dxBtnFechar: TdxBarLargeButton;
    dxBtnPagar: TdxBarLargeButton;
    dxBtnPagarAV: TdxBarLargeButton;
    qryPreencheGrid: TFDQuery;
    cxBarPesquisaCedente: TcxBarEditItem;
    dxBarManager1Bar4: TdxBar;
    dxBtnConsulta: TdxBarButton;
    dtInicial: TcxBarEditItem;
    dtFinal: TcxBarEditItem;
    qryVerificaBaixa: TFDQuery;
    PempecMsg: TEvMsgDlg;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure cxbrdtmPesquisaCurChange(Sender: TObject);
    procedure dxBtnFecharClick(Sender: TObject);
    procedure dbgrdMainTitleClick(Column: TColumn);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure dsTitulosDataChange(Sender: TObject; Field: TField);
    procedure dxBtnPagarClick(Sender: TObject);
    procedure dxBtnPagarAVClick(Sender: TObject);
    procedure cxBarPesquisaCedenteCurChange(Sender: TObject);
    procedure dxBtnConsultaClick(Sender: TObject);
  private
    { Private declarations }
    FSListaIDTP :TStringList;
    pIdTP,  pIdOrganizacao, pIdUsuario :string;
      vlrDevido : Currency;
      pTitulo :TTituloPagarModel;
        procedure msgStatusBar(pPosicao: Integer; msg: string);
    procedure limpaStatusBar;
    procedure LimpaTela(Form: TForm);
    procedure preencherGrid;
    procedure limpar;
    function preencheGrid(pIdOrganizacao: string; pDataInicio, pDataFim :TDateTime) :Boolean;
    function verificaBaixa(pIdOrganizacao, pid: string): Boolean;
  public
    { Public declarations }
  end;

var
  frmPagamentoTitulos: TfrmPagamentoTitulos;

implementation

{$R *.dfm}

procedure TfrmPagamentoTitulos.cxBarPesquisaCedenteCurChange(Sender: TObject);
begin
  dbgrdMain.DataSource.DataSet.Locate('FORNECEDOR',UpperCase(cxBarPesquisaCedente.CurEditValue),[loPartialKey]);
end;

procedure TfrmPagamentoTitulos.cxbrdtmPesquisaCurChange(Sender: TObject);
begin
 dbgrdMain.DataSource.DataSet.Locate('DOC',UpperCase(cxbrdtmPesquisa.CurEditValue),[loPartialKey]);
end;

procedure TfrmPagamentoTitulos.dbgrdMainTitleClick(Column: TColumn);
begin
 (dbgrdMain.DataSource.DataSet as TFDQuery).IndexFieldNames :=Column.FieldName;
end;

procedure TfrmPagamentoTitulos.dsTitulosDataChange(Sender: TObject;
  Field: TField);
begin
  pIdTP := qryPreencheGrid.FieldByName('ID').AsString;

  pTitulo := TTituloPagarModel.Create;
  pTitulo.FIDorganizacao := pIdOrganizacao;
  pTitulo.FID := pIdTP;

 msgStatusBar(1,' Título '+ qryPreencheGrid.FieldByName('DOC').AsString + ' pronto para ser pago. ' );

end;

procedure TfrmPagamentoTitulos.dxBtnConsultaClick(Sender: TObject);
var
dataIni, dataFim :TDate;
teste : TFDQuery;
begin

   dataIni := StrToDate(FormatDateTime('dd/mm/yyyy', dtInicial.EditValue));
   dataFim := StrToDate(FormatDateTime('dd/mm/yyyy', dtFinal.EditValue));

   msgStatusBar(3,'Consulta sendo processada, por favor, aguarde...');

   preencheGrid(pIdOrganizacao, dataIni, dataFim);

  //dbgrdMain.DataSource.DataSet.Close;
 //(dbgrdMain.DataSource.DataSet as TFDQuery).FormatOptions.FmtDisplayNumeric := '###,##0.00';
 // dbgrdMain.DataSource.DataSet := TTituloPagarDAO.obterTodosPagarQry(dataIni, dataFim, pIdOrganizacao);
  dbgrdMain.Refresh;




end;
procedure TfrmPagamentoTitulos.dxBtnFecharClick(Sender: TObject);
begin
 PostMessage(Self.Handle, WM_CLOSE, 0, 0);
end;

procedure TfrmPagamentoTitulos.dxBtnPagarAVClick(Sender: TObject);
begin
 ShowMessage('Ainda não é possível pagar com acréscimos e deduções.');

end;

procedure TfrmPagamentoTitulos.dxBtnPagarClick(Sender: TObject);
var
existBaixa : Boolean;
begin
existBaixa := verificaBaixa(pIdOrganizacao, pIdTP);


  dbgrdMain.Enabled := False;
  dbgrdMain.DataSource.DataSet.Close;


 try
   if not existBaixa then begin
    frmBaixa := TFrmBaixaFP.Create(Self,pTitulo);
    frmBaixa.ShowModal;
    FreeAndNil(frmBaixa);
   end else begin

     PempecMsg.MsgWarning('Documento possui baixa no sistema. Verifique os dados.');


   end;


  except
    on e: Exception do
      ShowMessage(e.Message + sLineBreak + 'Contate o suporte. Informe erro: ' + ' TfrmBaixaFP ' );
  end;

  LimpaTela(Self);
  limpar;


end;

procedure TfrmPagamentoTitulos.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin


  Action := caFree;

end;

procedure TfrmPagamentoTitulos.limpar;
begin

  dbgrdMain.Enabled := True;
  preencherGrid;
  limpaStatusBar;



end;


procedure TfrmPagamentoTitulos.FormCreate(Sender: TObject);
begin
  pIdOrganizacao := uUtil.TOrgAtual.getId;

  limpar;

end;

procedure TfrmPagamentoTitulos.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  case key of
    VK_F10: dxBtnPagar.Click;
    VK_F12: dxBtnPagarAV.Click;

  end;
end;

procedure TfrmPagamentoTitulos.preencherGrid;
var
 dtI, dtF :TDateTime;
begin
   dtI := IncYear(Now, -5);
   dtF := EndOfTheMonth(Now);

  if preencheGrid(pIdOrganizacao, dtI, dtF)  then
  begin
    (dbgrdMain.DataSource.DataSet as TFDQuery).Last;
    (dbgrdMain.DataSource.DataSet as TFDQuery).First;
  end;


end;


procedure TfrmPagamentoTitulos.msgStatusBar(pPosicao : Integer; msg :string);
begin
dxStatusBar.Panels[pPosicao].Text := msg;
Application.ProcessMessages;
end;

procedure TfrmPagamentoTitulos.limpaStatusBar;
begin
dxStatusBar.Panels[0].Text := 'Status ';
dxStatusBar.Panels[1].Text := 'Ativo. Teclas de atalho:  [F10] = Pagar ';
end;

procedure TfrmPagamentoTitulos.LimpaTela(Form: TForm);
var
  i: Integer;
begin

  for i := 0 to Form.ComponentCount - 1 do
  begin
    if Form.Components[i] is TCustomEdit then
    begin
      (Form.Components[i] as TCustomEdit).Clear;
    end;

    if Form.Components[i] is TLabel then
    begin
      TLabel(Form.Components[i]).Caption := '';
    end;

    if Form.Components[i] is TEdit then
    begin
      TEdit(Form.Components[i]).Clear;
    end;

   { if Form.Components[i] is TEvNumEdit then
    begin
      TEvNumEdit(Form.Components[i]).Clear ;
    end;  }

    if Form.Components[i] is TComboBox then
    begin
      TComboBox(Form.Components[i]).Clear ;
      TComboBox(Form.Components[i]).ItemIndex := 0;
    end;



   end;
end;


function TfrmPagamentoTitulos.preencheGrid(pIdOrganizacao: string; pDataInicio, pDataFim :TDateTime) :Boolean;
var
sqlCmd :string;

begin
 dmConexao.conectarBanco;
 try
    qryPreencheGrid.Close;
    qryPreencheGrid.Connection := dmConexao.conn;
    qryPreencheGrid.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
    qryPreencheGrid.ParamByName('DTDINICIAL').AsDate := pDataInicio;
    qryPreencheGrid.ParamByName('DTFINAL').AsDate := pDataFim;
    qryPreencheGrid.Open;
 except
 raise Exception.Create('Erro ao obter lista de títulos...' );

 end;

 Result := not qryPreencheGrid.IsEmpty;

end;



function TfrmPagamentoTitulos.verificaBaixa(pIdOrganizacao, pid: string) :Boolean;
var
sqlCmd :string;

begin
 //retorna true quando encontrar dados da baixa do titulo

 dmConexao.conectarBanco;


 try

    qryVerificaBaixa.Close;
    qryVerificaBaixa.Connection := dmConexao.conn;
    qryVerificaBaixa.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
    qryVerificaBaixa.ParamByName('PID').AsString := pid;

    qryVerificaBaixa.Open;


 except
 raise Exception.Create('Erro ao verificar baixa de título...' );

 end;

 Result := not qryVerificaBaixa.IsEmpty;

end;





end.
