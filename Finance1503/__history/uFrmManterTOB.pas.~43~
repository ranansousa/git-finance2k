unit uFrmManterTOB;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, dxSkinsCore, dxSkinsDefaultPainters, udmConexao, uUtil, uDMOrganizacao,
  cxGraphics, cxControls, cxLookAndFeels, cxLookAndFeelPainters, dxRibbonSkins,
  dxRibbonCustomizationForm, dxStatusBar, cxClasses, dxRibbon, dxBar,  uContaContabilModel,
  uFrameContaContabil, Data.DB, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client, Vcl.Grids, Vcl.DBGrids, Vcl.StdCtrls, cxContainer,
  cxEdit, cxTextEdit, cxBarEditItem, EMsgDlg;

type
  TfrmManterTOB = class(TForm)
    dxBarManager1: TdxBarManager;
    dxRibbon1Tab1: TdxRibbonTab;
    dxRibbon1: TdxRibbon;
    dxStatusBar: TdxStatusBar;
    frmContaContabil1: TfrmContaContabil;
    dbgrd1: TDBGrid;
    dsGrid: TDataSource;
    edtDescricaoConta: TEdit;
    edtCODREDUZ: TEdit;
    lbl1: TLabel;
    edtContaContabil: TEdit;
    lbl2: TLabel;
    lbl3: TLabel;
    edtDescicao: TEdit;
    lbl4: TLabel;
    cbbTipo: TComboBox;
    edtCodHistPadrao: TEdit;
    lbl5: TLabel;
    dxBarManager1Bar1: TdxBar;
    dxBtnEditar: TdxBarLargeButton;
    dxBarSalvar: TdxBar;
    dxBtnSalvar: TdxBarLargeButton;
    dxBarManager1Bar2: TdxBar;
    dxBtnNovo: TdxBarLargeButton;
    dxBarManager1Bar3: TdxBar;
    dxBtnFechar: TdxBarLargeButton;
    dxBarManager1Bar4: TdxBar;
    dxBtnDeletar: TdxBarLargeButton;
    dxBarManager1Bar5: TdxBar;
    cxbrdtmPesquisa: TcxBarEditItem;
    qryPreencheGrid: TFDQuery;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure dsGridDataChange(Sender: TObject; Field: TField);
    procedure frmContaContabil1cbbContaContabilChange(Sender: TObject);
    procedure dxBtnEditarClick(Sender: TObject);
    procedure dxBtnSalvarClick(Sender: TObject);
    procedure dxBtnFecharClick(Sender: TObject);
    procedure dxBtnNovoClick(Sender: TObject);
    procedure dxBtnDeletarClick(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure dbgrd1TitleClick(Column: TColumn);
    procedure cxbrdtmPesquisaCurChange(Sender: TObject);
  private
    { Private declarations }
   pIdContaContabil, pIdTOB,  pIdOrganizacao, pIdUsuario :string;
   FslistaTipo,    FsListaIdContas : TStringList;
    procedure inicializarDM(Sender: TObject);
    procedure freeAndNilDM(Sender: TObject);
    procedure limparPanel;
    procedure msgStatusBar(pPosicao: Integer; msg: string);
    procedure limpaStatusBar;
    function obterTipoTOB(pTipo: String): Integer;
    procedure preencheComboTipo;
    function salvarTOB(pIdOrganizacao, pIdTOB, pIdContaContabil, pTipo, pDescricao: string; pCodigo: Integer): Boolean;
    function qtdUso(pIdOrganizacao, pIdTOB: string): Integer;
    function deletar (pIdOrganizacao, pIdTOB :string): Boolean;


  public
    { Public declarations }
    procedure preencheGrid(pIdOrganizacao :string);

  end;

var
  frmManterTOB: TfrmManterTOB;

implementation

{$R *.dfm}

procedure TfrmManterTOB.cxbrdtmPesquisaCurChange(Sender: TObject);
begin
  dbgrd1.DataSource.DataSet.Locate('DESCRICAO',UpperCase(cxbrdtmPesquisa.CurEditValue),[loPartialKey]);
end;

procedure TfrmManterTOB.dbgrd1TitleClick(Column: TColumn);
begin
 (dbgrd1.DataSource.DataSet as TFDQuery).IndexFieldNames :=Column.FieldName;
end;

function TfrmManterTOB.deletar(pIdOrganizacao, pIdTOB: string): Boolean;
var cmd :string;
qryDel :TFDQuery;
begin

try

      cmd := ' DELETE FROM TIPO_OPERACAO_BANCARIA  WHERE  (ID_ORGANIZACAO = :PIDORGANIZACAO) AND (ID_TIPO_OPERACAO_BANCARIA = :PID) ';

      qryDel := TFDQuery.Create(Self);
      qryDel.Close;
      qryDel.Connection := dmConexao.conn;
      qryDel.SQL.Clear;
      qryDel.SQL.Add(cmd);
      qryDel.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
      qryDel.ParamByName('PID').AsString := pIdTOB;
      qryDel.ExecSQL;

  dmConexao.conn.CommitRetaining;

except
  dmConexao.conn.RollbackRetaining;
  Result := System.False;
raise Exception.Create(' Não foi possível deletar o registro. Inform ao suporte.');

end;
  limparPanel;
  Result := System.True;
end;

procedure TfrmManterTOB.dsGridDataChange(Sender: TObject;
  Field: TField);
  var
  idContaContabil :string;
  I: Integer;
  conta :TContaContabilModel;
begin
    idContaContabil :=  (dbgrd1.DataSource.DataSet as TFDQuery).FieldByName('ID_CONTA_CONTABIL').AsString;
    edtDescicao.Text :=  (dbgrd1.DataSource.DataSet as TFDQuery).FieldByName('DESCRICAO').AsString;
    cbbTipo.ItemIndex := obterTipoTOB( (dbgrd1.DataSource.DataSet as TFDQuery).FieldByName('TIPO').AsString);
    edtCodHistPadrao.Text :=  (dbgrd1.DataSource.DataSet as TFDQuery).FieldByName('CODIGO').AsString;
    pIdTOB :=  (dbgrd1.DataSource.DataSet as TFDQuery).FieldByName('ID_TIPO_OPERACAO_BANCARIA').AsString;

    if qtdUso(pIdOrganizacao, pIdTOB) = 0 then
    begin
      dxBtnDeletar.Enabled := True;
    end
    else
    begin
      dxBtnDeletar.Enabled := False;
    end;

   if not uUtil.Empty(idContaContabil) then begin

        for I := 0 to FsListaIdContas.Count -1 do begin
             if FsListaIdContas[I].Equals(idContaContabil) then begin
                 frmContaContabil1.cbbContaContabil.ItemIndex := I;
                conta := TContaContabilModel.Create;
                conta := frmContaContabil1.obterPorID(pIdOrganizacao, idContaContabil);

                if not uUtil.Empty(conta.FCodigoReduzido)  then begin

                   edtDescricaoConta.Text := conta.FDescricao;
                   edtCODREDUZ.Text := conta.FCodigoReduzido;
                   edtContaContabil.Text :=conta.FConta;
                end;
             end;
        end;
   end else begin
      frmContaContabil1.cbbContaContabil.ItemIndex := 0;
              edtDescricaoConta.Clear;
               edtCODREDUZ..Clear;
               edtContaContabil..Clear;
    end;

end;

procedure TfrmManterTOB.dxBtnDeletarClick(Sender: TObject);
begin

 if deletar(pIdOrganizacao, pIdTOB) then begin
  ShowMessage('Histórico deletado com sucesso.');
 end;
end;

procedure TfrmManterTOB.dxBtnEditarClick(Sender: TObject);
begin
  dbgrd1.Enabled :=False;
  frmContaContabil1.cbbContaContabil.Enabled :=True;
  cbbTipo.Enabled :=True;
  edtDescicao.Enabled :=True;
  edtCodHistPadrao.Enabled :=True;
  cxbrdtmPesquisa.Enabled :=False;

  pIdTOB :=  (dbgrd1.DataSource.DataSet as TFDQuery).FieldByName('ID_TIPO_OPERACAO_BANCARIA').AsString;
  pIdContaContabil := (dbgrd1.DataSource.DataSet as TFDQuery).FieldByName('ID_CONTA_CONTABIL').AsString;
  dxBtnSalvar.Enabled :=true ;
  dxBtnNovo.Enabled :=False;

end;

procedure TfrmManterTOB.dxBtnFecharClick(Sender: TObject);
begin
 PostMessage(Self.Handle, WM_CLOSE, 0, 0);
end;

procedure TfrmManterTOB.dxBtnNovoClick(Sender: TObject);
begin
  limparPanel;

  dbgrd1.Enabled :=False;
 (dbgrd1.DataSource.DataSet as TFDQuery).Close;

  frmContaContabil1.cbbContaContabil.Enabled :=True;
  frmContaContabil1.cbbContaContabil.ItemIndex :=0;

  cbbTipo.Enabled          :=True;
  edtDescicao.Enabled     :=True;
  edtCodHistPadrao.Enabled :=True;
  dxBtnSalvar.Enabled      :=True;
  dxBtnEditar.Enabled      :=False;

  pIdTOB :='';
  cxbrdtmPesquisa.Enabled :=False;




end;

procedure TfrmManterTOB.dxBtnSalvarClick(Sender: TObject);
var
 conta :TContaContabilModel;
 pDescricao, pTipo :string;
 pCodigo :Integer;

begin
  if frmContaContabil1.cbbContaContabil.ItemIndex >0 then begin
    conta := TContaContabilModel.Create;
    pIdContaContabil := FsListaIdContas[frmContaContabil1.cbbContaContabil.ItemIndex];
    conta := TContaContabilModel.Create;
    conta := frmContaContabil1.obterPorID(pIdOrganizacao, pIdContaContabil);
  end;

 if not uUtil.Empty(pIdTOB) then begin
        pIdTOB :=  (dbgrd1.DataSource.DataSet as TFDQuery).FieldByName('ID_TIPO_OPERACAO_BANCARIA').AsString;
 end;


  pDescricao   := UpperCase(edtDescicao.Text);
  pCodigo      := StrToInt(edtCodHistPadrao.Text);
  pTipo        := FslistaTipo[cbbTipo.ItemIndex];

  if salvarTOB(pIdOrganizacao, pIdTOB,pIdContaContabil,pTipo,pDescricao,pCodigo) then begin

      ShowMessage('Tipo Operação Bancária salvo com sucesso.');

   end;

   limparPanel;

end;

procedure TfrmManterTOB.FormClose(Sender: TObject; var Action: TCloseAction);
begin
 freeAndNilDM(Self);
 Action :=caFree;

end;

procedure TfrmManterTOB.FormCreate(Sender: TObject);
begin
 inicializarDM(Self);
 limparPanel;
end;

procedure TfrmManterTOB.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
 case key of
  vk_f2: dxBtnEditar.Click;
  vk_f4: dxBtnNovo.Click;
  vk_f10: dxBtnSalvar.Click;
end;

end;

procedure TfrmManterTOB.freeAndNilDM(Sender: TObject);
begin

//nada
end;

procedure TfrmManterTOB.frmContaContabil1cbbContaContabilChange(
  Sender: TObject);
  var
  conta : TContaContabilModel;
begin
  if frmContaContabil1.cbbContaContabil.ItemIndex > 0 then
  begin
    pIdContaContabil := FsListaIdContas[frmContaContabil1.cbbContaContabil.ItemIndex];
    conta := TContaContabilModel.Create;
    conta := frmContaContabil1.obterPorID(pIdOrganizacao, pIdContaContabil);

    if not uUtil.Empty(conta.FCodigoReduzido) then
    begin

      edtDescricaoConta.Text := conta.FDescricao;
      edtCODREDUZ.Text := conta.FCodigoReduzido;
      edtContaContabil.Text := conta.FConta;
      pIdContaContabil :=conta.FIdContaContabil;
    end;

  end;

end;

procedure TfrmManterTOB.inicializarDM(Sender: TObject);
begin
 //nada
 if not Assigned(dmOrganizacao) then begin
    dmOrganizacao := TdmOrganizacao.Create(Self);
 end;

 limparPanel;

end;

procedure TfrmManterTOB.limparPanel();
begin
 limpaStatusBar;
 pIdOrganizacao := UUtil.TOrgAtual.getId;
 pIdUsuario :=uutil.TUserAtual.getUserId;

 frmContaContabil1.obterTodos(pIdOrganizacao, frmContaContabil1.cbbContaContabil,FsListaIdContas);
 preencheComboTipo();

  frmContaContabil1.cbbContaContabil.Enabled :=False;
  preencheGrid(pIdOrganizacao);

 //botao editar muda
  dbgrd1.Enabled :=True;

  cbbTipo.Enabled :=False;
  edtDescicao.Enabled :=False;
  edtCodHistPadrao.Enabled :=False;


  edtDescricaoConta.Clear;
  edtCodHistPadrao.Clear;
  edtDescricaoConta.Clear;
  edtCODREDUZ.Clear;
  edtContaContabil.Clear;
  edtDescicao.Clear;

  dxBtnNovo.Enabled := True;
  dxBtnEditar.Enabled := True;
  dxBtnSalvar.Enabled :=False;
  dxBtnDeletar.Enabled := False;
  cxbrdtmPesquisa.Enabled :=True;


  cbbTipo.ItemIndex :=0;
  frmContaContabil1.cbbContaContabil.ItemIndex :=0;


end;

procedure TfrmManterTOB.msgStatusBar(pPosicao : Integer; msg :string);
begin
dxStatusBar.Panels[pPosicao].Text := msg;
Application.ProcessMessages;
end;

procedure TfrmManterTOB.preencheGrid(pIdOrganizacao: string);
var
sqlCmd :string;
begin

dmConexao.conectarBanco;
 try

    sqlCmd := ' SELECT H.ID_TIPO_OPERACAO_BANCARIA,  H.ID_ORGANIZACAO,' +
              ' H.DESCRICAO, H.TIPO, H.CODIGO, H.ID_CONTA_CONTABIL,' +
              ' CC.CONTA, CC.CODREDUZ' +
              ' FROM TIPO_OPERACAO_BANCARIA H' +
              ' LEFT OUTER JOIN CONTA_CONTABIL CC ON (CC.ID_CONTA_CONTABIL = H.ID_CONTA_CONTABIL)' +
              ' WHERE (H.ID_ORGANIZACAO = :PIDORGANIZACAO) '+
              ' ORDER BY H.DESCRICAO ' ;


    qryPreencheGrid.Close;
    qryPreencheGrid.Connection := dmConexao.conn;
    qryPreencheGrid.SQL.Clear;
    qryPreencheGrid.SQL.Add(sqlCmd);
    qryPreencheGrid.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
    qryPreencheGrid.Open;

    (dbgrd1.DataSource.DataSet as TFDQuery).Last;
    (dbgrd1.DataSource.DataSet as TFDQuery).First;

 except
 raise Exception.Create('Erro ao obter lista de tipos de operações bancárias');

 end;


end;

function TfrmManterTOB.qtdUso(pIdOrganizacao, pIdTOB: string): Integer;
  var
qryTP, qryTR : TFDQuery;
cmd : string;
qtd :Integer;

begin
  dmConexao.conectarBanco;
  qtd := 0;

  try

    cmd := ' SELECT  FIRST 1 TP.ID_CONTA_BANCARIA_CREDITO  FROM CONTA_BANCARIA_CREDITO TP WHERE (TP.ID_ORGANIZACAO = :PIDORGANIZACAO) AND (TP.ID_CONTA_BANCARIA_CREDITO  = :PID) ';

    qryTP := TFDQuery.Create(Self);
    qryTP.Close;
    qryTP.Connection := dmConexao.conn;
    qryTP.SQL.Clear;
    qryTP.SQL.Add(cmd);
    qryTP.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
    qryTP.ParamByName('PID').AsString := pIdTOB;
    qryTP.Open;

    qtd := qtd + qryTP.RecordCount;

    if qtd < 1 then
    begin

      cmd := ' SELECT  FIRST 1 TP.ID_CONTA_BANCARIA_DEBITO  FROM CONTA_BANCARIA_DEBITO TP WHERE (TP.ID_ORGANIZACAO = :PIDORGANIZACAO) AND (TP.ID_CONTA_BANCARIA_DEBITO  = :PID) ';

      qryTP := TFDQuery.Create(Self);
      qryTP.Close;
      qryTP.Connection := dmConexao.conn;
      qryTP.SQL.Clear;
      qryTP.SQL.Add(cmd);
      qryTP.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
      qryTP.ParamByName('PID').AsString := pIdTOB;
      qryTP.Open;

      qtd := qtd + qryTP.RecordCount;

    end;

    if qtd < 1 then
    begin

      cmd := ' SELECT  FIRST 1 TP.ID_CONTA_BANCARIA_TRANSFERENCIA  FROM CONTA_BANCARIA_TRANSFERENCIA TP WHERE (TP.ID_ORGANIZACAO = :PIDORGANIZACAO) AND (TP.ID_CONTA_BANCARIA_TRANSFERENCIA  = :PID) ';

      qryTP := TFDQuery.Create(Self);
      qryTP.Close;
      qryTP.Connection := dmConexao.conn;
      qryTP.SQL.Clear;
      qryTP.SQL.Add(cmd);
      qryTP.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
      qryTP.ParamByName('PID').AsString := pIdTOB;
      qryTP.Open;

      qtd := qtd + qryTP.RecordCount;

    end;


     if qtd < 1 then
    begin

      cmd := ' SELECT  FIRST 1 TP.ID_LOTE_PAGAMENTO  FROM LOTE_PAGAMENTO TP WHERE (TP.ID_ORGANIZACAO = :PIDORGANIZACAO) AND (TP.ID_LOTE_PAGAMENTO  = :PID) ';

      qryTP := TFDQuery.Create(Self);
      qryTP.Close;
      qryTP.Connection := dmConexao.conn;
      qryTP.SQL.Clear;
      qryTP.SQL.Add(cmd);
      qryTP.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
      qryTP.ParamByName('PID').AsString := pIdTOB;
      qryTP.Open;

      qtd := qtd + qryTP.RecordCount;

    end;


     if qtd < 1 then
    begin

      cmd := ' SELECT  FIRST 1 TP.ID_TITULO_PAGAR_BAIXA_CHEQUE  FROM TITULO_PAGAR_BAIXA_CHEQUE TP WHERE (TP.ID_ORGANIZACAO = :PIDORGANIZACAO) AND (TP.ID_TITULO_PAGAR_BAIXA_CHEQUE  = :PID) ';

      qryTP := TFDQuery.Create(Self);
      qryTP.Close;
      qryTP.Connection := dmConexao.conn;
      qryTP.SQL.Clear;
      qryTP.SQL.Add(cmd);
      qryTP.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
      qryTP.ParamByName('PID').AsString := pIdTOB;
      qryTP.Open;

      qtd := qtd + qryTP.RecordCount;

    end;



     if qtd < 1 then
    begin

      cmd := ' SELECT  FIRST 1 TP.VALOR  FROM TITULO_PAGAR_BAIXA_INTERNET TP WHERE (TP.ID_ORGANIZACAO = :PIDORGANIZACAO) AND (TP.ID_TITULO_PAGAR_BAIXA_INTERNET  = :PID) ';

      qryTP := TFDQuery.Create(Self);
      qryTP.Close;
      qryTP.Connection := dmConexao.conn;
      qryTP.SQL.Clear;
      qryTP.SQL.Add(cmd);
      qryTP.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
      qryTP.ParamByName('PID').AsString := pIdTOB;
      qryTP.Open;

      qtd := qtd + qryTP.RecordCount;

    end;



  except
    raise Exception.Create('Erro ao buscar uso dos Tipos de operações ');

  end;

  Result := qtd;

end;

procedure TfrmManterTOB.limpaStatusBar;
begin
dxStatusBar.Panels[0].Text := 'Status ';
dxStatusBar.Panels[1].Text := 'Ativo. Teclas de atalho:  [F2] = Editar  - [F4] = Novo - [F10] = Salvar  ';
end;

function TfrmManterTOB.obterTipoTOB(pTipo :String) :Integer;
var
  posicao: Integer;
  I: Integer;
begin
  posicao := 0;

  for I := 0 to FslistaTipo.Count -1 do begin
       if FslistaTipo[I].Equals(pTipo) then begin
         posicao := I;
       end;
  end;

  Result := posicao;
end;

procedure TfrmManterTOB.preencheComboTipo;
begin

  FslistaTipo :=TStringList.Create;
  FslistaTipo.Clear;
  FslistaTipo.Add('0');
  FslistaTipo.Add('1');
  FslistaTipo.Add('2');
  FslistaTipo.Add('3');

  cbbTipo.Clear;
  cbbTipo.Items.Add(' >>Selecione<<');
  cbbTipo.Items.Add('Cheque');
  cbbTipo.Items.Add('Especie');
  cbbTipo.Items.Add('Internet');

end;


function  TfrmManterTOB.salvarTOB(pIdOrganizacao, pIdTOB, pIdContaContabil, pTipo, pDescricao :string; pCodigo :Integer) :Boolean;
var
cmdSalvar :string;
qrySalvar :TFDQuery;
begin

 dmConexao.conectarBanco;
 try

   cmdSalvar := ' UPDATE TIPO_OPERACAO_BANCARIA  SET DESCRICAO = :PDESCRICAO ,  TIPO = :PTIPO, '+
                ' ID_CONTA_CONTABIL = :PIDCONTA , CODIGO = :PCODIGO ' +
                ' WHERE (ID_ORGANIZACAO = :PIDORGANIZACAO) AND (ID_TIPO_OPERACAO_BANCARIA = :PID) ';



   if UUTIL.Empty(pIdTOB) then begin

     pIdTOB := dmConexao.obterNewID;


   cmdSalvar := ' INSERT  INTO TIPO_OPERACAO_BANCARIA (ID_TIPO_OPERACAO_BANCARIA, ID_ORGANIZACAO, ' +
                ' DESCRICAO, TIPO, CODIGO, ID_CONTA_CONTABIL  ) ' +
                ' VALUES (:PID, :PIDORGANIZACAO, :PDESCRICAO, :PTIPO, :PCODIGO, :PIDCONTA)' ;
   end;

    if not uUtil.Empty(pIdTOB) then
    begin

      qrySalvar := TFDQuery.Create(Self);
      qrySalvar.Close;
      qrySalvar.Connection := dmConexao.conn;
      qrySalvar.SQL.Clear;
      qrySalvar.SQL.Add(cmdSalvar);

      qrySalvar.ParamByName('PID').AsString := pIdTOB;
      qrySalvar.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
      qrySalvar.ParamByName('PDESCRICAO').AsString := UpperCase(pDescricao);
      qrySalvar.ParamByName('PTIPO').AsInteger := StrToInt(pTipo);
      qrySalvar.ParamByName('PIDCONTA').AsString := pIdContaContabil;
      qrySalvar.ParamByName('PCODIGO').AsInteger := pCodigo;
      qrySalvar.ExecSQL;

      dmConexao.conn.CommitRetaining;
    end;

 except
 Result :=False;
  raise Exception.Create('Erro ao tentar salvar o historico.');
 end;

  Result :=True;
end;

end.
