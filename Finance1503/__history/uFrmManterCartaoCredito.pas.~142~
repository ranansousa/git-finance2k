unit uFrmManterCartaoCredito;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, dxSkinsCore, dxSkinsDefaultPainters, udmConexao, uUtil, uDMOrganizacao,
  cxGraphics, cxControls, cxLookAndFeels, cxLookAndFeelPainters, dxRibbonSkins,
  dxRibbonCustomizationForm, dxStatusBar, cxClasses, dxRibbon, dxBar,  uContaContabilModel,
  uFrameContaContabil, Data.DB, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client, Vcl.Grids, Vcl.DBGrids, Vcl.StdCtrls, cxContainer,
  cxEdit, cxTextEdit, cxBarEditItem, EMsgDlg, ENumEd, Vcl.ComCtrls, uCartaoCreditoModel,
  uFrameCartaoCredito;

type
  TfrmManterCartaoCredito = class(TForm)
    dxBarManager1: TdxBarManager;
    dxRibbon1Tab1: TdxRibbonTab;
    dxRibbon1: TdxRibbon;
    dxStatusBar: TdxStatusBar;
    dbgrdMain: TDBGrid;
    dsGrid: TDataSource;
    edtNumeroCartao: TEdit;
    edtDiaVcto: TEdit;
    lbl1: TLabel;
    edtCodigoSeg: TEdit;
    lbl2: TLabel;
    lbl3: TLabel;
    edtTitular: TEdit;
    lbl4: TLabel;
    edtBandeira: TEdit;
    lbl5: TLabel;
    dxBarManager1Bar1: TdxBar;
    dxBtnEditar: TdxBarLargeButton;
    dxBarSalvar: TdxBar;
    dxBtnSalvar: TdxBarLargeButton;
    dxBarManager1Bar2: TdxBar;
    dxBtnNovo: TdxBarLargeButton;
    dxBarManager1Bar3: TdxBar;
    dxBtnFechar: TdxBarLargeButton;
    dxBarManager1Bar4: TdxBar;
    dxBtnDeletar: TdxBarLargeButton;
    dxBarManager1Bar5: TdxBar;
    cxbrdtmPesquisa: TcxBarEditItem;
    qryPreencheGrid: TFDQuery;
    dxBarManager1Bar6: TdxBar;
    dxBtnLimpar: TdxBarLargeButton;
    lbl6: TLabel;
    edtLimite: TEvNumEdit;
    edtDiaCompra: TEdit;
    lbl7: TLabel;
    lbl8: TLabel;
    dtpValidade: TDateTimePicker;
    lbl9: TLabel;
    frmCartaoCredito1: TfrmCartaoCredito;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure dsGridDataChange(Sender: TObject; Field: TField);
    procedure dxBtnEditarClick(Sender: TObject);
    procedure dxBtnSalvarClick(Sender: TObject);
    procedure dxBtnFecharClick(Sender: TObject);
    procedure dxBtnNovoClick(Sender: TObject);
    procedure dxBtnDeletarClick(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure dbgrdMainTitleClick(Column: TColumn);
    procedure cxbrdtmPesquisaCurChange(Sender: TObject);
    procedure dxBtnLimparClick(Sender: TObject);
    procedure dbgrdMainCellClick(Column: TColumn);
  private
    { Private declarations }
   pIdCartao, pIdOrganizacao, pIdUsuario :string;
   FsListaIdCartao : TStringList;
   controlExibe :Integer; //libera a exibição dos dados no painel se não for na abertura do form. começa com 0; 0 nao permite abrir
    procedure inicializarDM(Sender: TObject);
    procedure freeAndNilDM(Sender: TObject);
    procedure limparPanel;
    procedure msgStatusBar(pPosicao: Integer; msg: string);
    procedure limpaStatusBar;
    function obterCartao(pCartao: TCartaoCreditoModel): TCartaoCreditoModel;
    function salvar(pCartao: TCartaoCreditoModel): Boolean;

    function qtdUso(pCartao: TCartaoCreditoModel): Integer;

    function deletar (pCartao: TCartaoCreditoModel): Boolean;
    procedure preencheAba (pCartao: TCartaoCreditoModel);


  public
    { Public declarations }
    procedure preencheGrid(pIdOrganizacao :string);

  end;

var
  frmManterCartaoCredito: TfrmManterCartaoCredito;

implementation

{$R *.dfm}

procedure TfrmManterCartaoCredito.cxbrdtmPesquisaCurChange(Sender: TObject);
begin
  dbgrdMain.DataSource.DataSet.Locate('CARTAO',UpperCase(cxbrdtmPesquisa.CurEditValue),[loPartialKey]);
end;

procedure TfrmManterCartaoCredito.dbgrdMainCellClick(Column: TColumn);
begin

Inc(controlExibe);

end;

procedure TfrmManterCartaoCredito.dbgrdMainTitleClick(Column: TColumn);
begin
 (dbgrdMain.DataSource.DataSet as TFDQuery).IndexFieldNames :=Column.FieldName;
end;


function TfrmManterCartaoCredito.deletar(pCartao: TCartaoCreditoModel): Boolean;
var cmd :string;
qryDel :TFDQuery;
begin

try
      cmd := ' DELETE FROM CARTAO_CREDITO  WHERE  (ID_ORGANIZACAO = :PIDORGANIZACAO) AND (ID_CARTAO_CREDITO = :PID) ';

      qryDel := TFDQuery.Create(Self);
      qryDel.Close;
      qryDel.Connection := dmConexao.conn;
      qryDel.SQL.Clear;
      qryDel.SQL.Add(cmd);
      qryDel.ParamByName('PIDORGANIZACAO').AsString := pCartao.FIDorganizacao;
      qryDel.ParamByName('PID').AsString := pCartao.FID;
      qryDel.ExecSQL;

  dmConexao.conn.CommitRetaining;

except
  dmConexao.conn.RollbackRetaining;
  Result := System.False;
raise Exception.Create(' Não foi possível deletar o cartão de crédito. Inform ao suporte.');

end;
  limparPanel;
  Result := System.True;
end;

procedure TfrmManterCartaoCredito.dsGridDataChange(Sender: TObject;
  Field: TField);
  var
  idCartao :string;
  I: Integer;
  conta :TContaContabilModel;
  cartao : TCartaoCreditoModel;

begin
    idCartao :=  (dbgrdMain.DataSource.DataSet as TFDQuery).FieldByName('ID_CARTAO_CREDITO').AsString;
    cartao := TCartaoCreditoModel.Create;
    cartao.FID := idCartao;
    cartao.FIDorganizacao := pIdOrganizacao;
    cartao := obterCartao(cartao);
  if controlExibe > 0 then
  begin
    preencheAba(cartao);
  end;

  if qtdUso(cartao) = 0 then
  begin
    dxBtnDeletar.Enabled := True;
  end
  else
  begin
    dxBtnDeletar.Enabled := False;
  end;

  dxBtnEditar.Enabled := True;

end;

procedure TfrmManterCartaoCredito.dxBtnDeletarClick(Sender: TObject);
var
cartaoDelete :TCartaoCreditoModel;
begin
cartaoDelete                := TCartaoCreditoModel.Create;
cartaoDelete.FID            := pIdCartao;
cartaoDelete.FIDorganizacao := pIdOrganizacao;
cartaoDelete := obterCartao(cartaoDelete);

 if deletar(cartaoDelete) then begin
  ShowMessage('Cartão deletado com sucesso.');
 end;
end;

procedure TfrmManterCartaoCredito.dxBtnEditarClick(Sender: TObject);
 var
 cartaoEdt :TCartaoCreditoModel;
begin


  dbgrdMain.Enabled :=False;

  pIdCartao :=  (dbgrdMain.DataSource.DataSet as TFDQuery).FieldByName('ID_CARTAO_CREDITO').AsString;

  cartaoEdt                :=TCartaoCreditoModel.Create;
  cartaoEdt.FID            := pIdCartao;
  cartaoEdt.FIDorganizacao := pIdOrganizacao;
  cartaoEdt                := obterCartao(cartaoEdt);

  preencheAba(cartaoEdt);

  dxBtnSalvar.Enabled :=true ;
  dxBtnNovo.Enabled :=False;

end;

procedure TfrmManterCartaoCredito.dxBtnFecharClick(Sender: TObject);
begin
 PostMessage(Self.Handle, WM_CLOSE, 0, 0);
end;

procedure TfrmManterCartaoCredito.dxBtnLimparClick(Sender: TObject);
begin
limparPanel;
end;

procedure TfrmManterCartaoCredito.dxBtnNovoClick(Sender: TObject);
begin
  limparPanel;

  dbgrdMain.Enabled :=False;
 (dbgrdMain.DataSource.DataSet as TFDQuery).Close;
  frmCartaoCredito1.cbbCartao.Clear;
  frmCartaoCredito1.cbbCartao.ItemIndex :=0;

  dxBtnSalvar.Enabled      :=True;
  dxBtnEditar.Enabled      :=False;

  pIdCartao :='';
  cxbrdtmPesquisa.Enabled :=False;

end;

procedure TfrmManterCartaoCredito.dxBtnSalvarClick(Sender: TObject);
var
 cartaoSalva :TCartaoCreditoModel;
 pDescricao, pTipo :string;
 pCodigo :Integer;

begin
   cartaoSalva := TCartaoCreditoModel.Create;
   cartaoSalva.FID              := pIdCartao;
   cartaoSalva.FIDorganizacao   := pIdOrganizacao;
   cartaoSalva.FDataValidade    := dtpValidade.DateTime;
   cartaoSalva.FLimite          := edtLimite.Value;
   cartaoSalva.FDiaCompra       := edtDiaCompra.Text;
   cartaoSalva.FBandeira        := edtBandeira.Text;
   cartaoSalva.FCodigoSeguranca := edtCodigoSeg.Text;
   cartaoSalva.FTitular         := edtTitular.Text;
   cartaoSalva.FDiaVencimento   := edtDiaVcto.Text;
   cartaoSalva.FNumero          := edtNumeroCartao.Text;
   cartaoSalva.FCartao          := frmCartaoCredito1.cbbCartao.Text;



  if salvar(cartaoSalva) then begin

      ShowMessage('Cartão salvo com sucesso.');

   end;

   limparPanel;

end;

procedure TfrmManterCartaoCredito.FormClose(Sender: TObject; var Action: TCloseAction);
begin
 freeAndNilDM(Self);
 Action :=caFree;

end;

procedure TfrmManterCartaoCredito.FormCreate(Sender: TObject);
begin
 inicializarDM(Self);
controlExibe :=0;
end;

procedure TfrmManterCartaoCredito.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
 case key of
  vk_f2: dxBtnEditar.Click;
  vk_f4: dxBtnNovo.Click;
  vk_f10: dxBtnSalvar.Click;
end;

end;

procedure TfrmManterCartaoCredito.freeAndNilDM(Sender: TObject);
begin

//nada
end;




procedure TfrmManterCartaoCredito.inicializarDM(Sender: TObject);
begin
 //nada
 if not Assigned(dmOrganizacao) then begin
    dmOrganizacao := TdmOrganizacao.Create(Self);
 end;

 limparPanel;

end;

procedure TfrmManterCartaoCredito.limparPanel();
begin
 limpaStatusBar;
 pIdOrganizacao := UUtil.TOrgAtual.getId;
 pIdUsuario :=uutil.TUserAtual.getUserId;


  preencheGrid(pIdOrganizacao);

 //botao editar muda
  dbgrdMain.Enabled :=True;
  frmCartaoCredito1.obterTodos(pIdOrganizacao,frmCartaoCredito1.cbbCartao, FsListaIdCartao);
  frmCartaoCredito1.cbbCartao.ItemIndex := 0;


  edtNumeroCartao.Clear;
  edtDiaVcto.Clear;
  edtCodigoSeg.Clear;
  edtTitular.Clear;
  edtBandeira.Clear;
  edtLimite.Clear;
  edtDiaCompra.Clear;
  dtpValidade.DateTime := Now;


  dxBtnNovo.Enabled := True;
  dxBtnEditar.Enabled := False;
  dxBtnSalvar.Enabled :=False;
  dxBtnDeletar.Enabled := False;
  cxbrdtmPesquisa.Enabled :=True;



end;

procedure TfrmManterCartaoCredito.msgStatusBar(pPosicao : Integer; msg :string);
begin
dxStatusBar.Panels[pPosicao].Text := msg;
Application.ProcessMessages;
end;

procedure TfrmManterCartaoCredito.preencheAba(pCartao: TCartaoCreditoModel);
var
posicao, I :Integer;
begin
 posicao:=0;

  if not uUtil.Empty(pCartao.FID) then begin

    pIdCartao := pCartao.FID;
    edtNumeroCartao.Text := pCartao.FNumero;
    edtDiaVcto.Text      := pCartao.FDiaVencimento;
    edtCodigoSeg.Text    := pCartao.FCodigoSeguranca;
    edtTitular.Text      := pCartao.FTitular;
    edtBandeira.Text     := pCartao.FBandeira;
    edtLimite.Value      := pCartao.FLimite;
    edtDiaCompra.Text    := pCartao.FDiaCompra;
    dtpValidade.Date     := pCartao.FDataValidade;

    for I := 0 to FsListaIdCartao.Count - 1 do
    begin
      if FsListaIdCartao[I].Equals(pIdCartao) then
      begin
        posicao := I;
        Break;
      end;
    end;

  frmCartaoCredito1.cbbCartao.ItemIndex := posicao;

  end;

end;

procedure TfrmManterCartaoCredito.preencheGrid(pIdOrganizacao: string);
var
sqlCmd :string;
begin

dmConexao.conectarBanco;
 try

    sqlCmd := ' SELECT C.ID_CARTAO_CREDITO,' +
              ' C.ID_ORGANIZACAO, C.CARTAO,' +
              ' C.NUMERO, C.LIMITE,' +
              ' C.DIA_VENCIMENTO, C.DATA_VALIDADE,' +
              ' C.TITULAR, C.CODIGO_SEGURANCA,' +
              ' C.BANDEIRA, C.DIA_COMPRA' +
              ' FROM CARTAO_CREDITO C' +
              ' WHERE (C.ID_ORGANIZACAO = :PIDORGANIZACAO)' +
              ' ORDER BY C.CARTAO ' ;

    qryPreencheGrid.Close;
    qryPreencheGrid.Connection := dmConexao.conn;
    qryPreencheGrid.SQL.Clear;
    qryPreencheGrid.SQL.Add(sqlCmd);
    qryPreencheGrid.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
    qryPreencheGrid.Open;

    (dbgrdMain.DataSource.DataSet as TFDQuery).Last;
    (dbgrdMain.DataSource.DataSet as TFDQuery).First;

 except
 raise Exception.Create('Erro ao obter lista de cartão');

 end;


end;

function TfrmManterCartaoCredito.qtdUso(pCartao: TCartaoCreditoModel): Integer;
  var
qryTP, qryTR : TFDQuery;
cmd : string;
qtd :Integer;

begin
  dmConexao.conectarBanco;
  qtd := 0;

  try

    cmd := ' SELECT  FIRST 1 TP.ID_CARTAO_CREDITO  FROM CEDENTE TP WHERE (TP.ID_ORGANIZACAO = :PIDORGANIZACAO) AND (TP.ID_CARTAO_CREDITO = :PID) ';

    qryTP := TFDQuery.Create(Self);
    qryTP.Close;
    qryTP.Connection := dmConexao.conn;
    qryTP.SQL.Clear;
    qryTP.SQL.Add(cmd);
    qryTP.ParamByName('PIDORGANIZACAO').AsString := pCartao.FID;
    qryTP.ParamByName('PID').AsString := pCartao.FIDorganizacao;
    qryTP.Open;

    qtd := qtd + qryTP.RecordCount;


  except
    raise Exception.Create('Erro ao buscar uso dos cartões ');

  end;

  Result := qtd;

end;

procedure TfrmManterCartaoCredito.limpaStatusBar;
begin
dxStatusBar.Panels[0].Text := 'Status ';
dxStatusBar.Panels[1].Text := 'Ativo. Teclas de atalho:  [F2] = Editar  - [F4] = Novo - [F10] = Salvar  ';
end;

function TfrmManterCartaoCredito.obterCartao(pCartao: TCartaoCreditoModel): TCartaoCreditoModel;
 var
  qryPesquisa :TFDQuery;
  sqlEnd :string;
  pesqCartao :TCartaoCreditoModel;

begin
dmConexao.conectarBanco ;
  pesqCartao := TCartaoCreditoModel.Create;

  sqlEnd := ' SELECT * FROM CARTAO_CREDITO C ' +
                  ' WHERE (C.ID_ORGANIZACAO = :pIdOrganizacao) ' + ' AND ' +
                  '(C.ID_CARTAO_CREDITO = :PID)';
  try
    qryPesquisa := TFDQuery.Create(Self);
    qryPesquisa.Close;
    qryPesquisa.Connection := dmConexao.Conn;
    qryPesquisa.SQL.Clear;
    qryPesquisa.SQL.Add(sqlEnd);
    qryPesquisa.ParamByName('pIdOrganizacao').AsString :=   pCartao.FIDorganizacao;
    qryPesquisa.ParamByName('PID').AsString := pCartao.FID;
    qryPesquisa.Open;


    if  not qryPesquisa.IsEmpty then begin

     pesqCartao.FID                 := qryPesquisa.FieldByName('ID_CARTAO_CREDITO').AsString;
     pesqCartao.FIDorganizacao      := qryPesquisa.FieldByName('ID_ORGANIZACAO').AsString;

     pesqCartao.FDataValidade       := qryPesquisa.FieldByName('DATA_VALIDADE').AsDateTime;
     pesqCartao.FLimite             := qryPesquisa.FieldByName('LIMITE').AsCurrency;
     pesqCartao.FDiaCompra          := qryPesquisa.FieldByName('DIA_COMPRA').AsString;
     pesqCartao.FBandeira           := qryPesquisa.FieldByName('BANDEIRA').AsString;
     pesqCartao.FCartao             := qryPesquisa.FieldByName('CARTAO').AsString;
     pesqCartao.FNumero             := qryPesquisa.FieldByName('NUMERO').AsString;
     pesqCartao.FDiaVencimento      := qryPesquisa.FieldByName('DIA_VENCIMENTO').AsString;
     pesqCartao.FTitular            := qryPesquisa.FieldByName('TITULAR').AsString;
     pesqCartao.FCodigoSeguranca    := qryPesquisa.FieldByName('CODIGO_SEGURANCA').AsString;

    end;

  except
  raise Exception.Create('Erro ao consultar dados do cartão ');

  end;


 Result := pesqCartao;

end;


function  TfrmManterCartaoCredito.salvar(pCartao: TCartaoCreditoModel): Boolean;
var
cmdSalvar :string;
qrySalvar :TFDQuery;
begin

 dmConexao.conectarBanco;
 try

   cmdSalvar := ' UPDATE CARTAO_CREDITO  SET CARTAO = :PCARTAO ,  NUMERO = :PNUMERO, '+
                ' LIMITE = :PLIMITE , DIA_VENCIMENTO = :PDIAVCTO, ' +
                ' DATA_VALIDADE = :PDTVALIDADE,TITULAR = :PTITULAR,  ' +
                ' CODIGO_SEGURANCA = :PCODIGO, BANDEIRA = :PBANDEIRA,' +
                ' DIA_COMPRA = :PDIACOMPRA  '+
                ' WHERE (ID_ORGANIZACAO = :PIDORGANIZACAO) AND (ID_CARTAO_CREDITO = :PID) ';


   if UUTIL.Empty(pCartao.FID) then begin

     pCartao.FID := dmConexao.obterNewID;

   cmdSalvar := ' INSERT INTO CARTAO_CREDITO (ID_CARTAO_CREDITO, ID_ORGANIZACAO, ' +
                ' CARTAO, NUMERO, LIMITE, DIA_VENCIMENTO, DATA_VALIDADE, ' +
                ' TITULAR, CODIGO_SEGURANCA, BANDEIRA, DIA_COMPRA ) ' +
                ' VALUES (:PID, :PIDORGANIZACAO, :PCARTAO, :PNUMERO, '+
                ' :PLIMITE, :PDIAVCTO, :PDTVALIDADE, '+
                ' :PTITULAR,:PCODIGO, :PBANDEIRA,:PDIACOMPRA )' ;

   end;

    if not uUtil.Empty(pCartao.FID) then
    begin

      qrySalvar := TFDQuery.Create(Self);
      qrySalvar.Close;
      qrySalvar.Connection := dmConexao.conn;
      qrySalvar.SQL.Clear;
      qrySalvar.SQL.Add(cmdSalvar);

      qrySalvar.ParamByName('PID').AsString := pCartao.FID;
      qrySalvar.ParamByName('PIDORGANIZACAO').AsString := pCartao.FIDorganizacao;
      qrySalvar.ParamByName('PCARTAO').AsString := UpperCase(pCartao.FCartao);
      qrySalvar.ParamByName('PNUMERO').AsString := pCartao.FNumero;
      qrySalvar.ParamByName('PLIMITE').AsCurrency := pCartao.FLimite;
      qrySalvar.ParamByName('PDIAVCTO').AsString := pCartao.FDiaVencimento;
      qrySalvar.ParamByName('PDTVALIDADE').AsDateTime := pCartao.FDataValidade;
      qrySalvar.ParamByName('PTITULAR').AsString := UpperCase(pCartao.FTitular);
      qrySalvar.ParamByName('PCODIGO').AsString := pCartao.FCodigoSeguranca;
      qrySalvar.ParamByName('PBANDEIRA').AsString := UpperCase(pCartao.FBandeira);
      qrySalvar.ParamByName('PDIACOMPRA').AsString := UpperCase(pCartao.FDiaCompra);

      qrySalvar.ExecSQL;

      dmConexao.conn.CommitRetaining;
    end;

 except
 Result :=False;
  raise Exception.Create('Erro ao tentar salvar o cartão.');
 end;

  Result :=True;
end;

end.
