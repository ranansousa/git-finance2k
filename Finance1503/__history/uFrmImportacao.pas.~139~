unit uFrmImportacao;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Buttons, Vcl.ExtCtrls,
  Vcl.ComCtrls, FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  FireDAC.Stan.Async, FireDAC.DApt, Data.DB, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client, udmConexao, uFrmPendentes, uUtil, uDMImport,
  uDMContasReceber,uDMContaBancariaCreditoConsulta, uFrameProgressBar, EMsgDlg;

type
  TfrmImportar = class(TForm)
    lblStatusExport: TLabel;
    edtFileExport: TLabeledEdit;
    Memo1: TMemo;
    Label12: TLabel;
    lblBaseDados: TLabel;
    btnLocateExport: TBitBtn;
    btnCheckExport: TBitBtn;
    btnExportar: TBitBtn;
    btnPendentes: TBitBtn;
    dlgOrigem: TOpenDialog;
    statusBarImporta: TStatusBar;
    lblPrincipal: TLabel;
    btnDeletAll: TBitBtn;
    framePB1: TframePB;
    btnFechar: TBitBtn;
    PempecMsg: TEvMsgDlg;
    procedure btnLocateExportClick(Sender: TObject);
    procedure btnCheckExportClick(Sender: TObject);
    procedure btnExportarClick(Sender: TObject);
    procedure btnPendentesClick(Sender: TObject);

    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure btnDeletAllClick(Sender: TObject);
    procedure btnFecharClick(Sender: TObject);

  private
    { Private declarations }
    arq: TextFile; { declarando a variável "arq" do tipo arquivo texto }
     qtdRegistros : Integer;
    procedure inicializarDM(Sender: TObject);
    procedure freeAndNilDM(Sender: TObject);

  public
    { Public declarations }
  end;

var
  frmImportar: TfrmImportar;

implementation

{$R *.dfm}

procedure TfrmImportar.btnCheckExportClick(Sender: TObject);
var
  aux, linha: string;
  indx: integer;

begin
 qtdRegistros :=0;
 framePB1.Visible := True;
  Memo1.Clear;
  lblStatusExport.Visible := True;
  lblStatusExport.Caption := 'Analisando o arquivo selecionado. Aguarde...';

  if edtFileExport.Text = '' then
  begin
    ShowMessage('Sem arquivo para analisar');
  end;

  // [ 1 ] Associa a variável do programa "arq" ao arquivo externo "tabuada.txt"
  // na unidade de disco "d"
  AssignFile(arq, edtFileExport.Text);

{$I-}         // desativa a diretiva de Input
  Reset(arq); // [ 3 ] Abre o arquivo texto para leitura
{$I+}         // ativa a diretiva de Input

  if (IOResult <> 0) // verifica o resultado da operação de abertura
  then
    Memo1.Lines.Add('Erro na abertura do arquivo !!!')
  else
  begin
    // [ 11 ] verifica se o ponteiro de arquivo atingiu a marca de final de arquivo
    indx := 0;
    framePB1.Visible :=True;
    lblStatusExport.Caption := 'Arquivo sendo processado';
    statusBarImporta.Panels[1].Text :=
      'Cuidado. Operação irreversível. Faça backup antes.';
   Memo1.Lines.Add('Contando as linhas existentes');
      Sleep(2000);
    while (not eof(arq)) do
    begin
      readln(arq, linha);
                      if not(linha = 'Committ Work;') then
                      begin
                        if not(linha = '') then
                        begin
                            indx := indx + 1;
                        end;
                      end;
    end;
    qtdRegistros := indx;
    Memo1.Lines.Add('Total de linhas ' + IntToStr(qtdRegistros) );
     Sleep(2000);
   //fim da contagem

   Memo1.Lines.Add('Processo de análise iniciado...');

   while (not eof(arq)) do
    begin
      readln(arq, linha);
      indx := 0;
      Memo1.Lines.Add(linha);
      if not(linha = '') then
      begin
        indx := indx + 1;
        if (linha.Length > 0) then
        begin
          aux := linha;
        end;
      end;

      framePB1.progressBar(1, qtdRegistros);
      Application.ProcessMessages;
    end;
    framePB1.lblProgressBar.Visible :=True;
    framePB1.lblProgressBar.Caption := 'Processo concluído...';
    CloseFile(arq); // [ 8 ] Fecha o arquivo texto aberto
  end;
  lblStatusExport.Caption := 'Arquivo analisado com sucesso.';
  Memo1.Clear;
  Memo1.Lines.Add('Foram encontradas  ' + indx.ToString +
    '  linhas possíveis de exportação.');

  btnExportar.Enabled := True;

end;

procedure TfrmImportar.btnDeletAllClick(Sender: TObject);
begin
    if MessageDlg('Deseja mesmo DELETAR todos os pendentes?', mtConfirmation,
              [mbYes, mbNo], 0) = mrYes then
begin

  if (dmContasReceber.deletePendentesAll(TOrgAtual.getId)) then
  begin
    ShowMessage('Titulos pendentes deletados com sucesso.');
  end
  else
  begin
    ShowMessage('Não foi possível deletes os Titulos.');
  end;
end;

end;

procedure TfrmImportar.btnExportarClick(Sender: TObject);
var
  QueryTPS: TFDQuery;
  cmdSql, linha, comando: String;
  indx: integer;

begin

    framePB1.lblProgressBar.Visible :=False;
    btnCheckExport.Enabled := false;
    Memo1.Clear;
    AssignFile(arq, edtFileExport.Text);


    if edtFileExport.Text = '' then
    begin
      PempecMsg.MsgInformation('Sem arquivo para exportar');
    end;



{$I-}         // desativa a diretiva de Input
  Reset(arq); // [ 3 ] Abre o arquivo texto para leitura
{$I+}         // ativa a diretiva de Input

  if (IOResult <> 0) // verifica o resultado da operação de abertura
  then
    Memo1.Lines.Add('Erro na abertura do arquivo !!!')
  else
  begin
    indx := 0;      { pegar a qtd de registro do arquivo   }

    lblStatusExport.Caption := 'Arquivo sendo preparado para exportação';
    while (not eof(arq)) do
    begin
     //  qtdRegistros := qtdRegistrosFile( arq);
      lblStatusExport.Caption := 'Importação iniciada...';
      readln(arq, linha); // [ 6 ] Lê uma linha do arquivo
      Memo1.Lines.Add('Importando...');
      try
        if not(linha = 'Committ Work;') then
        begin
          if not(linha = '') then
          begin
            cmdSql := linha;

            if (dmImport.insereTRPorImportacao(cmdSql) = 0) then
                begin

                  framePB1.progressBar(1, qtdRegistros);
                  indx := indx + 1;
                  Memo1.Clear;
                  Memo1.Lines.Add('Processando a solicitação atual de número  ' + indx.ToString() + ' de ' + IntToStr(qtdRegistros));
                  Label12.Caption := 'Foram exportados  ' + indx.ToString() + ' registros.';
                  Application.ProcessMessages;
            end;
          end;
        end;

      except
        on e: Exception do
          ShowMessage(e.Message + sLineBreak +
            'Problemas com Importação. Erro: 1015');
      end;


    end;

    CloseFile(arq); // [ 8 ] Fecha o arquivo texto aberto
  end;


   framePB1.lblProgressBar.Visible :=True;
   framePB1.lblProgressBar.Caption := 'Processo concluído...';

  lblStatusExport.Caption := 'Arquivo analisado com sucesso.';
  // 'Foram encontrados  ' + indx.ToString + '  registros .'   ;
  Memo1.Clear;
  Memo1.Lines.Add('Foram encontradas  ' + indx.ToString +
    '  linhas possíveis de exportação.');
  btnExportar.Enabled := false;
  Memo1.Clear;

  Memo1.Lines.Add('Verificando os rateios  ' );






end;

//rateios


function TfrmImportar.obterRateioHistorico: Integer;
 var
 cmdSql :string;
begin
 dmConexao.conectarBanco;



          cmdSql := ' SELECT TPH.id_titulo_receber_historico, TPH.valor, TPH.id_titulo_receber ' +
                    ' FROM titulo_receber_historico TPH ' +
                    ' WHERE (TPH.ID_ORGANIZACAO = :PIDORGANIZACAO) ' +
   

  try

    qryObterRateioHistorico.Close;
    qryObterRateioHistorico.Connection := dmConexao.Conn;
    qryObterRateioHistorico.SQL.Clear;
    qryObterRateioHistorico.SQL.Add(cmdSql);
    qryObterRateioHistorico.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
    qryObterRateioHistorico.ParamByName('PIDTP').AsString := pIdTP;
    qryObterRateioHistorico.Open;

  except
   raise Exception.Create('Erro ao obter o rateio de histórico..');


  end;

    Result := qryObterRateioHistorico.RecordCount;

end;



function TfrmImportar.insereCentroRateioCentroCusto(pIdOrganizacao, pIdTitulo, pIdCentroCusto,  pTable: string ; pValor :Currency): Boolean;
var
 sqlCmdInsere,pId  :string;

 qry : TFDQuery;

begin

  dmConexao.conectarBanco;
   qry := TFDQuery.Create(Self);



  try

    pId := dmConexao.obterNewID;

    sqlCmdInsere := ' INSERT INTO TITULO_PAGAR_RATEIO_CC (ID_TITULO_PAGAR_RATEIO_CC, ID_ORGANIZACAO, ID_CENTRO_CUSTO, ID_TITULO_PAGAR, VALOR) '+
                     ' VALUES (:PID, :PIDORGANIZACAO, :PIDCC, :PIDTIULO, :PVALOR ) ' ;


   if pTable.Equals('TITULO_RECEBER') then begin

    sqlCmdInsere := ' INSERT INTO TITULO_RECEBER_RATEIO_CC (ID_TITULO_RECEBER_RATEIO_CC, ID_ORGANIZACAO, ID_CENTRO_CUSTO, ID_TITULO_RECEBER, VALOR) '+
                    ' VALUES (:PID, :PIDORGANIZACAO, :PIDCC, :PIDTIULO, :PVALOR ) ' ;

   end;

     qry.Close;
     qry.Connection := dmConexao.conn;
     qry.SQL.Clear;
     qry.SQL.Add(sqlCmdInsere);
     qry.ParamByName('PID').AsString := pId;
     qry.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
     qry.ParamByName('PIDCC').AsString := pIdCentroCusto;
     qry.ParamByName('PIDTIULO').AsString := pIdTitulo;
     qry.ParamByName('PVALOR').AsCurrency    := pValor;

     qry.ExecSQL;
     qry.Connection.CommitRetaining;

  except
          qry.Connection.RollbackRetaining;
  raise Exception.Create('Erro ao tentar inserir Centro de Custos ' + pIdTitulo );

  end;

  Result := System.True;
end;


function TfrmImportar.insereHistorico(pIdOrganizacao, pIdTP, pIdHistorico,  pTable: string ; pValor :Currency): Boolean;
var
 sqlCmdInsere,   pIdTituloHistorico :string;
qry : TFDQuery;

begin

  dmConexao.conectarBanco;
   qry := TFDQuery.Create(Self);


  try

    pIdTituloHistorico := dmConexao.obterNewID;

    sqlCmdInsere := ' INSERT INTO TITULO_PAGAR_HISTORICO (ID_TITULO_PAGAR_HISTORICO, ID_ORGANIZACAO, ID_HISTORICO, ID_TITULO_PAGAR, VALOR )' + ' VALUES (:PID, :PIDORGANIZACAO, :PIDHISTORICO, :PIDTP, :PVALOR ) ';

    if pTable.Equals('TITULO_RECEBER') then
    begin

      sqlCmdInsere := ' INSERT INTO TITULO_RECEBER_HISTORICO (ID_TITULO_RECEBER_HISTORICO, ID_ORGANIZACAO, ID_HISTORICO, ID_TITULO_RECEBER, VALOR )' + ' VALUES (:PID, :PIDORGANIZACAO, :PIDHISTORICO, :PIDTP, :PVALOR ) ';

    end;



     qry.Close;
     qry.Connection := dmConexao.conn;
     qry.SQL.Clear;
     qry.SQL.Add(sqlCmdInsere);
     qry.ParamByName('PID').AsString := pIdTituloHistorico;
     qry.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
     qry.ParamByName('PIDHISTORICO').AsString := pIdHistorico;
     qry.ParamByName('PIDTP').AsString := pIdTP;
     qry.ParamByName('PVALOR').AsCurrency    := pValor;

     qry.ExecSQL;
     qry.Connection.CommitRetaining;


  except
          qry.Connection.RollbackRetaining;
  raise Exception.Create('Erro ao tentar inserir histórico ' + pIdTP );

  end;

  Result := System.True;
end;





//fim da parte de rateios

procedure TfrmImportar.btnFecharClick(Sender: TObject);
begin
    PostMessage(Self.Handle, WM_CLOSE, 0, 0);
end;

procedure TfrmImportar.btnLocateExportClick(Sender: TObject);
begin
  if dlgOrigem.Execute then
  begin
    edtFileExport.Text := dlgOrigem.FileName;
    btnCheckExport.Enabled := True;

  end;
end;

procedure TfrmImportar.btnPendentesClick(Sender: TObject);

begin

  try
    if (dmContasReceber.obterTRPendentesImportados(TOrgAtual.getId)) then
    begin


      if not dmContasReceber.dataSourceIsEmpty
        (dmContasReceber.dtsPendentesImportados) then

        btnDeletAll.Enabled := True; // libera possibilidade de deletar todos


      begin

        frmPendentes := TfrmPendentes.Create(Self);
        frmPendentes.ShowModal;
        FreeAndNil(frmPendentes);
      end;

    end
    else
    begin
      ShowMessage('Não existem titulos pendentes a serem listados.');
    end;

  except
    on e: Exception do
      ShowMessage(e.Message + sLineBreak +
        'Contate o administrador! Erro: 1020');
  end;

  { if frmPendentes = nil then
    frmPendentes.ShowModal;
    freeAndNilDM(Self); }

end;

procedure TfrmImportar.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  freeAndNilDM(Self);
  Action := caFree; // sempre como ultimo comando
end;

procedure TfrmImportar.FormCreate(Sender: TObject);
begin

  inicializarDM(Self);
  LimpaTela(Self);
  btnExportar.Enabled := false;
  btnDeletAll.Enabled := false;
  btnCheckExport.Enabled := false;
  lblPrincipal.Caption := 'IMPORTAÇÃO TITULOS A RECEBER ';

  framePB1.Visible := False;
  framePB1.lblProgressBar.Visible :=False;
  qtdRegistros := 0;
  framePB1.progressBar(1, 100);

end;

procedure TfrmImportar.inicializarDM(Sender: TObject);
begin

  if not(Assigned(dmConexao)) then
  begin
    dmConexao := TdmConexao.Create(Self);
  end;

  dmConexao.conectarBanco;

  if not(Assigned(dmImport)) then
  begin
    dmImport := TdmImport.Create(Self);
  end;

  if not(Assigned(dmContasReceber)) then
  begin
    dmContasReceber := TdmContasReceber.Create(Self);
  end;

  if not(Assigned(dmCBCConsulta)) then
  begin
    dmCBCConsulta := TdmCBCConsulta.Create(Self);
  end;



end;

procedure TfrmImportar.freeAndNilDM(Sender: TObject);
begin

  if (Assigned(dmImport)) then
  begin
    FreeAndNil(dmImport);
  end;

  if (Assigned(dmConexao)) then
  begin
    FreeAndNil(dmConexao);
  end;

  if (Assigned(dmContasReceber)) then
  begin
    FreeAndNil(dmContasReceber);
  end;

  if (Assigned(dmCBCConsulta)) then
  begin
    FreeAndNil(dmCBCConsulta);
  end;

end;




end.
