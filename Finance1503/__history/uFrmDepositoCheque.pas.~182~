unit uFrmDepositoCheque;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs,uFrameContaBancaria,uContaContabilModel,udmConexao,uUtil,
  Vcl.Grids, Vcl.StdCtrls, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, uTRBaixaChequeModel,  uTRBaixaChequeDAO,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, Vcl.ComCtrls, Vcl.Buttons, ELab3D,
  uFrameGeneric, uFrameResponsavel, cxGraphics, cxControls, cxLookAndFeels,
  cxLookAndFeelPainters, dxSkinsCore, dxSkinsDefaultPainters, cxClasses, dxBar, uLoteDepositoModel,uLoteDepositoDAO,
  dxStatusBar, dxRibbonSkins, dxRibbonCustomizationForm, dxRibbon, EMsgDlg, uContaBancariaCRModel, uContaBancariaCreditoDAO,
  Vcl.ExtCtrls ;

type
  TfrmDepositoCheque = class(TForm)
    frmContaBancaria1: TfrmContaBancaria;
    gridMain: TStringGrid;
    qryObterCheques: TFDQuery;
    lbl1: TLabel;
    edtContaContabil: TEdit;
    lbl8: TLabel;
    dtpDeposito: TDateTimePicker;
    lbl2: TLabel;
    edtDescricaoCC: TEdit;
    edtTOB: TEdit;
    lbl3: TLabel;
    edtCTACCDB: TEdit;
    lbl4: TLabel;
    qryObterTOB: TFDQuery;
    qryObterContaBancaria: TFDQuery;
    frameResponsavel1: TframeResponsavel;
    dxStatusTRF: TdxStatusBar;
    dxBarManager1: TdxBarManager;
    dxRibbon1Tab1: TdxRibbonTab;
    dxRibbon1: TdxRibbon;
    dxBarManager1Bar1: TdxBar;
    dxBarManager1Bar2: TdxBar;
    dxBtnConfirmar: TdxBarLargeButton;
    dxBarLargeButton2: TdxBarLargeButton;
    Panel1: TPanel;
    PempecMsg: TEvMsgDlg;
    procedure FormCreate(Sender: TObject);
    procedure gridMainDrawCell(Sender: TObject; ACol, ARow: Integer;
      Rect: TRect; State: TGridDrawState);
    procedure gridMainSelectCell(Sender: TObject; ACol, ARow: Integer;
      var CanSelect: Boolean);
    procedure frmContaBancaria1cbbContaChange(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure btnFecharClick(Sender: TObject);
    procedure btnDepositarClick(Sender: TObject);
    procedure frameResponsavel1cbbcomboChange(Sender: TObject);
    procedure dxBarLargeButton2Click(Sender: TObject);
    procedure dxBtnConfirmarClick(Sender: TObject);
  private
    { Private declarations }
 pIdResponsavel, iDContaBancaria, idHistorico,idTOB,  pIdUsuario,   pIdOrganizacao :string;
    FsListaCheques, FslistaIdResponsavel, FsListaIdContas : TStringList;
    indice :Integer;



    procedure inicializarDM(Sender: TObject);
    procedure freeAndNilDM();
    procedure AlinhaCheck;
    procedure limparPanel;
    procedure AdicionarLinhasComCheckBoxes(qryCheques: TFDQuery);
    procedure Limpabuffer;
    procedure preencheGrid;
    function obterTipoOperacaoBancaria(pIdOrganizacao,
      pIdTOB: string): TFDQuery;
    function transfereChequeCaixaBanco(pIdorganizacao, pIdConta,
      pIdResponsavel: string; pDataMovimento: TDate; pValor: Currency; pQtdCheques :Integer): Boolean;

  public
    { Public declarations }
    function obterChequesDepositar(pIdOrganizacao :string):TFDQuery;

  end;

var
  frmDepositoCheque: TfrmDepositoCheque;

implementation

{$R *.dfm}

procedure TfrmDepositoCheque.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
freeAndNilDM();
 Action := caFree;
end;

procedure TfrmDepositoCheque.FormCreate(Sender: TObject);
begin
 dxBtnConfirmar.Enabled := False;

 pIdOrganizacao := uUtil.TOrgAtual.getId;
 pIdUsuario := uUtil.TUserAtual.getUserId;

 inicializarDM(Self);


end;

procedure TfrmDepositoCheque.frameResponsavel1cbbcomboChange(Sender: TObject);
begin
   if frameResponsavel1.cbbcombo.ItemIndex >0 then begin
     pIdResponsavel := FslistaIdResponsavel[frameResponsavel1.cbbcombo.ItemIndex];
 end;

end;

procedure TfrmDepositoCheque.freeAndNilDM;
begin
  //nada
end;

procedure TfrmDepositoCheque.frmContaBancaria1cbbContaChange(Sender: TObject);
var
contaContabil : TContaContabilModel;

begin
   indice :=0;
   contaContabil := TContaContabilModel.Create;
   indice :=frmContaBancaria1.cbbConta.ItemIndex;
   iDContaBancaria := FsListaIdContas[indice];

  if indice > 0 then begin
      //pegar a conta contabil
     contaContabil := frmContaBancaria1.getContaContabil(pIdOrganizacao, iDContaBancaria);
     if not (uutil.Empty(contaContabil.FConta)) then begin
        edtContaContabil.Text := contaContabil.FConta;
        edtDescricaoCC.Text   := contaContabil.FDescricao;
     end;

  end;

end;

procedure TfrmDepositoCheque.gridMainDrawCell(Sender: TObject; ACol,
  ARow: Integer; Rect: TRect; State: TGridDrawState);
var
strTemp: string;
w: integer;
liForLinha : integer;
  s : string;
  LDelta : integer;

begin

  if not (gdFixed in State) then begin
     AlinhaCheck;
  end;

  if ((gdSelected in State) or (ARow = 0)) then begin  //destacar celula/linha
    {Caso a propriedade goRowSelect seja true, as configurações abaixo irão ocorrer em todas as
    celulas da linha selecionada, caso seja false, será aplicada somente na celula selecionada }
    gridMain.Canvas.Font.Style := gridMain.Canvas.Font.Style + [fsBold]; //Aplicando negrito
    gridMain.Canvas.Font.Color := clNavy; //Fonte azul
    gridMain.Canvas.Brush.Color := $00FFEFDF; //Fundo azulado (cor de linha selecionada)


  end;

  {Aplicar estilo zebrado}
  if (ARow > 0) then begin// testa se não é a primeira linha (fixa)
    if not (odd(ARow)) then begin // verifica se é par
      gridMain.Canvas.Font.Color  := clNavy;  //Fonte azul
      gridMain.Canvas.Brush.Color := $00EFEFEF; //Fundo cinza claro
    end;
  end;

   if (ACol > 1) then begin
    //novo. inclui em 230420 para aumentar o tamanho da celula

      gridMain.ColWidths[ACol] := 120;

   end;

  if (ACol = 2) and (ARow > 0) then
  begin
    s := gridMain.Cells[ACol, ARow];
    LDelta := (gridMain.ColWidths[ACol]) - gridMain.Canvas.TextWidth(s);
    gridMain.Canvas.TextRect(Rect, Rect.Left + LDelta, Rect.Top + 2, s);
  end
  else
  begin
    gridMain.Canvas.TextRect(Rect, Rect.Left + 2, Rect.Top + 2, gridMain.Cells[ACol, ARow]);
  end;

end;


procedure TfrmDepositoCheque.gridMainSelectCell(Sender: TObject; ACol,
  ARow: Integer; var CanSelect: Boolean);
begin

  if ACol = 0 then begin
    gridMain.Options := gridMain.Options + [goEditing] - [goRangeSelect];
  end else begin
    gridMain.Options := gridMain.Options - [goEditing] + [goRangeSelect];
  end;

end;

Procedure TfrmDepositoCheque.AlinhaCheck;
var
  loCheckBoxTemp: TCheckBox;
  loRect: TRect;
  liForLinha: Integer;
begin
  for liForLinha := 1 to gridMain.RowCount do begin
    loCheckBoxTemp := (gridMain.Objects[0,liForLinha] as TCheckBox);
    if (loCheckBoxTemp <> nil) then begin
      loRect := gridMain.CellRect(0,liForLinha); // Pegando a celula para alinharmos o check

      loCheckBoxTemp.Left    := gridMain.Left + loRect.Left+2;
      loCheckBoxTemp.Top     := gridMain.Top  + loRect.Top+2;
      loCheckBoxTemp.Width   := 30;// (loRect.Right     - loRect.Left);
      loCheckBoxTemp.Height  := loRect.Bottom    - loRect.Top;
      loCheckBoxTemp.Visible := True;
    end;
  end;
end;

procedure TfrmDepositoCheque.btnDepositarClick(Sender: TObject);
var qtdChque, liForLinha :Integer;
 strValorCheque, contaBancaria, idTRBC :string;
valorCheque, totalDeposito :Currency;
sucess :Boolean;

begin
 //versao antiga 10/12/2019
 {
  totalDeposito := 0;
  qtdChque := 0;
  valorCheque := 0;
  FsListaCheques := TStringList.Create;
  FsListaCheques.Clear;

  //prenche a lista de cheques e pega alguns paramentros

   for liForLinha := 1 to (gridMain.RowCount - 1) do begin

    if (gridMain.Objects[0,liForLinha] as TCheckBox).Checked then begin

       idTRBC :=gridMain.Cells[7,liForLinha];
       gridMain.Cells[2,liForLinha];
//
         strValorCheque := StringReplace(gridMain.Cells[2,liForLinha], '.','', [rfReplaceAll]) ;
        // strValorCheque := StringReplace(strValorCheque, ',', '.', [rfReplaceAll]);
         valorCheque :=  StrToCurr(strValorCheque ) ;


       FsListaCheques.Add(idTRBC);
       totalDeposito := totalDeposito + valorCheque;
       Inc(qtdChque);

     end;

  end;


  try
    dmConexao.conectarBanco;
    if qtdChque > 0 then begin

    sucess := transfereChequeCaixaBanco(pIdOrganizacao, iDContaBancaria, pIdResponsavel, dtpDeposito.Date, totalDeposito, qtdChque);

    end else begin ShowMessage('Lista de cheques vazia.'); end;

    if (sucess) then
    begin

      limparPanel;
      ShowMessage('Depósito realizado  com sucesso.');
    end;

  except
    on e: Exception do
      ShowMessage(e.Message + sLineBreak);

  end;

  }
end;

procedure TfrmDepositoCheque.btnFecharClick(Sender: TObject);
begin
    limparPanel;
    PostMessage(Self.Handle, WM_CLOSE, 0, 0);
end;

procedure TfrmDepositoCheque.dxBtnConfirmarClick(Sender: TObject);
var qtdChque, liForLinha :Integer;
 strValorCheque, contaBancaria, idTRBC :string;
valorCheque, totalDeposito :Currency;
sucess :Boolean;

begin
  totalDeposito := 0;
  qtdChque := 0;
  valorCheque := 0;
  FsListaCheques := TStringList.Create;
  FsListaCheques.Clear;

  //prenche a lista de cheques e pega alguns paramentros

   for liForLinha := 1 to (gridMain.RowCount - 1) do begin

    if (gridMain.Objects[0,liForLinha] as TCheckBox).Checked then begin

       idTRBC :=gridMain.Cells[7,liForLinha];
       gridMain.Cells[2,liForLinha];
//
         strValorCheque := StringReplace(gridMain.Cells[2,liForLinha], '.','', [rfReplaceAll]) ;
        // strValorCheque := StringReplace(strValorCheque, ',', '.', [rfReplaceAll]);
         valorCheque :=  StrToCurr(strValorCheque ) ;


       FsListaCheques.Add(idTRBC);
       totalDeposito := totalDeposito + valorCheque;
       Inc(qtdChque);

     end;

  end;


  try
    dmConexao.conectarBanco;
    if qtdChque > 0 then begin

    sucess := transfereChequeCaixaBanco(pIdOrganizacao, iDContaBancaria, pIdResponsavel, dtpDeposito.Date, totalDeposito, qtdChque);

    end else begin PempecMsg.MsgInformation('Lista de cheques vazia.'); end;

    if (sucess) then
    begin

      limparPanel;
      PempecMsg.MsgInformation('Depósito realizado  com sucesso.');
    end;

  except
    on e: Exception do
      PempecMsg.MsgInformation(e.Message + sLineBreak);

  end;


end;

procedure TfrmDepositoCheque.dxBarLargeButton2Click(Sender: TObject);
begin
    limparPanel;
    PostMessage(Self.Handle, WM_CLOSE, 0, 0);
end;

procedure TfrmDepositoCheque.inicializarDM(Sender: TObject);
begin
 dmConexao.conectarBanco;
 limparPanel;
end;


procedure TfrmDepositoCheque.limparPanel;

begin
 FsListaIdContas := TStringList.Create;
 iDContaBancaria :='';

  frmContaBancaria1.obterTodos(pIdOrganizacao, frmContaBancaria1.cbbConta, FsListaIdContas);
  frmContaBancaria1.cbbConta.ItemIndex := 0;
 // btnDepositar.Enabled := False;

  edtContaContabil.Clear;
  edtDescricaoCC.Clear;

  idHistorico := 'DEPOSITO TESOURARIA/BANCO';
  idTOB       := 'DEPOSITO TESOURARIA/BANCO';
  edtTOB.Text := idTOB;

  obterTipoOperacaoBancaria(pIdOrganizacao,idTOB);
  edtCTACCDB.Text := qryObterTOB.FieldByName('CONTA').AsString;
  dtpDeposito.DateTime := Now;

 frameResponsavel1.obterTodosAtivos(pIdOrganizacao,frameResponsavel1.cbbcombo,FslistaIdResponsavel);


 obterChequesDepositar(pIdOrganizacao);
 preencheGrid;


end;


function TfrmDepositoCheque.obterChequesDepositar(
  pIdOrganizacao: string): TFDQuery;
begin
 dmConexao.conectarBanco;

     try
      qryObterCheques.Close;
      qryObterCheques.Connection := dmConexao.conn;
      qryObterCheques.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
      qryObterCheques.Open;
     except

      raise Exception.Create('Erro ao obter cheques para depositar.');

     end;

    Result := qryObterCheques;
end;

procedure TfrmDepositoCheque.preencheGrid();
begin

  gridMain.Cells[0,0] := 'MARCAR';
  gridMain.Cells[1,0] := 'CHEQUE';
  gridMain.Cells[2,0] := 'VALOR';
  gridMain.Cells[3,0] := 'DOCUMENTO';
  gridMain.Cells[4,0] := 'BANCO';
  gridMain.Cells[5,0] := 'TITULAR';
  gridMain.Cells[6,0] := 'DATA PAGTO';
  gridMain.Cells[7,0] := ''; //ID

  if qryObterCheques.RecordCount >0 then begin
    gridMain.Visible :=True;
    dxBtnConfirmar.Enabled :=True;
    AdicionarLinhasComCheckBoxes ( qryObterCheques );
  end else begin
     gridMain.Visible :=False;
     dxBtnConfirmar.Enabled := False;

  end;



end;


procedure TfrmDepositoCheque.AdicionarLinhasComCheckBoxes( qryCheques :TFDQuery  );
var
  liForLinha: Integer;
  loCheckBox: TCheckBox;
begin
  limpaBuffer; {É bom não esquecer de limpar controles não utilizados}
  qryCheques.First;

  if not qryCheques.Eof then begin


      for liForLinha := 1 to qryCheques.RecordCount do begin

        {Criando os checkbox em tempo de execução}
        loCheckBox         := TCheckBox.Create(Application);
        loCheckBox.Width   := 0;
        loCheckBox.Visible := false;
        loCheckBox.Caption := ' ';
        loCheckBox.Color   := clWindow;
        loCheckBox.Tag     := liForLinha;
        //Associar o evento OnClick de todos os checkbox criados a um único evento,
        //que chamei de OnClick, mas poderia ser qualquer nome, contanto que a
        //parte da asinatura dos parametros sejam do mesmo tipo,
        //para o caso de desejar capturar o evento para executar alguma ação
        loCheckBox.OnClick := OnClick;
       // loCheckBox.Parent  := Panel1;
        loCheckBox.Parent  := gridMain.Parent;

        {StringGrid1.Objects[Coluna,Linha]}
        gridMain.Objects[0,liForLinha] := loCheckBox;
        gridMain.Cells  [1,liForLinha] := qryCheques.FieldByName('CHEQUE').AsString;
        gridMain.Cells  [2,liForLinha] := (FormatFloat('###,##0.00', qryCheques.FieldByName('VALOR').AsCurrency));
        gridMain.Cells  [3,liForLinha] := qryCheques.FieldByName('DOCTR').AsString;
        gridMain.Cells  [4,liForLinha] := qryCheques.FieldByName('banco').AsString;
        gridMain.Cells  [5,liForLinha] := qryCheques.FieldByName('TITULAR').AsString;
        gridMain.Cells  [6,liForLinha] := DateToStr(qryCheques.FieldByName('data_pagamento').AsDateTime);
        gridMain.Cells  [7,liForLinha] := qryCheques.FieldByName('ID').AsString;

               //gridMain.RowCount := liForLinha;
        qryCheques.Next;
      end;

       gridMain.RowCount := liForLinha;

  end;

  AlinhaCheck; // Alinhar o check na celula e exibí-lo

end;


Procedure TfrmDepositoCheque.Limpabuffer;
var
  loCheckBoxTemp: TCheckBox;
  liForLinha: Integer;
  lsRow :string;
begin
  for liForLinha := 1 to gridMain.RowCount do begin
    loCheckBoxTemp := (gridMain.Objects[0,liForLinha] as TCheckBox);

    if (loCheckBoxTemp <> nil) then begin // o objeto deve existir para poder ser destruído
      loCheckBoxTemp.Visible   := false;
      gridMain.Objects[0,liForLinha] := nil;
    end;
  end;
end;

function TfrmDepositoCheque.obterTipoOperacaoBancaria(pIdOrganizacao, pIdTOB: string): TFDQuery;
begin
dmConexao.conectarBanco;
 try

    qryObterTOB.Close;
    qryObterTOB.Connection := dmConexao.Conn;
    qryObterTOB.ParamByName('PIDORGANIZACAO').AsString := pIdOrganizacao;
    qryObterTOB.ParamByName('PIDTOB').AsString := pIdTOB;
    qryObterTOB.Open;


 except
 raise Exception.Create('Erro ao obter TOB');

 end;


 Result := qryObterTOB;


end;


function TfrmDepositoCheque.transfereChequeCaixaBanco(pIdorganizacao, pIdConta, pIdResponsavel: string; pDataMovimento: TDate; pValor: Currency; pQtdCheques: Integer): Boolean;
var
  cmdUpCh, identificadorLote, descricaoTD, cmdDB, cmdCR, cmdLote, idTD, idChq, idCBC, idLOTE, idTOB, idCedente, idHistorico: string;
  qryLoteDeposito, qryUpdateTRBC, qryDebitoCaixa, qryCreditoBanco: TFDQuery;
  I: Integer;
  contaBancoCR: TContaBancariaCRModel;
  loteDeposito: TLoteDepositoModel;
  chequeDepositado : TTRBaixaChequeModel;
  sucesso: Boolean;
begin

  sucesso := False;
  dmConexao.conectarBanco;
  idCedente := uutil.TOrgAtual.getId;
  idHistorico := 'DEPOSITO TESOURARIA/BANCO';
  idTOB := 'DEPOSITO TESOURARIA/BANCO';
  //idTD := dmConexao.obterNewID;
  identificadorLote := dmConexao.obterIdentificador('', pIdorganizacao, 'LOTE_DP');
  pIdUsuario := uutil.TUserAtual.getUserId;

  try
    qryObterContaBancaria.Close;
    qryObterContaBancaria.ParamByName('PIDORGANIZACAO').AsString := pIdorganizacao;
    qryObterContaBancaria.ParamByName('PIDCONTA').AsString := pIdConta;
    qryObterContaBancaria.Open;
    descricaoTD := ' DEP CH CTA ' + ' NC';

    if not qryObterContaBancaria.IsEmpty then
    begin
      descricaoTD := 'DEP CH CTA ' + qryObterContaBancaria.FieldByName('CODIGO_BANCO').AsString + ' - ' + qryObterContaBancaria.FieldByName('CONTA').AsString;
    end;

  except
    raise Exception.Create('Erro ao obter dados da conta bancária');

  end;

  if not dmConexao.conn.InTransaction then
    dmConexao.conn.StartTransaction;

  try

    idLOTE := dmConexao.obterNewID;
    idCBC := dmConexao.obterNewID;

    loteDeposito := TLoteDepositoModel.Create;
    loteDeposito.FID := idLOTE;
    loteDeposito.FIDorganizacao := pIdorganizacao;
    loteDeposito.FIDcontaBancaria := pIdConta;
    loteDeposito.FIDusuario := StrToInt(pIdUsuario);
    loteDeposito.FDataRegistro := pDataMovimento;
    loteDeposito.FDataAtualizacao := pDataMovimento;
    loteDeposito.Flote := identificadorLote;
    loteDeposito.FStatus := 'DEPOSITADO';
    loteDeposito.FqtdCheque := pQtdCheques;
    loteDeposito.FtotalDeposito := pValor;
    loteDeposito.Fnovo := True;

    sucesso := TLoteDepositoDAO.Insert(loteDeposito);

    if sucesso  then begin

     contaBancoCR := TContaBancariaCRModel.Create;
     contaBancoCR.FIDorganizacao      := pIdOrganizacao;
     contaBancoCR.FIDloteDeposito     := idLOTE;
     contaBancoCR.FID                 := idCBC;
     contaBancoCR.FIDTOB              := idTOB;
     contaBancoCR.Fidentificacao      := dmConexao.obterIdentificador('',pIdOrganizacao,'CBC');
     contaBancoCR.FIDcontaBancaria    := pIdConta;
     contaBancoCR.FIDResponsavel      := pIdResponsavel;
     contaBancoCR.FIDusuario          := StrToInt(pIdUsuario);
     contaBancoCR.FtipoLancamento     := 'C';
     contaBancoCR.Fdescricao          := descricaoTD + ' LOTE ' + identificadorLote ;
     contaBancoCR.Fvalor              := pValor;
     contaBancoCR.FdataRegistro       := Now;
     contaBancoCR.FdataMovimento      := pDataMovimento;

     sucesso := TContaBancariaCreditoDAO.Insert(contaBancoCR);

      for I := 0 to FsListaCheques.Count - 1 do
      begin

        idChq := FsListaCheques[I];

        chequeDepositado := TTRBaixaChequeModel.Create;
        chequeDepositado.FIDorganizacao := pIdorganizacao;
        chequeDepositado.FID := idChq;
        chequeDepositado := TTRBaixaChequeDAO.obterPorID(chequeDepositado);

        if not uUtil.Empty(chequeDepositado.FID) then
        begin

          chequeDepositado.FIDloteDeposito := idLOTE;
          chequeDepositado.FdataDeposito := pDataMovimento;
          chequeDepositado.Fstatus := 'DEPOSITADO';
          chequeDepositado.FloteDeposito := identificadorLote;

          sucesso := TTRBaixaChequeDAO.Update(chequeDepositado);

        end;


        cmdUpCh := ' UPDATE TITULO_RECEBER_BAIXA_CHEQUE ' +
        '          SET  ID_LOTE_DEPOSITO = :PIDLOTE, ID_TIPO_STATUS = ''DEPOSITADO'', ' +
        '  DATA_DEPOSITO = :PDTMOVIMENTO, LOTE_DEPOSITO = :PLOTE ' + '  WHERE (ID_TITULO_RECEBER_BAIXA_CHEQUE = :PIDCHEQUE )  AND (ID_ORGANIZACAO = :PIDORGANIZACAO ) ';

        qryUpdateTRBC := TFDQuery.Create(Self);
        qryUpdateTRBC.Close;
        qryUpdateTRBC.Connection := dmConexao.conn;
        qryUpdateTRBC.SQL.Clear;
        qryUpdateTRBC.SQL.Add(cmdUpCh);
        qryUpdateTRBC.ParamByName('PIDCHEQUE').AsString := idChq;
        qryUpdateTRBC.ParamByName('PIDLOTE').AsString := idLOTE;
        qryUpdateTRBC.ParamByName('PIDORGANIZACAO').AsString := pIdorganizacao;
        qryUpdateTRBC.ParamByName('PDTMOVIMENTO').AsDate := pDataMovimento;
        qryUpdateTRBC.ParamByName('PLOTE').AsString := identificadorLote;

        qryUpdateTRBC.ExecSQL;

        if qryUpdateTRBC.RowsAffected > 0 then
        begin
          dmConexao.conn.CommitRetaining;
        end;

      end;
    end;

    if sucesso then
    begin
      Result := sucesso = True;

      if dmConexao.conn.InTransaction then
      begin
        dmConexao.conn.CommitRetaining;

      end;

    end;
  except
    Result := False;

    if dmConexao.conn.InTransaction then
    begin
      dmConexao.conn.RollbackRetaining;

    end;

    raise Exception.Create('Erro ao transferir da tesouraria para o banco.');
  end;

  dmConexao.conectarBanco;

end;


end.
