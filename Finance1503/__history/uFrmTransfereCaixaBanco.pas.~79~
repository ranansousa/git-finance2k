unit uFrmTransfereCaixaBanco;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, dxSkinsCore, dxSkinsDefaultPainters,
  cxClasses, dxBar, cxGraphics, cxControls, cxLookAndFeels, udmConexao, uUtil,System.DateUtils,
  cxLookAndFeelPainters, dxRibbonSkins, dxRibbonCustomizationForm, dxRibbon,uContaContabilModel,
  dxBarBuiltInMenu, cxPC, uFrameCheque, uFrameContaBancaria, uFrameGeneric,
  uFrameResponsavel, cxContainer, cxEdit, cxTextEdit, cxLabel, Vcl.ComCtrls, uDMTransfCaixaBanco,
  dxCore, cxDateUtils, dxStatusBar, cxMaskEdit, cxDropDownEdit, cxCalendar,
  Vcl.StdCtrls, ENumEd, FireDAC.Stan.Intf, FireDAC.Stan.Option,uContaBancariaChequeModel, uDMOrganizacao,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, Vcl.ExtCtrls, Vcl.Grids,
  Vcl.DBGrids, uFramePeriodo, Vcl.Buttons, ACBrBase, ACBrExtenso, frxClass,
  frxDBSet, EExtenso, EMsgDlg;

type
  TfrmTransferenciasCaixaBanco = class(TForm)
    dxBarManager1: TdxBarManager;
    dxMainTab1: TdxRibbonTab;
    dxMain: TdxRibbon;
    cxpgcntrlPGTRFBCOCAIXA: TcxPageControl;
    tbTransfereCH: TcxTabSheet;
    tbTransfereEstorna: TcxTabSheet;
    frmContaBancaria1: TfrmContaBancaria;
    cxLabel2: TcxLabel;
    edtTipoOperacao: TcxTextEdit;
    cxLabel9: TcxLabel;
    edtContaContabilDB: TcxTextEdit;
    cbbDataMovimento: TcxDateEdit;
    dxStatusTRF: TdxStatusBar;
    lblResponsavel: TLabel;
    cxLabel5: TcxLabel;
    edtValor: TEvNumEdit;
    cxLabel10: TcxLabel;
    edtContaContabilCR: TcxTextEdit;
    dxBarManager1Bar1: TdxBar;
    dxBarManager1Bar2: TdxBar;
    dxBarManager1Bar4: TdxBar;
    dxBarManager1Bar5: TdxBar;
    dxbrlrgbtn1: TdxBarLargeButton;
    dxbrlrgbtn2: TdxBarLargeButton;
    dxbrlrgbtn3: TdxBarLargeButton;
    dxBtnTrfEstorna: TdxBarLargeButton;
    dxBtnTrfConfirma: TdxBarLargeButton;
    dxBtnTrfEspecie: TdxBarLargeButton;
    cxLabel1: TcxLabel;
    edtIdentificador: TcxTextEdit;
    dbgrd1: TDBGrid;
    frmPeriodo1: TfrmPeriodo;
    btnPesquisa: TBitBtn;
    edtLoteContabil: TcxTextEdit;
    cxLabel3: TcxLabel;
    edtIdentificaCBC: TcxTextEdit;
    edtLoteDeposito: TcxTextEdit;
    cxLabel4: TcxLabel;
    cxLabel6: TcxLabel;
    edtIdentTD: TcxTextEdit;
    cxLabel7: TcxLabel;
    dxStatusBarEstorna: TdxStatusBar;
    btnImprimir: TBitBtn;
    btnFechar: TBitBtn;
    EvExtenso1: TEvExtenso;
    frameResponsavel1: TframeResponsavel;
    ds1: TDataSource;
    PempecMsg: TEvMsgDlg;
    procedure FormCreate(Sender: TObject);

    procedure cbbDataMovimentoPropertiesChange(Sender: TObject);
    procedure dxbrlrgbtn1Click(Sender: TObject);
    procedure dxbrlrgbtn2Click(Sender: TObject);
    procedure frameResponsavel1cbbcomboChange(Sender: TObject);
    procedure dxBtnTrfConfirmaClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure tbTransfereEstornaShow(Sender: TObject);
    procedure dxBtnTrfEstornaClick(Sender: TObject);
    procedure btnFecharClick(Sender: TObject);
    procedure frmContaBancaria1cbbContaChange(Sender: TObject);
    procedure btnPesquisaClick(Sender: TObject);
    procedure ds1DataChange(Sender: TObject; Field: TField);
  private
    { Private declarations }
    FslistaIdResponsavel,    FslistaIdConta  :TStringList;
     idLoteContabil,  pIdResponsavel, pIdentificacao,  iDContaDestino, pIdOperacao,    pIDOrganizacao :string;
    pDataMovimento, pDataRegistro :TDate;
    procedure limpaPanel;
    function validarForm: Boolean;
    procedure limpaStatusBar;


  public
    { Public declarations }
  end;

var
  frmTransferenciasCaixaBanco: TfrmTransferenciasCaixaBanco;

implementation

{$R *.dfm}

{ TForm1 }

procedure TfrmTransferenciasCaixaBanco.btnFecharClick(Sender: TObject);
begin
      PostMessage(Self.Handle, WM_CLOSE, 0, 0);
end;


procedure TfrmTransferenciasCaixaBanco.btnPesquisaClick(Sender: TObject);
var pDataIn, pDataEnd :TDateTime;
begin

pDataIn := frmPeriodo1.getDataInicial;
pDataEnd := frmPeriodo1.getDataFinal;

dmTransfCaixaBanco.obterTD(pIDOrganizacao, pDataIn, pDataEnd);
dbgrd1.DataSource.DataSet.Refresh;
dbgrd1.Refresh;

//buscar todas as trasnferencias do caixa para  banco em um periodo
//verificar se existe cheque -> alterar o cheque
//deletar credito ao banco
//deletar debito ao caixa

end;

procedure TfrmTransferenciasCaixaBanco.cbbDataMovimentoPropertiesChange(
  Sender: TObject);
  var
   validarData :Integer;
begin
  limpaStatusBar;
  pDataMovimento := StrToDate(FormatDateTime('DD/MM/YYYY',cbbDataMovimento.Date));
  pDataRegistro  := StrToDate(FormatDateTime('DD/MM/YYYY',now ));
  //se movimento < hoje = -1
  // se movimento > hoje =  1
  validarData := compareDate(pDataMovimento, pDataRegistro);

  if validarData = 1  then   begin // a data do movimento é maior que a data de hoje

    ShowMessage(' A data do movimento não pode ser maior que a data de hoje...');
    dxStatusTRF.Panels[0].Text := 'ERRO ';
    dxStatusTRF.Panels[1].Text := 'Erro na data de movimento. ';

  end;


end;


procedure TfrmTransferenciasCaixaBanco.ds1DataChange(Sender: TObject;
  Field: TField);
 var
 idTD, idConta, idLoteDeposito,  idCBC :string;
valorLote :Currency;
begin
limpaStatusBar;
 idCBC := dmTransfCaixaBanco.qryObterTD.FieldByName('IDCBC').AsString;
 edtIdentTD.Text := dmTransfCaixaBanco.qryObterTD.FieldByName('NUMERO_DOCUMENTO').AsString;


  if dmTransfCaixaBanco.obterCBC(pIDOrganizacao, idCBC) then
  begin

    idConta := dmTransfCaixaBanco.qryObterCBC.FieldByName('ID_CONTA_BANCARIA').AsString;
    idLoteDeposito := dmTransfCaixaBanco.qryObterCBC.FieldByName('ID_LOTE_DEPOSITO').AsString;
    idLoteContabil := dmTransfCaixaBanco.qryObterCBC.FieldByName('ID_LOTE_CONTABIL').AsString;
    edtLoteContabil.Text := idLoteContabil;
    edtIdentificaCBC.Text := dmTransfCaixaBanco.qryObterCBC.FieldByName('IDENTIFICACAO').AsString;

  end;

 if not uutil.Empty(idLoteDeposito) then begin
   //ver isso
    if dmTransfCaixaBanco.obterLote(pIdOrganizacao, idLoteDeposito )  then begin
        valorLote :=dmTransfCaixaBanco.qryObterLoteDeposito.FieldByName('TOTAL_DEPOSITO').AsCurrency;

     edtLoteDeposito.Text     := dmTransfCaixaBanco.qryObterLoteDeposito.FieldByName('LOTE').AsString;
     dxStatusBarEstorna.Panels[0].Text := 'Lote ' + edtLoteDeposito.Text;
     dxStatusBarEstorna.Panels[1].Text :=' Depósito ' +  EvExtenso1.GetExtenso(valorLote) ;
    end;

 end else begin

     edtLoteDeposito.Clear;
     dxStatusBarEstorna.Panels[0].Text := ' Status ';
     dxStatusBarEstorna.Panels[1].Text :=' Transferência em espécie. ' ;

 end;


  validarForm;

end;

procedure TfrmTransferenciasCaixaBanco.dxbrlrgbtn1Click(Sender: TObject);
begin
 PostMessage(Self.Handle, WM_CLOSE, 0, 0);
end;

procedure TfrmTransferenciasCaixaBanco.dxbrlrgbtn2Click(Sender: TObject);
begin
 limpaPanel;
end;

procedure TfrmTransferenciasCaixaBanco.dxBtnTrfConfirmaClick(Sender: TObject);
var
pIdentificacao, pDescricao,ID,cmdCBD, cmdTC :string;
pValor :Currency;
sucess :Boolean;
begin


  if validarForm then begin
    pDescricao := 'TRANSF CAIXA P/ BANCO';
    pIdentificacao := edtIdentificador.Text;
    pValor := StrToCurr(edtValor.Text);
    sucess := False;

    //lancamento na conta_bancaria_credito
    //lancamento na tesouraria_debito
    try
     dmConexao.conectarBanco;

          sucess := dmTransfCaixaBanco.transfereEspecieCaixaBanco(pIDOrganizacao,
                                                                  iDContaDestino,
                                                                  pIdResponsavel,
                                                                  pDataMovimento,
                                                                  pValor);





      if (sucess) then
      begin

        limpaPanel;
        PempecMsg.MsgInformation('Transferência concluída com sucesso.');

      end;


     except
         on e: Exception do  PempecMsg.MsgError(e.Message + sLineBreak );

        end;
  end;
end;


procedure TfrmTransferenciasCaixaBanco.dxBtnTrfEstornaClick(Sender: TObject);
var
 idTD, idConta, idLoteDeposito,  idCBC :string;
cheque : TContaBancariaChequeModel;
begin
 idTD            := dmTransfCaixaBanco.qryObterTD.FieldByName('IDTD').AsString ;
 idConta     := dmTransfCaixaBanco.qryObterCBC.FieldByName('ID_CONTA_BANCARIA').AsString ;
idLoteDeposito    := dmTransfCaixaBanco.qryObterCBC.FieldByName('ID_LOTE_DEPOSITO').AsString ;
idCBC       := dmTransfCaixaBanco.qryObterCBC.FieldByName('IDCBC').AsString ;
idLoteContabil        := dmTransfCaixaBanco.qryObterCBC.FieldByName('ID_LOTE_CONTABIL').AsString ;


       if (uutil.Empty(idLoteContabil)) then begin
         try
         dmConexao.conn.StartTransaction;

                  if dmTransfCaixaBanco.deletarTD(pIDOrganizacao, idCBc, idTd) then
                  begin

                    if dmTransfCaixaBanco.deletarCBC(pIDOrganizacao, idCBC) then
                    begin
                      PempecMsg.MsgInformation('Transferência excluída com sucesso.');

                    end;

                  end;



          dmConexao.conn.CommitRetaining;

         except
            on e: Exception do  PempecMsg.MsgError(e.Message + sLineBreak );

         end;


       end else begin

        PempecMsg.MsgError('Não é possível cancelar lançamento exportado para a contabilidade.');

       end;


     limpaPanel;
     btnPesquisaClick(Self);


end;

procedure TfrmTransferenciasCaixaBanco.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin

 if  (Assigned(dmTransfCaixaBanco)) then
  begin
    FreeAndNil(dmTransfCaixaBanco);
  end;

 Action := caFree;
end;

procedure TfrmTransferenciasCaixaBanco.FormCreate(Sender: TObject);
begin

 dmConexao.conectarBanco;

 if not (Assigned(dmTransfCaixaBanco)) then
  begin
    dmTransfCaixaBanco := TdmTransfCaixaBanco.Create(Self);
  end;


 pIDOrganizacao := uUtil.TOrgAtual.getId;
 limpaPanel;


end;


procedure TfrmTransferenciasCaixaBanco.frameResponsavel1cbbcomboChange(
  Sender: TObject);
begin
 validarForm;

 if frameResponsavel1.cbbcombo.ItemIndex >0 then begin
     pIdResponsavel := FslistaIdResponsavel[frameResponsavel1.cbbcombo.ItemIndex];
 end;

end;



procedure TfrmTransferenciasCaixaBanco.frmContaBancaria1cbbContaChange(
  Sender: TObject);
  var
  contaContabilDB : TContaContabilModel;
begin

if frmContaBancaria1.cbbConta.ItemIndex > 0 then
  begin
      contaContabilDB := TContaContabilModel.Create;
      contaContabilDB := frmContaBancaria1.getContaContabil(pIDOrganizacao, iDContaDestino);
      edtContaContabilDB.Text := contaContabilDB.FConta;
      iDContaDestino := FslistaIdConta[frmContaBancaria1.cbbConta.ItemIndex];
  end
  else
  begin

    PempecMsg.MsgError('É necessário selecionar uma conta.');
  end;

end;

procedure TfrmTransferenciasCaixaBanco.limpaStatusBar;
begin
dxStatusBarEstorna.Panels[0].Text := 'Status ';
dxStatusBarEstorna.Panels[1].Text := 'Ativo ';
dxStatusTRF.Panels[0].Text := 'Status ';
dxStatusTRF.Panels[1].Text := 'Ativo ';


end;

procedure TfrmTransferenciasCaixaBanco.limpaPanel;
var
qryTOB :TFDQuery;
begin
 pIdOperacao :=  'DEPOSITO TESOURARIA/BANCO';
 edtTipoOperacao.Text := pIdOperacao;
 frameResponsavel1.obterTodosAtivos(pIDOrganizacao,frameResponsavel1.cbbcombo,FslistaIdResponsavel);
 frmContaBancaria1.obterTodos(pIDOrganizacao,frmContaBancaria1.cbbConta, FslistaIdConta);
 cbbDataMovimento.Date := Now;
 edtValor.Clear;
 edtIdentificador.Clear;
 edtContaContabilDB.Clear;
 edtContaContabilCR.Clear;

    qryTOB := TFDQuery.Create(Self);
    qryTOB := dmTransfCaixaBanco.obterTipoOperacaoBancaria(pIDOrganizacao, pIdOperacao);

    if not qryTOB.IsEmpty then
    begin
      edtContaContabilCR.Text := qryTOB.FieldByName('CONTA').AsString;
    end;

    dxBtnTrfConfirma.Enabled := False;
    dxBtnTrfEstorna.Enabled := False;

    frmPeriodo1.inicializa(Now, now);
    limpaStatusBar;

end;


procedure TfrmTransferenciasCaixaBanco.tbTransfereEstornaShow(Sender: TObject);
begin
 //dmTransfBancoCaixa.obterCBD(pIDOrganizacao, Now, Now);

end;

function TfrmTransferenciasCaixaBanco.validarForm: Boolean;
var
valido :Boolean;
begin
      valido := False;

      if (frmContaBancaria1.cbbConta.ItemIndex > 0) then
      begin

        if (edtValor.Value > 0) then
        begin

          if (frameResponsavel1.cbbcombo.ItemIndex > 0) then
          begin
            pIdResponsavel := FslistaIdResponsavel[frameResponsavel1.cbbcombo.ItemIndex];
            dxBtnTrfConfirma.Enabled := True;
            dxBtnTrfEstorna.Enabled := False;
            valido := True;

            pIdentificacao := dmConexao.obterIdentificador('', pIDOrganizacao, 'TD');
            edtIdentificador.Text := pIdentificacao;

          end;
        end;
      end;

   //para a parte de estorno

   if not ( uutil.Empty(idLoteContabil) ) then begin
     dxBtnTrfEstorna.Enabled := False;
   end else begin
        dxBtnTrfEstorna.Enabled := True;
   end;

  Result := valido;

end;


end.
