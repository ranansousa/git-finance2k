unit uFrmEnviaMail;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uutil, udmConexao, uOrganizacaoDAO,uOrganizacaoModel, UVarGlobais,
  dxSkinsCore, dxSkinsDefaultPainters, cxGraphics, cxControls, cxLookAndFeels,
  cxLookAndFeelPainters, dxRibbonSkins, dxRibbonCustomizationForm, cxClasses,
  dxRibbon, dxBar, EMsgDlg, dxStatusBar, Vcl.StdCtrls, Vcl.Buttons, Vcl.ExtCtrls;

type
  TfrmEnviaMail = class(TForm)
    dxBarManager1: TdxBarManager;
    dxRibbon1Tab1: TdxRibbonTab;
    dxRibbon1: TdxRibbon;
    dxBarManager1Bar1: TdxBar;
    dxBarManager1Bar3: TdxBar;
    dxBarBtnFechar: TdxBarLargeButton;
    dxStatusBar: TdxStatusBar;
    PempecMsg: TEvMsgDlg;
    dxBarBtnEnviar: TdxBarLargeButton;
    edtDestino: TEdit;
    edtDestinoCopia: TEdit;
    Label1: TLabel;
    btnCC: TBitBtn;
    lblCC: TLabel;
    memo: TMemo;
    Label2: TLabel;
    edtAnexo: TEdit;
    Label3: TLabel;
    btnAnexo: TBitBtn;
    Label4: TLabel;
    edtAssunto: TEdit;
    btnNetOFF: TBitBtn;
    btnNetON: TBitBtn;
    procedure dxBarBtnFecharClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure btnCCClick(Sender: TObject);
    procedure btnAnexoClick(Sender: TObject);
    procedure dxBarBtnEnviarClick(Sender: TObject);
  private
    { Private declarations }

    function obterStatusServidorEmail :Boolean;
    procedure checaServidorEmail;
  public
    { Public declarations }
    procedure limparPanel();


    constructor Create (AOwner :TComponent; pAnexo :String);

  end;

var
  frmEnviaMail: TfrmEnviaMail;

implementation

{$R *.dfm}

procedure TfrmEnviaMail.btnAnexoClick(Sender: TObject);
begin
with TOpenDialog.Create(Self) do
    if Execute then
      edtAnexo.Text := FileName;

end;

procedure TfrmEnviaMail.btnCCClick(Sender: TObject);
begin
 edtDestinoCopia.Visible := True;
 lblCC.Visible := True;
end;

procedure TfrmEnviaMail.checaServidorEmail;
begin
btnNetON.Visible := False;
btnNetOFF.Visible := True;

 if obterStatusServidorEmail then begin

 btnNetON.Visible := True;
 btnNetOFF.Visible :=False;
 end;

end;

constructor TfrmEnviaMail.Create(AOwner: TComponent; pAnexo: String);
begin
 inherited Create(AOwner);

  if not uutil.Empty(pAnexo) then begin

  edtAnexo.Text := pAnexo;
  edtAssunto.Text := pAnexo;

  end;



end;

procedure TfrmEnviaMail.dxBarBtnEnviarClick(Sender: TObject);
begin

 if uutil.IsInternetConected then begin


  if uutil.EnviarEmail(edtAssunto.Text,
                     edtDestino.Text,
                     edtAnexo.Text,
                      memo.Lines ) then begin


    PempecMsg.MsgInformation('Mensagem enviada com sucesso...');

                      end;


 end else begin PempecMsg.MsgWarning('Sem conexão com servidor de e-mail'); end; //if de internet conectada


  dxBarBtnFechar.Click;

end;

procedure TfrmEnviaMail.dxBarBtnFecharClick(Sender: TObject);
begin
 PostMessage(Self.Handle, WM_CLOSE, 0, 0);
end;

procedure TfrmEnviaMail.FormClose(Sender: TObject; var Action: TCloseAction);
begin
Action := caFree;
end;

procedure TfrmEnviaMail.FormCreate(Sender: TObject);
begin

limparPanel;

end;

procedure TfrmEnviaMail.limparPanel;
begin
 edtDestinoCopia.Visible := False;
 lblCC.Visible :=False;

 checaServidorEmail;


end;




function TfrmEnviaMail.obterStatusServidorEmail: Boolean;
var
  sucesso: Boolean;
begin

  sucesso := False;

  sucesso := uutil.IsInternetConected;

  Result := sucesso;
end;

end.

