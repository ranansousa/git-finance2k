unit uCreateOrg;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
    Vcl.Controls, Vcl.Forms, Vcl.Dialogs, cxGraphics, cxControls, cxLookAndFeels, uUtil,uUsuarioDAO, uUsuarioModel, uFrmManterUsuario,
    uOrganizacaoDAO, uOrganizacaoModel, cxLookAndFeelPainters, dxRibbonSkins, dxRibbonCustomizationForm, dxBar,
     udmConexao, ValidaCNPJ, uHistoricoDAO, uHistoricoModel, uCentroCustoDAO, uCentroCustoModel,
  cxClasses, dxRibbon, Vcl.StdCtrls, dxStatusBar, EMsgDlg, dxBarBuiltInMenu,  uTipoOperacaoBancariaDAO, uTipoOperacaoBancariaModel,
  cxPC, Vcl.ExtCtrls;

type
  TfrmCreateOrg = class(TForm)
    dxBarManager1: TdxBarManager;
    dxRibbon1Tab1: TdxRibbonTab;
    dxRibbon1: TdxRibbon;
    dxBarManager1Bar1: TdxBar;
    dxBarManager1Bar2: TdxBar;
    dxBarManager1Bar3: TdxBar;
    dxBarBtnSair: TdxBarLargeButton;
    edtRazao: TEdit;
    cbxTipo: TComboBox;
    edtFantasia: TEdit;
    edtSigla: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    lblCNPJ: TLabel;
    edtCNPJ: TEdit;
    edtEstadual: TEdit;
    edtMunicipal: TEdit;
    Label5: TLabel;
    Label6: TLabel;
    dxStatusBar: TdxStatusBar;
    PempecMsg: TEvMsgDlg;
    phHistorico: TcxPageControl;
    Panel1: TPanel;
    dxBarBtnNovo: TdxBarLargeButton;
    dxBarBtnHst: TdxBarLargeButton;
    dxBarBtnTOB: TdxBarLargeButton;
    dxBarBtnCC: TdxBarLargeButton;
    Memo: TMemo;
    dxBarBtnUser: TdxBarLargeButton;

    procedure FormCreate(Sender: TObject);
    procedure edtCNPJChange(Sender: TObject);
    procedure edtCNPJExit(Sender: TObject);
    procedure cbxTipoChange(Sender: TObject);
    procedure dxBarBtnSairClick(Sender: TObject);
    procedure dxBarBtnNovoClick(Sender: TObject);
    procedure dxBarBtnHstClick(Sender: TObject);
    procedure dxBarBtnTOBClick(Sender: TObject);
    procedure dxBarBtnCCClick(Sender: TObject);
    procedure dxBarBtnUserClick(Sender: TObject);
  private
      pIDorganizacao :string;
      organizacaoModel: TOrganizacaoModel;

    function Mascara(edt, str: String): string;
    function isValidForm: Boolean;
    procedure limpaStatusBar;
    procedure msgStatusBar(pPosicao: Integer; msg: string);
    function obterOrgPorCNPJ(pCNPJ :string): Boolean;
    procedure cadastraHistoricosBasicos (value :TOrganizacaoModel);
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmCreateOrg: TfrmCreateOrg;

implementation

{$R *.dfm}

function TfrmCreateOrg.Mascara(edt: String;str:String):string;
var
  i : integer;
begin
  for i := 1 to Length(edt) do
  begin
     if (str[i] = '9') and not (edt[i] in ['0'..'9']) and (Length(edt)=Length(str)+1) then
        delete(edt,i,1);
     if (str[i] <> '9') and (edt[i] in ['0'..'9']) then
        insert(str[i],edt, i);
  end;
  result := edt;
end;

procedure TfrmCreateOrg.cadastraHistoricosBasicos(value: TOrganizacaoModel);
var
historicoModel :THistoricoModel;
begin
       {
 //cadastra todos os historicos basicos
 historicoModel := THistoricoModel.Create;
 historicoModel.FIdOrganizacao := value.FID;
 historicoModel.FID := 'CHEQUE RECEBIDO POR TITULO';
 historicoModel.FDescricao :=  historicoModel.FID;
 historicoModel.FTipo := 'R';
 historicoModel.FCodigo := 0;

 THistoricoDAO.Insert(historicoModel);
 Sleep(1000);

  historicoModel := THistoricoModel.Create;
 historicoModel.FIdOrganizacao := value.FID;
 historicoModel.FID := 'DEPOSITO TESOURARIA/BANCO';
 historicoModel.FDescricao :=  historicoModel.FID;
 historicoModel.FTipo := 'R';
 historicoModel.FCodigo := 0;

 THistoricoDAO.Insert(historicoModel);
 Sleep(1000);


 historicoModel := THistoricoModel.Create;
 historicoModel.FIdOrganizacao := value.FID;
 historicoModel.FID := 'RECBTO TITULO ESPECIE';
 historicoModel.FDescricao :=  historicoModel.FID;
 historicoModel.FTipo := 'R';
 historicoModel.FCodigo := 0;

 THistoricoDAO.Insert(historicoModel);
 Sleep(1000);





INSERT INTO HISTORICO (ID_HISTORICO, DESCRICAO, TIPO, CODIGO)
               VALUES ('COFINS', 'COFINS', 'P', 207);
INSERT INTO HISTORICO (ID_HISTORICO, DESCRICAO, TIPO, CODIGO)
               VALUES ('CSLL', 'CSLL', 'D', 1);
INSERT INTO HISTORICO (ID_HISTORICO, DESCRICAO, TIPO, CODIGO)
               VALUES ('CUSTAS', 'CUSTAS', 'P', 511);

INSERT INTO HISTORICO (ID_HISTORICO, DESCRICAO, TIPO, CODIGO)
               VALUES ('DESCONTOS', 'DESCONTOS DIVERSOS', 'P', 1);
INSERT INTO HISTORICO (ID_HISTORICO, DESCRICAO, TIPO, CODIGO)
               VALUES ('ICMS', 'ICMS', 'P', 1);
INSERT INTO HISTORICO (ID_HISTORICO, DESCRICAO, TIPO, CODIGO)
               VALUES ('INSS', 'INSS', 'P', 507);
INSERT INTO HISTORICO (ID_HISTORICO, DESCRICAO, TIPO, CODIGO)
               VALUES ('IRRF_PF', 'IRRF PF', 'P', 1);
INSERT INTO HISTORICO (ID_HISTORICO, DESCRICAO, TIPO, CODIGO)
               VALUES ('IRRF_PJ', 'IRRF PJ', 'P', 1);
INSERT INTO HISTORICO (ID_HISTORICO, DESCRICAO, TIPO, CODIGO)
               VALUES ('ISS', 'ISS', 'P', 1);
INSERT INTO HISTORICO (ID_HISTORICO, DESCRICAO, TIPO, CODIGO)
               VALUES ('JUROS', 'JUROS', 'P', 1);
INSERT INTO HISTORICO (ID_HISTORICO, DESCRICAO, TIPO, CODIGO)
               VALUES ('MORA', 'MORA MULTAS E OUTROS', 'A', 1);
INSERT INTO HISTORICO (ID_HISTORICO, DESCRICAO, TIPO, CODIGO)
               VALUES ('MULTA', 'MULTA', 'P', 1);
INSERT INTO HISTORICO (ID_HISTORICO, DESCRICAO, TIPO, CODIGO)
               VALUES ('PAGTO TITULO ESPECIE', 'PAGTO TITULO ESPECIE', 'P', 1);
INSERT INTO HISTORICO (ID_HISTORICO, DESCRICAO, TIPO, CODIGO)
               VALUES ('PIS', 'PIS', 'P', 1);

INSERT INTO HISTORICO (ID_HISTORICO, DESCRICAO, TIPO, CODIGO)
               VALUES ('TRANSFERE BANCO/TESOURARIA', 'TRANSFERENCIA', 'P', 22);



       }

end;

procedure TfrmCreateOrg.cbxTipoChange(Sender: TObject);
begin
    if cbxTipo.ItemIndex = 1 then begin
       //cpf
       lblCNPJ.Caption := 'CPF';
     end;

      if cbxTipo.ItemIndex = 0 then begin
       //cnpj
              lblCNPJ.Caption := 'CNPJ';

     end;

end;

procedure TfrmCreateOrg.dxBarBtnCCClick(Sender: TObject);
var
arquivoHST : TextFile;
pathArquivo :string;
linha: string;

historicoModel :THistoricoModel;

begin
  pathArquivo := GetCurrentDir + '\historico.txt';

  AssignFile(arquivoHST, pathArquivo);
  {$I-}         // desativa a diretiva de Input
  Reset(arquivoHST);   // [ 3 ] Abre o arquivo texto para leitura
  {$I+}         // ativa a diretiva de Input

  if (IOResult <> 0) // verifica o resultado da operação de abertura
    then
    Memo.Lines.Add('Erro na abertura do arquivo !!!')
  else
  begin
// [ 11 ] verifica se o ponteiro de arquivo atingiu a marca de final de arquivo
   Memo.Clear;
    while (not eof(arquivoHST)) do
    begin
      readln(arquivoHST, linha); // [ 6 ] Lê uma linha do arquivo

      historicoModel := THistoricoModel.Create;
      historicoModel.FIdOrganizacao := pIDorganizacao;
      historicoModel.FTipo := UpperCase(Copy(linha,1,1));
      historicoModel.FID := UpperCase(Copy(linha,3,34));;
      historicoModel.FDescricao := historicoModel.FID;
      historicoModel.FCodigo := 0;

      if THistoricoDAO.Insert(historicoModel) then begin
        Memo.Lines.Add('Historico inserido : ' + historicoModel.FDescricao);
      end;


    end;

  end;


// Fecha o arquivo
  CloseFile(arquivoHST);

end;

procedure TfrmCreateOrg.dxBarBtnHstClick(Sender: TObject);
var
arquivoHST : TextFile;
pathArquivo :string;
linha: string;

historicoModel :THistoricoModel;

begin
  pathArquivo := GetCurrentDir + '\historico.txt';

  AssignFile(arquivoHST, pathArquivo);
  {$I-}         // desativa a diretiva de Input
  Reset(arquivoHST);   // [ 3 ] Abre o arquivo texto para leitura
  {$I+}         // ativa a diretiva de Input

  if (IOResult <> 0) // verifica o resultado da operação de abertura
    then
    Memo.Lines.Add('Erro na abertura do arquivo !!!')
  else
  begin
// [ 11 ] verifica se o ponteiro de arquivo atingiu a marca de final de arquivo
   Memo.Clear;
    while (not eof(arquivoHST)) do
    begin
      readln(arquivoHST, linha); // [ 6 ] Lê uma linha do arquivo

      historicoModel := THistoricoModel.Create;
      historicoModel.FIdOrganizacao := pIDorganizacao;
      historicoModel.FTipo := UpperCase(Copy(linha,1,1));
      historicoModel.FID := UpperCase(Copy(linha,3,33));;
      historicoModel.FDescricao := historicoModel.FID;
      historicoModel.FCodigo := 0;

      if THistoricoDAO.Insert(historicoModel) then begin
        Memo.Lines.Add('Historico inserido : ' + historicoModel.FDescricao);
      end;


    end;

  end;


// Fecha o arquivo
  CloseFile(arquivoHST);

 end;





procedure TfrmCreateOrg.dxBarBtnNovoClick(Sender: TObject);

begin

  if isValidForm then
  begin

    organizacaoModel := TOrganizacaoModel.Create;
    organizacaoModel.FCNPJ := edtCNPJ.Text;
    organizacaoModel.FRazaoSocial := edtRazao.Text;
    organizacaoModel.FSigla := edtSigla.Text;
    organizacaoModel.FFantasia := edtFantasia.Text;
    organizacaoModel.FINSCRICAO_ESTADUAL := edtEstadual.Text;
    organizacaoModel.FINSCRICAO_MUNICIPAL := edtMunicipal.Text;
    organizacaoModel.FSERIAL_HD := uutil.GetSerialMotherBoard; //pegar do banco
    organizacaoModel.FATIVA := 1;
    organizacaoModel.FNAMESERVERBD := uutil.GetComputerNetName;
    organizacaoModel.FIPSERVERBD := uUtil.GetIp;
    organizacaoModel.FDATA_ATUALIZACAO := Now;
    organizacaoModel.FemailSuporte := 'suporte@pempec.com.br';

    if TOrganizacaoDAO.Insert(organizacaoModel) then
    begin
      organizacaoModel := TOrganizacaoModel.Create;
      organizacaoModel.FCNPJ := edtCNPJ.Text;
      organizacaoModel := TOrganizacaoDAO.obterPorCNPJ(organizacaoModel);

      pIDorganizacao := organizacaoModel.FID;

       dxBarBtnHst.Enabled := False;
       dxBarBtnTOB.Enabled := False;
       dxBarBtnCC.Enabled  := False;
       dxBarBtnUser.Enabled  := False;


      if not uutil.Empty(pIDorganizacao) then
      begin

        dxBarBtnHst.Enabled := True;
        dxBarBtnTOB.Enabled := True;
        dxBarBtnCC.Enabled  := True;
       dxBarBtnUser.Enabled  := True;

      end;

      PempecMsg.MsgInformation('Organização criada com sucesso');

    end;

  end
  else
  begin
    PempecMsg.MsgWarning('Não foi possível cadastrar nova organização.');
  end;



end;

procedure TfrmCreateOrg.dxBarBtnSairClick(Sender: TObject);
begin
  PostMessage(Self.Handle, WM_CLOSE, 0, 0);
end;


procedure TfrmCreateOrg.dxBarBtnTOBClick(Sender: TObject);
var
arquivoTOB : TextFile;
pathArquivo :string;
linha: string;
tipoOB : TTipoOperacaoBancariaModel;
begin
  pathArquivo := GetCurrentDir + '\TOB.txt';

  AssignFile(arquivoTOB, pathArquivo);
  {$I-}         // desativa a diretiva de Input
  Reset(arquivoTOB);   // [ 3 ] Abre o arquivo texto para leitura
  {$I+}         // ativa a diretiva de Input

  if (IOResult <> 0) // verifica o resultado da operação de abertura
    then
    Memo.Lines.Add('Erro na abertura do arquivo !!!')
  else
  begin
// [ 11 ] verifica se o ponteiro de arquivo atingiu a marca de final de arquivo
   Memo.Clear;
    while (not eof(arquivoTOB)) do
    begin
      readln(arquivoTOB, linha); // [ 6 ] Lê uma linha do arquivo
      tipoOB := TTipoOperacaoBancariaModel.Create;

      tipoOB.FIdOrganizacao := pIDorganizacao;
      tipoOB.Fcodigo := StrToInt(Copy(linha,1,1));
      tipoOB.FID := UpperCase(Copy(linha,3,33));;
      tipoOB.FDescricao := tipoOB.FID;
      tipoOB.Ftipo := tipoOB.Fcodigo;

      if TTipoOperacaoBancariaDAO.Insert(tipoOB) then begin
        Memo.Lines.Add('Tipo Operação Bancária inserida : ' + tipoOB.FDescricao);
      end;


    end;

  end;


// Fecha o arquivo
  CloseFile(arquivoTOB);

 end;



procedure TfrmCreateOrg.dxBarBtnUserClick(Sender: TObject);
begin


  frmManterUsuario := TfrmManterUsuario.Create(Self);
  frmManterUsuario.ShowModal;
  FreeAndNil(frmManterUsuario);



end;

procedure TfrmCreateOrg.edtCNPJChange(Sender: TObject);
begin
{  //ao tempo que vai digitando, o sistema vai formatando o edit.
TEdit(Sender).Text := Mascara(TEdit(Sender).Text,'99.999.999/9999-99');
TEdit(Sender).SelStart := Length(TEdit(Sender).Text);
}



  try
      if Length(TEdit(Sender).Text) > 0 then
      begin

        if ValidaCNPJ.isCNPJ(uUtil.SoNumeros(TEdit(Sender).Text)) then
        begin

          if obterOrgPorCNPJ(edtCNPJ.Text) then
          begin

            PempecMsg.MsgInformation('Organizacao já cadastrada. ' + organizacaoModel.FRazaoSocial);

          end;
        end
        else
        begin
          PempecMsg.MsgInformation(' CNPJ inválido.');
        end;
      end;

  finally
    if Assigned(organizacaoModel) then
    begin

      FreeAndNil(organizacaoModel);
    end;

  end;

end;



procedure TfrmCreateOrg.edtCNPJExit(Sender: TObject);
begin

    if cbxTipo.ItemIndex = 1 then begin
       //cpf
       TEdit(Sender).Text := uutil.TFormat.formacpf(TEdit(Sender).Text);
     end;

      if cbxTipo.ItemIndex = 0 then begin
       //cnpj
       TEdit(Sender).Text := uutil.TFormat.formacnpj(TEdit(Sender).Text);

     end;
end;

procedure TfrmCreateOrg.FormCreate(Sender: TObject);
begin
pIDorganizacao:= '';
cbxTipo.ItemIndex := 0;
lblCNPJ.Caption := 'CNPJ';
msgStatusBar(0, 'BASE DE DADOS ');
msgStatusBar(1, 'SEM CONEXAO ');

 if not Assigned(dmConexao) then begin
   dmConexao := TdmConexao.Create(Self);
 end;


 if dmConexao.conectarBanco then begin

   msgStatusBar(1, 'CONECTADA ');

 end;

 dxBarBtnHst.Enabled := False;
 dxBarBtnTOB.Enabled := False;
 dxBarBtnCC.Enabled := False;
 dxBarBtnUser.Enabled  := False;



end;

function TfrmCreateOrg.isValidForm :Boolean;
var i:integer;
liberado : Boolean;

begin
 liberado :=false;

 msgStatusBar(1, 'Verifique os campos obrigatórios.');

  for i := 0 to Self.ComponentCount - 1 do
  begin
          {  if ActiveControl is Tedit then begin
                 Showmessage(TEdit(ActiveControl).Name); end; }
    if Self.components[i] is TEdit then
    begin
      if (Tedit(components[i]).tag = 1) and uutil.Empty((Tedit(components[i]).text)) then
      begin
        liberado := false;

        TEdit(Components[i]).Enabled := True;
        TEdit(Components[i]).Visible := True;
        TEdit(Components[i]).SetFocus;
        PempecMsg.MsgWarning('Alguns campos obrigatórios não foram preenchidos!');

        Break

      end
      else
      begin
        liberado := True;
      end;

    end;
  end;
  if cbxTipo.ItemIndex = 0 then
  begin

    if not ValidaCNPJ.isCNPJ(uUtil.SoNumeros(edtCNPJ.Text)) then
    begin

      PempecMsg.MsgWarning('CNPJ INVÁLIDO');
      liberado := False;

    end;

    if obterOrgPorCNPJ(edtCNPJ.Text) then
    begin

      PempecMsg.MsgInformation('CNPJ já está cadastrado. ');
      liberado := False;

    end;

  end;



Result := liberado;
end;

procedure TfrmCreateOrg.msgStatusBar(pPosicao : Integer; msg :string);
begin
dxStatusBar.Panels[pPosicao].Text := msg;
Application.ProcessMessages;
end;

function TfrmCreateOrg.obterOrgPorCNPJ(pCNPJ: string): Boolean;
var

  sucesso :Boolean;
begin
 sucesso := False;
  try

    organizacaoModel := TOrganizacaoModel.Create;
    organizacaoModel.FCNPJ := pCNPJ;
    organizacaoModel := TOrganizacaoDAO.obterPorCNPJ(organizacaoModel);

    if not uUtil.Empty(organizacaoModel.FID) then
    begin

      sucesso := True; //encontrou uma organizacao com o cnpj

    end;


  finally
   if Assigned(organizacaoModel) then begin

   FreeAndNil(organizacaoModel);
   end;

  end;

  Result :=  sucesso ;
end;

procedure TfrmCreateOrg.limpaStatusBar;
begin
dxStatusBar.Panels[0].Text := 'Status ';
msgStatusBar(1,'Ativo. ');
end;





end.
