unit uPempecExceptions;
//Adicione um componente TApplicationEvents, da paleta Additional, no formulário principal do sistema.


interface

uses
  System.SysUtils, Vcl.Forms;

type
  TPempecExceptions = class
  private
    function ObterNomeUsuario: string;
    function ObterVersaoWindows: string;
    procedure GravarImagemFormulario(const NomeArquivo: string; Formulario: TForm);
  public
    procedure CapturarExcecao(Sender: TObject; E: Exception);
  end;

implementation

uses
  Winapi.Windows, Registry, System.UITypes, uUtil,
  Vcl.Dialogs, Vcl.Graphics, Vcl.Imaging.jpeg, Vcl.ClipBrd,
  Vcl.ComCtrls;

{ TPempecExceptions }

procedure TPempecExceptions.CapturarExcecao(Sender: TObject; E: Exception);
var
  CaminhoArquivoLog: string;
  ArquivoLog: TextFile;
  StringBuilder: TStringBuilder;
  DataHora: string;
begin
  CaminhoArquivoLog := GetCurrentDir + '\LogExcecoes.txt';
  AssignFile(ArquivoLog, CaminhoArquivoLog);

  // Se o arquivo existir, abre para edição,
  // Caso contrário, cria o arquivo
  if FileExists(CaminhoArquivoLog) then
    Append(ArquivoLog)
  else
    ReWrite(ArquivoLog);

  DataHora := FormatDateTime('dd-mm-yyyy_hh-nn-ss', Now);
  WriteLn(ArquivoLog, 'Data/Hora.......: ' + DateTimeToStr(Now));
  WriteLn(ArquivoLog, 'Mensagem........: ' + E.Message);
  WriteLn(ArquivoLog, 'Classe Exceção..: ' + E.ClassName);
  WriteLn(ArquivoLog, 'Formulário......: ' + Screen.ActiveForm.Name);
  WriteLn(ArquivoLog, 'Unit............: ' + Sender.UnitName);
  WriteLn(ArquivoLog, 'Controle Visual.: ' + Screen.ActiveControl.Name);
  WriteLn(ArquivoLog, 'Usuario.........: ' + ObterNomeUsuario);
  WriteLn(ArquivoLog, 'Versão Windows..: ' + ObterVersaoWindows);
  WriteLn(ArquivoLog, StringOfChar('-', 70));

  // Fecha o arquivo
  CloseFile(ArquivoLog);

  GravarImagemFormulario(DataHora, Screen.ActiveForm);

  // * Descomente esse código para que a exceção seja exibida para o usuário *
  StringBuilder := TStringBuilder.Create;

  try
    // Exibe a mensagem para o usuário
    StringBuilder.AppendLine('Ocorreu um problema que impediu o sucesso da operação.')
      .AppendLine('O erro foi registrado para posterior veriricação.')
      .AppendLine(EmptyStr)
      .AppendLine('Descrição técnica:')
      .AppendLine(E.Message);

    MessageDlg(StringBuilder.ToString, mtWarning, [mbOK], 0);

  finally
    StringBuilder.Free;
  end;
end;

procedure TPempecExceptions.GravarImagemFormulario(const NomeArquivo: string; Formulario: TForm);
var
  Bitmap: TBitmap;
  JPEG: TJpegImage;
begin
  Bitmap := TBitmap.Create;
  JPEG := TJpegImage.Create;
  try
    Bitmap.Assign(Formulario.GetFormImage);
    JPEG.Assign(Bitmap);
    JPEG.SaveToFile(Format('%s\%s.jpg', [GetCurrentDir, NomeArquivo]));
  finally
    JPEG.Free;
    Bitmap.Free;
  end;
end;

function TPempecExceptions.ObterNomeUsuario: string;
var
  Size: DWord;
begin
  // retorna o login do usuário do sistema operacional
  Size := 1024;
  SetLength(result, Size);
  GetUserName(PChar(result), Size);
  SetLength(result, Size - 1);

  Result := uutil.TUserAtual.getNameUser;

end;

function TPempecExceptions.ObterVersaoWindows: string;
begin
  case System.SysUtils.Win32MajorVersion of
    5:
      case System.SysUtils.Win32MinorVersion of
        1: result := 'Windows XP';
      end;
    6:
      case System.SysUtils.Win32MinorVersion of
        0: result := 'Windows Vista';
        1: result := 'Windows 7';
        2: result := 'Windows 8';
        3: result := 'Windows 8.1';
      end;
    10:
      case System.SysUtils.Win32MinorVersion of
        0: result := 'Windows 10';
      end;
  end;
end;


//metodo OnException do  componente TApplicationEvents

{

procedure TPempecExceptions.ApplicationEventsException(Sender: TObject; E: Exception);
var
  CapturaExcecoes: TCapturaExcecoes;
begin
  // Cria a classe de captura de exceções
  CapturaExcecoes := TCapturaExcecoes.Create;
  try
    // Invoca o método de captura, informando os parâmetros
    CapturaExcecoes.CapturarExcecao(Sender, E);

    // Carrega novamente o arquivo de log no Memo
    Memo.Lines.LoadFromFile(GetCurrentDir + '\LogExcecoes.txt');

    // Navega para o final do Memo para mostrar a exceção mais recente
    SendMessage(Memo.Handle, EM_LINESCROLL, 0,Memo.Lines.Count);
  finally
    CapturaExcecoes.Free;
  end;
end;

}


//Para exibir os erros

{


procedure TPempecExceptions.FormShow(Sender: TObject);
begin
  // Carrega novamente o arquivo de log no Memo
  if FileExists(GetCurrentDir + '\LogExcecoes.txt') then
    Memo.Lines.LoadFromFile(GetCurrentDir + '\LogExcecoes.txt');
end;



}

end.

